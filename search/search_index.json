{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KotlinPoet \u00b6 KotlinPoet is a Kotlin and Java API for generating .kt source files. Source file generation can be useful when doing things such as annotation processing or interacting with metadata files (e.g., database schemas, protocol formats). By generating code, you eliminate the need to write boilerplate while also keeping a single source of truth for the metadata. Example \u00b6 Here\u2019s a HelloWorld file: class Greeter ( val name : String ) { fun greet () { println ( \"\"\"Hello, $name\"\"\" ) } } fun main ( vararg args : String ) { Greeter ( args [ 0 ]). greet () } And this is the code to generate it with KotlinPoet: val greeterClass = ClassName ( \"\" , \"Greeter\" ) val file = FileSpec . builder ( \"\" , \"HelloWorld\" ) . addType ( TypeSpec . classBuilder ( \"Greeter\" ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( \"name\" , String :: class ) . build ()) . addProperty ( PropertySpec . builder ( \"name\" , String :: class ) . initializer ( \"name\" ) . build ()) . addFunction ( FunSpec . builder ( \"greet\" ) . addStatement ( \"println(%P)\" , \"Hello, \\$name\" ) . build ()) . build ()) . addFunction ( FunSpec . builder ( \"main\" ) . addParameter ( \"args\" , String :: class , VARARG ) . addStatement ( \"%T(args[0]).greet()\" , greeterClass ) . build ()) . build () file . writeTo ( System . out ) The KDoc catalogs the complete KotlinPoet API, which is inspired by JavaPoet . Code & Control Flow \u00b6 Most of KotlinPoet\u2019s API uses immutable Kotlin objects. There\u2019s also builders, method chaining and varargs to make the API friendly. KotlinPoet offers models for Kotlin files ( FileSpec ), classes, interfaces & objects ( TypeSpec ), type aliases ( TypeAliasSpec ), properties ( PropertySpec ), functions & constructors ( FunSpec ), parameters ( ParameterSpec ) and annotations ( AnnotationSpec ). But the body of methods and constructors is not modeled. There\u2019s no expression class, no statement class or syntax tree nodes. Instead, KotlinPoet uses strings for code blocks, and you can take advantage of Kotlin\u2019s multiline strings to make this look nice: val main = FunSpec . builder ( \"main\" ) . addCode ( \"\"\" |var total = 0 |for (i in 0 until 10) { | total += i |} |\"\"\" . trimMargin ()) . build () Which generates this: fun main () { var total = 0 for ( i in 0 until 10 ) { total += i } } There are additional APIs to assist with newlines, braces and indentation: val main = FunSpec . builder ( \"main\" ) . addStatement ( \"var total = 0\" ) . beginControlFlow ( \"for (i in 0 until 10)\" ) . addStatement ( \"total += i\" ) . endControlFlow () . build () This example is lame because the generated code is constant! Suppose instead of just adding 0 to 10, we want to make the operation and range configurable. Here\u2019s a method that generates a method: private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( \"var result = 1\" ) . beginControlFlow ( \"for (i in $from until $to)\" ) . addStatement ( \"result = result $op i\" ) . endControlFlow () . addStatement ( \"return result\" ) . build () } And here\u2019s what we get when we call computeRange(\"multiply10to20\", 10, 20, \"*\") : fun multiply10to20 (): kotlin . Int { var result = 1 for ( i in 10 until 20 ) { result = result * i } return result } Methods generating methods! And since KotlinPoet generates source instead of bytecode, you can read through it to make sure it\u2019s right. %S for Strings \u00b6 When emitting code that includes string literals, we can use %S to emit a string , complete with wrapping quotation marks and escaping. Here\u2019s a program that emits 3 methods, each of which returns its own name: fun main ( args : Array < String >) { val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addFunction ( whatsMyNameYo ( \"slimShady\" )) . addFunction ( whatsMyNameYo ( \"eminem\" )) . addFunction ( whatsMyNameYo ( \"marshallMathers\" )) . build () val kotlinFile = FileSpec . builder ( \"com.example.helloworld\" , \"HelloWorld\" ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) } private fun whatsMyNameYo ( name : String ): FunSpec { return FunSpec . builder ( name ) . returns ( String :: class ) . addStatement ( \"return %S\" , name ) . build () } In this case, using %S gives us quotation marks: class HelloWorld { fun slimShady (): String = \"slimShady\" fun eminem (): String = \"eminem\" fun marshallMathers (): String = \"marshallMathers\" } %P for String Templates \u00b6 %S also handles the escaping of dollar signs ( $ ), to avoid inadvertent creation of string templates, which may fail to compile in generated code: val stringWithADollar = \"Your total is \" + \"$\" + \"50\" val funSpec = FunSpec . builder ( \"printTotal\" ) . returns ( String :: class ) . addStatement ( \"return %S\" , stringWithADollar ) . build () produces: fun printTotal (): String = \"Your total is ${'$'}50\" If you need to generate string templates, use %P , which doesn\u2019t escape dollars: val amount = 50 val stringWithADollar = \"Your total is \" + \"$\" + \"amount\" val funSpec = FunSpec . builder ( \"printTotal\" ) . returns ( String :: class ) . addStatement ( \"return %P\" , stringWithADollar ) . build () produces: fun printTotal (): String = \"Your total is $amount\" You can also use CodeBlock s as arguments to %P , which is handy when you need to reference importable types or members inside the string template: val file = FileSpec . builder ( \"com.example\" , \"Digits\" ) . addFunction ( FunSpec . builder ( \"print\" ) . addParameter ( \"digits\" , IntArray :: class ) . addStatement ( \"println(%P)\" , buildCodeBlock { val contentToString = MemberName ( \"kotlin.collections\" , \"contentToString\" ) add ( \"These are the digits: \\${digits.%M()}\" , contentToString ) }) . build ()) . build () println ( file ) The snippet above will produce the following output, handling the imports properly: package com.example import kotlin.IntArray import kotlin.collections.contentToString fun print ( digits : IntArray ) { println ( \"\"\"These are the digits: ${digits.contentToString()}\"\"\" ) } %T for Types \u00b6 KotlinPoet has rich built-in support for types, including automatic generation of import statements. Just use %T to reference types : val today = FunSpec . builder ( \"today\" ) . returns ( Date :: class ) . addStatement ( \"return %T()\" , Date :: class ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addFunction ( today ) . build () val kotlinFile = FileSpec . builder ( \"com.example.helloworld\" , \"HelloWorld\" ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) That generates the following .kt file, complete with the necessary import : package com.example.helloworld import java.util.Date class HelloWorld { fun today (): Date = Date () } We passed Date::class to reference a class that just-so-happens to be available when we\u2019re generating code. This doesn\u2019t need to be the case. Here\u2019s a similar example, but this one references a class that doesn\u2019t exist (yet): val hoverboard = ClassName ( \"com.mattel\" , \"Hoverboard\" ) val tomorrow = FunSpec . builder ( \"tomorrow\" ) . returns ( hoverboard ) . addStatement ( \"return %T()\" , hoverboard ) . build () And that not-yet-existent class is imported as well: package com.example.helloworld import com.mattel.Hoverboard class HelloWorld { fun tomorrow (): Hoverboard = Hoverboard () } The ClassName type is very important, and you\u2019ll need it frequently when you\u2019re using KotlinPoet. It can identify any declared class. Declared types are just the beginning of Kotlin\u2019s rich type system: we also have arrays, parameterized types, wildcard types, lambda types and type variables. KotlinPoet has classes for building each of these: import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy val hoverboard = ClassName ( \"com.mattel\" , \"Hoverboard\" ) val list = ClassName ( \"kotlin.collections\" , \"List\" ) val arrayList = ClassName ( \"kotlin.collections\" , \"ArrayList\" ) val listOfHoverboards = list . parameterizedBy ( hoverboard ) val arrayListOfHoverboards = arrayList . parameterizedBy ( hoverboard ) val thing = ClassName ( \"com.misc\" , \"Thing\" ) val array = ClassName ( \"kotlin\" , \"Array\" ) val producerArrayOfThings = array . parameterizedBy ( WildcardTypeName . producerOf ( thing )) val beyond = FunSpec . builder ( \"beyond\" ) . returns ( listOfHoverboards ) . addStatement ( \"val result = %T()\" , arrayListOfHoverboards ) . addStatement ( \"result += %T()\" , hoverboard ) . addStatement ( \"result += %T()\" , hoverboard ) . addStatement ( \"result += %T()\" , hoverboard ) . addStatement ( \"return result\" ) . build () val printThings = FunSpec . builder ( \"printThings\" ) . addParameter ( \"things\" , producerArrayOfThings ) . addStatement ( \"println(things)\" ) . build () KotlinPoet will decompose each type and import its components where possible. package com.example.helloworld import com.mattel.Hoverboard import com.misc.Thing import kotlin.Array import kotlin.collections.ArrayList import kotlin.collections.List class HelloWorld { fun beyond (): List < Hoverboard > { val result = ArrayList < Hoverboard >() result += Hoverboard () result += Hoverboard () result += Hoverboard () return result } fun printThings ( things : Array < out Thing >) { println ( things ) } } Nullable Types \u00b6 KotlinPoet supports nullable types. To convert a TypeName into its nullable counterpart, use the copy() method with nullable parameter set to true : val java = PropertySpec . builder ( \"java\" , String :: class . asTypeName (). copy ( nullable = true )) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( \"null\" ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addProperty ( java ) . addProperty ( \"kotlin\" , String :: class , KModifier . PRIVATE ) . build () generates: class HelloWorld { private var java : String ? = null private val kotlin : String } %M for Members \u00b6 Similar to types, KotlinPoet has a special placeholder for members (functions and properties), which comes handy when your code needs to access top-level members and members declared inside objects. Use %M to reference members, pass an instance of MemberName as the argument for the placeholder, and KotlinPoet will handle imports automatically: val createTaco = MemberName ( \"com.squareup.tacos\" , \"createTaco\" ) val isVegan = MemberName ( \"com.squareup.tacos\" , \"isVegan\" ) val file = FileSpec . builder ( \"com.squareup.example\" , \"TacoTest\" ) . addFunction ( FunSpec . builder ( \"main\" ) . addStatement ( \"val taco = %M()\" , createTaco ) . addStatement ( \"println(taco.%M)\" , isVegan ) . build ()) . build () println ( file ) The code above generates the following file: package com.squareup.example import com.squareup.tacos.createTaco import com.squareup.tacos.isVegan fun main () { val taco = createTaco () println ( taco . isVegan ) } As you can see, it\u2019s also possible to use %M to reference extension functions and properties. You just need to make sure the member can be imported without simple name collisions, otherwise importing will fail and the code generator output will not pass compilation. There\u2019s a way to work around such cases though - use FileSpec.addAliasedImport() to create an alias for a clashing MemberName : val createTaco = MemberName ( \"com.squareup.tacos\" , \"createTaco\" ) val createCake = MemberName ( \"com.squareup.cakes\" , \"createCake\" ) val isTacoVegan = MemberName ( \"com.squareup.tacos\" , \"isVegan\" ) val isCakeVegan = MemberName ( \"com.squareup.cakes\" , \"isVegan\" ) val file = FileSpec . builder ( \"com.squareup.example\" , \"Test\" ) . addAliasedImport ( isTacoVegan , \"isTacoVegan\" ) . addAliasedImport ( isCakeVegan , \"isCakeVegan\" ) . addFunction ( FunSpec . builder ( \"main\" ) . addStatement ( \"val taco = %M()\" , createTaco ) . addStatement ( \"val cake = %M()\" , createCake ) . addStatement ( \"println(taco.%M)\" , isTacoVegan ) . addStatement ( \"println(cake.%M)\" , isCakeVegan ) . build ()) . build () println ( file ) KotlinPoet will produce an aliased import for com.squareup.tacos2.isVegan : package com.squareup.example import com.squareup.cakes.createCake import com.squareup.tacos.createTaco import com.squareup.cakes.isVegan as isCakeVegan import com.squareup.tacos.isVegan as isTacoVegan fun main () { val taco = createTaco () val cake = createCake () println ( taco . isTacoVegan ) println ( cake . isCakeVegan ) } MemberName and operators \u00b6 MemberName also supports operators, you can use MemberName(String, KOperator) or MemberName(ClassName, KOperator) to import and reference operators. val taco = ClassName ( \"com.squareup.tacos\" , \"Taco\" ) val meat = ClassName ( \"com.squareup.tacos.ingredient\" , \"Meat\" ) val iterator = MemberName ( \"com.squareup.tacos.internal\" , KOperator . ITERATOR ) val minusAssign = MemberName ( \"com.squareup.tacos.internal\" , KOperator . MINUS_ASSIGN ) val file = FileSpec . builder ( \"com.example\" , \"Test\" ) . addFunction ( FunSpec . builder ( \"makeTacoHealthy\" ) . addParameter ( \"taco\" , taco ) . beginControlFlow ( \"for (ingredient %M taco)\" , iterator ) . addStatement ( \"if (ingredient is %T) taco %M ingredient\" , meat , minusAssign ) . endControlFlow () . addStatement ( \"return taco\" ) . build ()) . build () println ( file ) KotlinPoet will import the extension operator functions and emit the operator. package com.example import com.squareup.tacos.Taco import com.squareup.tacos.ingredient.Meat import com.squareup.tacos.internal.iterator import com.squareup.tacos.internal.minusAssign fun makeTacoHealthy ( taco : Taco ) { for ( ingredient in taco ) { if ( ingredient is Meat ) taco -= ingredient } return taco } %N for Names \u00b6 Generated code is often self-referential. Use %N to refer to another generated declaration by its name. Here\u2019s a method that calls another: fun byteToHex ( b : Int ): String { val result = CharArray ( 2 ) result [ 0 ] = hexDigit (( b ushr 4 ) and 0 xf ) result [ 1 ] = hexDigit ( b and 0 xf ) return String ( result ) } fun hexDigit ( i : Int ): Char { return ( if ( i < 10 ) i + '0' . toInt () else i - 10 + 'a' . toInt ()). toChar () } When generating the code above, we pass the hexDigit() method as an argument to the byteToHex() method using %N : val hexDigit = FunSpec . builder ( \"hexDigit\" ) . addParameter ( \"i\" , Int :: class ) . returns ( Char :: class ) . addStatement ( \"return (if (i < 10) i + '0'.toInt() else i - 10 + 'a'.toInt()).toChar()\" ) . build () val byteToHex = FunSpec . builder ( \"byteToHex\" ) . addParameter ( \"b\" , Int :: class ) . returns ( String :: class ) . addStatement ( \"val result = CharArray(2)\" ) . addStatement ( \"result[0] = %N((b ushr 4) and 0xf)\" , hexDigit ) . addStatement ( \"result[1] = %N(b and 0xf)\" , hexDigit ) . addStatement ( \"return String(result)\" ) . build () Another handy feature that %N provides is automatically escaping names that contain illegal identifier characters with double ticks. Suppose your code creates a MemberName with a Kotlin keyword as the simple name: val taco = ClassName ( \"com.squareup.tacos\" , \"Taco\" ) val packager = ClassName ( \"com.squareup.tacos\" , \"TacoPackager\" ) val file = FileSpec . builder ( \"com.example\" , \"Test\" ) . addFunction ( FunSpec . builder ( \"packageTacos\" ) . addParameter ( \"tacos\" , LIST . parameterizedBy ( taco )) . addParameter ( \"packager\" , packager ) . addStatement ( \"packager.%N(tacos)\" , packager . member ( \"package\" )) . build ()) . build () %N will escape the name for you, ensuring that the output will pass compilation: package com.example import com.squareup.tacos.Taco import com.squareup.tacos.TacoPackager import kotlin.collections.List fun packageTacos ( tacos : List < Taco >, packager : TacoPackager ) { packager . `package` ( tacos ) } %L for Literals \u00b6 Although Kotlin\u2019s string templates usually work well in cases when you want to include literals into generated code, KotlinPoet offers additional syntax inspired-by but incompatible-with String.format() . It accepts %L to emit a literal value in the output. This works just like Formatter \u2018s %s : private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( \"var result = 0\" ) . beginControlFlow ( \"for (i in %L until %L)\" , from , to ) . addStatement ( \"result = result %L i\" , op ) . endControlFlow () . addStatement ( \"return result\" ) . build () } Literals are emitted directly to the output code with no escaping. Arguments for literals may be strings, primitives, and a few KotlinPoet types described below. Code block format strings \u00b6 Code blocks may specify the values for their placeholders in a few ways. Only one style may be used for each operation on a code block. Relative Arguments \u00b6 Pass an argument value for each placeholder in the format string to CodeBlock.add() . In each example, we generate code to say \u201cI ate 3 tacos\u201d CodeBlock . builder (). add ( \"I ate %L %L\" , 3 , \"tacos\" ) Positional Arguments \u00b6 Place an integer index (1-based) before the placeholder in the format string to specify which argument to use. CodeBlock . builder (). add ( \"I ate %2L %1L\" , \"tacos\" , 3 ) Named Arguments \u00b6 Use the syntax %argumentName:X where X is the format character and call CodeBlock.addNamed() with a map containing all argument keys in the format string. Argument names use characters in a-z , A-Z , 0-9 , and _ , and must start with a lowercase character. val map = LinkedHashMap < String , Any >() map += \"food\" to \"tacos\" map += \"count\" to 3 CodeBlock . builder (). addNamed ( \"I ate %count:L %food:L\" , map ) Functions \u00b6 All of the above functions have a code body. Use KModifier.ABSTRACT to get a function without any body. This is only legal if it is enclosed by an abstract class or an interface. val flux = FunSpec . builder ( \"flux\" ) . addModifiers ( KModifier . ABSTRACT , KModifier . PROTECTED ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addModifiers ( KModifier . ABSTRACT ) . addFunction ( flux ) . build () Which generates this: abstract class HelloWorld { protected abstract fun flux () } The other modifiers work where permitted. Methods also have parameters, varargs, KDoc, annotations, type variables, return type and receiver type for extension functions. All of these are configured with FunSpec.Builder . Extension functions \u00b6 Extension functions can be generated by specifying a receiver . val square = FunSpec . builder ( \"square\" ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( \"var s = this * this\" ) . addStatement ( \"return s\" ) . build () Which outputs: fun Int . square (): Int { val s = this * this return s } Single-expression functions \u00b6 KotlinPoet can recognize single-expression functions and print them out properly. It treats each function with a body that starts with return as a single-expression function: val abs = FunSpec . builder ( \"abs\" ) . addParameter ( \"x\" , Int :: class ) . returns ( Int :: class ) . addStatement ( \"return if (x < 0) -x else x\" ) . build () Which outputs: fun abs ( x : Int ): Int = if ( x < 0 ) - x else x Default function arguments \u00b6 Consider the example below. Function argument b has a default value of 0 to avoid overloading this function. fun add ( a : Int , b : Int = 0 ) { print ( \"a + b = ${ a + b }\" ) } Use the defaultValue() builder function to declare default value for a function argument. FunSpec . builder ( \"add\" ) . addParameter ( \"a\" , Int :: class ) . addParameter ( ParameterSpec . builder ( \"b\" , Int :: class ) . defaultValue ( \"%L\" , 0 ) . build ()) . addStatement ( \"print(\\\"a + b = ${ a + b }\\\")\" ) . build () Spaces wrap by default! \u00b6 In order to provide meaningful formatting, KotlinPoet would replace spaces, found in blocks of code, with new line symbols, in cases when the line of code exceeds the length limit. Let\u2019s take this function for example: val funSpec = FunSpec . builder ( \"foo\" ) . addStatement ( \"return (100..10000).map { number -> number * number }.map { number -> number.toString() }.also { string -> println(string) }\" ) . build () Depending on where it\u2019s found in the file, it may end up being printed out like this: fun foo () = ( 100. . 10000 ). map { number -> number * number }. map { number -> number . toString () }. also { string -> println ( string ) } Unfortunately this code is broken: the compiler expects also and { to be on the same line. KotlinPoet is unable to understand the context of the expression and fix the formatting for you, but there\u2019s a trick you can use to declare a non-breaking space - use the \u00b7 symbol where you would otherwise use a space. Let\u2019s apply this to our example: val funSpec = FunSpec . builder ( \"foo\" ) . addStatement ( \"return (100..10000).map\u00b7{ number -> number * number }.map\u00b7{ number -> number.toString() }.also\u00b7{ string -> println(string) }\" ) . build () This will now produce the following result: fun foo () = ( 100. . 10000 ). map { number -> number * number }. map { number -> number . toString () }. also { string -> println ( string ) } The code is now correct and will compile properly. It still doesn\u2019t look perfect - you can play with replacing other spaces in the code block with \u00b7 symbols to achieve better formatting. Constructors \u00b6 FunSpec is a slight misnomer; it can also be used for constructors: val flux = FunSpec . constructorBuilder () . addParameter ( \"greeting\" , String :: class ) . addStatement ( \"this.%N = %N\" , \"greeting\" , \"greeting\" ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addProperty ( \"greeting\" , String :: class , KModifier . PRIVATE ) . addFunction ( flux ) . build () Which generates this: class HelloWorld { private val greeting : String constructor ( greeting : String ) { this . greeting = greeting } } For the most part, constructors work just like methods. When emitting code, KotlinPoet will place constructors before methods in the output file. Often times you\u2019ll need to generate the primary constructor for a class: val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . primaryConstructor ( flux ) . addProperty ( \"greeting\" , String :: class , KModifier . PRIVATE ) . build () This code, however, generates the following: class HelloWorld ( greeting : String ) { private val greeting : String init { this . greeting = greeting } } By default, KotlinPoet won\u2019t merge primary constructor parameters and properties, even if they share the same name. To achieve the effect, you have to tell KotlinPoet that the property is initialized via the constructor parameter: val flux = FunSpec . constructorBuilder () . addParameter ( \"greeting\" , String :: class ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . primaryConstructor ( flux ) . addProperty ( PropertySpec . builder ( \"greeting\" , String :: class ) . initializer ( \"greeting\" ) . addModifiers ( KModifier . PRIVATE ) . build ()) . build () Now we\u2019re getting the following output: class HelloWorld ( private val greeting : String ) Notice that KotlinPoet omits {} for classes with empty bodies. Parameters \u00b6 Declare parameters on methods and constructors with either ParameterSpec.builder() or FunSpec \u2018s convenient addParameter() API: val android = ParameterSpec . builder ( \"android\" , String :: class ) . defaultValue ( \"\\\"pie\\\"\" ) . build () val welcomeOverlords = FunSpec . builder ( \"welcomeOverlords\" ) . addParameter ( android ) . addParameter ( \"robot\" , String :: class ) . build () The code above generates: fun welcomeOverlords ( android : String = \"pie\" , robot : String ) { } The extended Builder form is necessary when the parameter has annotations (such as @Inject ). Properties \u00b6 Like parameters, properties can be created either with builders or by using convenient helper methods: val android = PropertySpec . builder ( \"android\" , String :: class ) . addModifiers ( KModifier . PRIVATE ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addProperty ( android ) . addProperty ( \"robot\" , String :: class , KModifier . PRIVATE ) . build () Which generates: class HelloWorld { private val android : String private val robot : String } The extended Builder form is necessary when a field has KDoc, annotations, or a field initializer. Field initializers use the same String.format() -like syntax as the code blocks above: val android = PropertySpec . builder ( \"android\" , String :: class ) . addModifiers ( KModifier . PRIVATE ) . initializer ( \"%S + %L\" , \"Oreo v.\" , 8.1 ) . build () Which generates: private val android : String = \"Oreo v.\" + 8.1 By default PropertySpec.Builder produces val properties. Use mutable() if you need a var : val android = PropertySpec . builder ( \"android\" , String :: class ) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( \"%S + %L\" , \"Oreo v.\" , 8.1 ) . build () Inline properties \u00b6 The way KotlinPoet models inline properties deserves special mention. The following snippet of code: val android = PropertySpec . builder ( \"android\" , String :: class ) . addModifiers ( KModifier . INLINE ) . build () will produce an error: java.lang.IllegalArgumentException: KotlinPoet doesn't allow setting the inline modifier on properties. You should mark either the getter, the setter, or both inline. Indeed, a property marked with inline should have at least one accessor which will be inlined by the compiler. Let\u2019s add a getter to this property: val android = PropertySpec . builder ( \"android\" , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( \"return %S\" , \"foo\" ) . build ()) . build () The result is the following: val android : kotlin . String inline get () = \"foo\" Now, what if we wanted to add a non-inline setter to the property above? We can do so without modifying any of the code we wrote previously: val android = PropertySpec . builder ( \"android\" , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( \"return %S\" , \"foo\" ) . build ()) . setter ( FunSpec . setterBuilder () . addParameter ( \"value\" , String :: class ) . build ()) . build () We get the expected result: val android : kotlin . String inline get () = \"foo\" set ( value ) { } Finally, if we go back and add KModifier.INLINE to the setter, KotlinPoet can wrap it nicely and produce the following result: inline val android : kotlin . String get () = \"foo\" set ( value ) { } Removing the modifier from either the getter or the setter will unwrap the expression back. If, on the other hand, KotlinPoet had allowed marking a property inline directly, the programmer would have had to manually add/remove the modifier whenever the state of the accessors changes in order to get correct and compilable output. We\u2019re solving this problem by making accessors the source of truth for the inline modifier. Interfaces \u00b6 KotlinPoet has no trouble with interfaces. Note that interface methods must always be ABSTRACT . The modifier is necessary when defining the interface: val helloWorld = TypeSpec . interfaceBuilder ( \"HelloWorld\" ) . addProperty ( \"buzz\" , String :: class ) . addFunction ( FunSpec . builder ( \"beep\" ) . addModifiers ( KModifier . ABSTRACT ) . build ()) . build () But these modifiers are omitted when the code is generated. These are the default so we don\u2019t need to include them for kotlinc \u2018s benefit! interface HelloWorld { val buzz : String fun beep () } Kotlin 1.4 adds support for functional interfaces via fun interface syntax. To create this in KotlinPoet, use TypeSpec.funInterfaceBuilder() . val helloWorld = TypeSpec . funInterfaceBuilder ( \"HelloWorld\" ) . addFunction ( FunSpec . builder ( \"beep\" ) . addModifiers ( KModifier . ABSTRACT ) . build ()) . build () // Generates... fun interface HelloWorld { fun beep () } Objects \u00b6 KotlinPoet supports objects: val helloWorld = TypeSpec . objectBuilder ( \"HelloWorld\" ) . addProperty ( PropertySpec . builder ( \"buzz\" , String :: class ) . initializer ( \"%S\" , \"buzz\" ) . build ()) . addFunction ( FunSpec . builder ( \"beep\" ) . addStatement ( \"println(%S)\" , \"Beep!\" ) . build ()) . build () Similarly, you can create companion objects and add them to classes using addType() : val companion = TypeSpec . companionObjectBuilder () . addProperty ( PropertySpec . builder ( \"buzz\" , String :: class ) . initializer ( \"%S\" , \"buzz\" ) . build ()) . addFunction ( FunSpec . builder ( \"beep\" ) . addStatement ( \"println(%S)\" , \"Beep!\" ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addType ( companion ) . build () You can provide an optional name for a companion object. Enums \u00b6 Use enumBuilder to create the enum type, and addEnumConstant() for each value: val helloWorld = TypeSpec . enumBuilder ( \"Roshambo\" ) . addEnumConstant ( \"ROCK\" ) . addEnumConstant ( \"SCISSORS\" ) . addEnumConstant ( \"PAPER\" ) . build () To generate this: enum class Roshambo { ROCK , SCISSORS , PAPER } Fancy enums are supported, where the enum values override methods or call a superclass constructor. Here\u2019s a comprehensive example: val helloWorld = TypeSpec . enumBuilder ( \"Roshambo\" ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( \"handsign\" , String :: class ) . build ()) . addEnumConstant ( \"ROCK\" , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( \"%S\" , \"fist\" ) . addFunction ( FunSpec . builder ( \"toString\" ) . addModifiers ( KModifier . OVERRIDE ) . addStatement ( \"return %S\" , \"avalanche!\" ) . returns ( String :: class ) . build ()) . build ()) . addEnumConstant ( \"SCISSORS\" , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( \"%S\" , \"peace\" ) . build ()) . addEnumConstant ( \"PAPER\" , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( \"%S\" , \"flat\" ) . build ()) . addProperty ( PropertySpec . builder ( \"handsign\" , String :: class , KModifier . PRIVATE ) . initializer ( \"handsign\" ) . build ()) . build () Which generates this: enum class Roshambo ( private val handsign : String ) { ROCK ( \"fist\" ) { override fun toString (): String = \"avalanche!\" }, SCISSORS ( \"peace\" ), PAPER ( \"flat\" ); } Anonymous Inner Classes \u00b6 In the enum code, we used TypeSpec.anonymousClassBuilder() . Anonymous inner classes can also be used in code blocks. They are values that can be referenced with %L : val comparator = TypeSpec . anonymousClassBuilder () . addSuperinterface ( Comparator :: class . parameterizedBy ( String :: class )) . addFunction ( FunSpec . builder ( \"compare\" ) . addModifiers ( KModifier . OVERRIDE ) . addParameter ( \"a\" , String :: class ) . addParameter ( \"b\" , String :: class ) . returns ( Int :: class ) . addStatement ( \"return %N.length - %N.length\" , \"a\" , \"b\" ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addFunction ( FunSpec . builder ( \"sortByLength\" ) . addParameter ( \"strings\" , List :: class . parameterizedBy ( String :: class )) . addStatement ( \"%N.sortedWith(%L)\" , \"strings\" , comparator ) . build ()) . build () This generates a method that contains a class that contains a method: class HelloWorld { fun sortByLength ( strings : List < String >) { strings . sortedWith ( object : Comparator < String > { override fun compare ( a : String , b : String ): Int = a . length - b . length }) } } One particularly tricky part of defining anonymous inner classes is the arguments to the superclass constructor. To pass them use TypeSpec.Builder \u2018s addSuperclassConstructorParameter() method. Annotations \u00b6 Simple annotations are easy: val test = FunSpec . builder ( \"test string equality\" ) . addAnnotation ( Test :: class ) . addStatement ( \"assertThat(%1S).isEqualTo(%1S)\" , \"foo\" ) . build () Which generates this function with an @Test annotation: @Test fun `test string equality` () { assertThat ( \"foo\" ). isEqualTo ( \"foo\" ) } Use AnnotationSpec.builder() to set properties on annotations: val logRecord = FunSpec . builder ( \"recordEvent\" ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( Headers :: class ) . addMember ( \"accept = %S\" , \"application/json; charset=utf-8\" ) . addMember ( \"userAgent = %S\" , \"Square Cash\" ) . build ()) . addParameter ( \"logRecord\" , LogRecord :: class ) . returns ( LogReceipt :: class ) . build () Which generates this annotation with accept and userAgent properties: @Headers ( accept = \"application/json; charset=utf-8\" , userAgent = \"Square Cash\" ) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt When you get fancy, annotation values can be annotations themselves. Use %L for embedded annotations: val headerList = ClassName ( \"\" , \"HeaderList\" ) val header = ClassName ( \"\" , \"Header\" ) val logRecord = FunSpec . builder ( \"recordEvent\" ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( headerList ) . addMember ( \"[\\n\u21e5%L,\\n%L\u21e4\\n]\" , AnnotationSpec . builder ( header ) . addMember ( \"name = %S\" , \"Accept\" ) . addMember ( \"value = %S\" , \"application/json; charset=utf-8\" ) . build (), AnnotationSpec . builder ( header ) . addMember ( \"name = %S\" , \"User-Agent\" ) . addMember ( \"value = %S\" , \"Square Cash\" ) . build ()) . build ()) . addParameter ( \"logRecord\" , logRecordName ) . returns ( logReceipt ) . build () Which generates this: @HeaderList ([ Header ( name = \"Accept\" , value = \"application/json; charset=utf-8\" ), Header ( name = \"User-Agent\" , value = \"Square Cash\" ) ]) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt KotlinPoet supports use-site targets for annotations: val utils = FileSpec . builder ( \"com.example\" , \"Utils\" ) . addAnnotation ( AnnotationSpec . builder ( JvmName :: class ) . useSiteTarget ( UseSiteTarget . FILE ) . build ()) . addFunction ( FunSpec . builder ( \"abs\" ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( \"return if (this < 0) -this else this\" ) . build ()) . build () Will output this: @file : JvmName package com.example import kotlin.Int import kotlin.jvm.JvmName fun Int . abs (): Int = if ( this < 0 ) - this else this Type Aliases \u00b6 KotlinPoet provides API for creating Type Aliases, which supports simple class names, parameterized types and lambdas: val fileTable = Map :: class . asClassName () . parameterizedBy ( TypeVariableName ( \"K\" ), Set :: class . parameterizedBy ( File :: class )) val predicate = LambdaTypeName . get ( parameters = * arrayOf ( TypeVariableName ( \"T\" )), returnType = Boolean :: class . asClassName ()) val helloWorld = FileSpec . builder ( \"com.example\" , \"HelloWorld\" ) . addTypeAlias ( TypeAliasSpec . builder ( \"Word\" , String :: class ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( \"FileTable<K>\" , fileTable ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( \"Predicate<T>\" , predicate ). build ()) . build () Which generates the following: package com.example import java.io.File import kotlin.Boolean import kotlin.String import kotlin.collections.Map import kotlin.collections.Set typealias Word = String typealias FileTable < K > = Map < K , Set < File >> typealias Predicate < T > = ( T ) -> Boolean Callable References \u00b6 Callable references to constructors, functions, and properties may be emitted via: ClassName.constructorReference() for constructors MemberName.reference() for functions and properties For example, val helloClass = ClassName ( \"com.example.hello\" , \"Hello\" ) val worldFunction : MemberName = helloClass . member ( \"world\" ) val byeProperty : MemberName = helloClass . nestedClass ( \"World\" ). member ( \"bye\" ) val factoriesFun = FunSpec . builder ( \"factories\" ) . addStatement ( \"val hello = %L\" , helloClass . constructorReference ()) . addStatement ( \"val world = %L\" , worldFunction . reference ()) . addStatement ( \"val bye = %L\" , byeProperty . reference ()) . build () FileSpec . builder ( \"com.example\" , \"HelloWorld\" ) . addFunction ( factoriesFun ) . build () would generate: package com.example import com.example.hello.Hello fun factories () { val hello = :: Hello val world = Hello :: world val bye = Hello . World :: bye } Top-level classes and members with conflicting names may require aliased imports, as with member names . Download \u00b6 Download the latest .jar or depend via Maven: <dependency> <groupId> com.squareup </groupId> <artifactId> kotlinpoet </artifactId> <version> 1.6.0 </version> </dependency> or Gradle: implementation ( \"com.squareup:kotlinpoet:1.6.0\" ) Snapshots of the development version are available in Sonatype\u2019s snapshots repository . License \u00b6 Copyright 2017 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"KotlinPoet"},{"location":"#kotlinpoet","text":"KotlinPoet is a Kotlin and Java API for generating .kt source files. Source file generation can be useful when doing things such as annotation processing or interacting with metadata files (e.g., database schemas, protocol formats). By generating code, you eliminate the need to write boilerplate while also keeping a single source of truth for the metadata.","title":"KotlinPoet"},{"location":"#example","text":"Here\u2019s a HelloWorld file: class Greeter ( val name : String ) { fun greet () { println ( \"\"\"Hello, $name\"\"\" ) } } fun main ( vararg args : String ) { Greeter ( args [ 0 ]). greet () } And this is the code to generate it with KotlinPoet: val greeterClass = ClassName ( \"\" , \"Greeter\" ) val file = FileSpec . builder ( \"\" , \"HelloWorld\" ) . addType ( TypeSpec . classBuilder ( \"Greeter\" ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( \"name\" , String :: class ) . build ()) . addProperty ( PropertySpec . builder ( \"name\" , String :: class ) . initializer ( \"name\" ) . build ()) . addFunction ( FunSpec . builder ( \"greet\" ) . addStatement ( \"println(%P)\" , \"Hello, \\$name\" ) . build ()) . build ()) . addFunction ( FunSpec . builder ( \"main\" ) . addParameter ( \"args\" , String :: class , VARARG ) . addStatement ( \"%T(args[0]).greet()\" , greeterClass ) . build ()) . build () file . writeTo ( System . out ) The KDoc catalogs the complete KotlinPoet API, which is inspired by JavaPoet .","title":"Example"},{"location":"#code-control-flow","text":"Most of KotlinPoet\u2019s API uses immutable Kotlin objects. There\u2019s also builders, method chaining and varargs to make the API friendly. KotlinPoet offers models for Kotlin files ( FileSpec ), classes, interfaces & objects ( TypeSpec ), type aliases ( TypeAliasSpec ), properties ( PropertySpec ), functions & constructors ( FunSpec ), parameters ( ParameterSpec ) and annotations ( AnnotationSpec ). But the body of methods and constructors is not modeled. There\u2019s no expression class, no statement class or syntax tree nodes. Instead, KotlinPoet uses strings for code blocks, and you can take advantage of Kotlin\u2019s multiline strings to make this look nice: val main = FunSpec . builder ( \"main\" ) . addCode ( \"\"\" |var total = 0 |for (i in 0 until 10) { | total += i |} |\"\"\" . trimMargin ()) . build () Which generates this: fun main () { var total = 0 for ( i in 0 until 10 ) { total += i } } There are additional APIs to assist with newlines, braces and indentation: val main = FunSpec . builder ( \"main\" ) . addStatement ( \"var total = 0\" ) . beginControlFlow ( \"for (i in 0 until 10)\" ) . addStatement ( \"total += i\" ) . endControlFlow () . build () This example is lame because the generated code is constant! Suppose instead of just adding 0 to 10, we want to make the operation and range configurable. Here\u2019s a method that generates a method: private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( \"var result = 1\" ) . beginControlFlow ( \"for (i in $from until $to)\" ) . addStatement ( \"result = result $op i\" ) . endControlFlow () . addStatement ( \"return result\" ) . build () } And here\u2019s what we get when we call computeRange(\"multiply10to20\", 10, 20, \"*\") : fun multiply10to20 (): kotlin . Int { var result = 1 for ( i in 10 until 20 ) { result = result * i } return result } Methods generating methods! And since KotlinPoet generates source instead of bytecode, you can read through it to make sure it\u2019s right.","title":"Code &amp; Control Flow"},{"location":"#s-for-strings","text":"When emitting code that includes string literals, we can use %S to emit a string , complete with wrapping quotation marks and escaping. Here\u2019s a program that emits 3 methods, each of which returns its own name: fun main ( args : Array < String >) { val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addFunction ( whatsMyNameYo ( \"slimShady\" )) . addFunction ( whatsMyNameYo ( \"eminem\" )) . addFunction ( whatsMyNameYo ( \"marshallMathers\" )) . build () val kotlinFile = FileSpec . builder ( \"com.example.helloworld\" , \"HelloWorld\" ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) } private fun whatsMyNameYo ( name : String ): FunSpec { return FunSpec . builder ( name ) . returns ( String :: class ) . addStatement ( \"return %S\" , name ) . build () } In this case, using %S gives us quotation marks: class HelloWorld { fun slimShady (): String = \"slimShady\" fun eminem (): String = \"eminem\" fun marshallMathers (): String = \"marshallMathers\" }","title":"%S for Strings"},{"location":"#p-for-string-templates","text":"%S also handles the escaping of dollar signs ( $ ), to avoid inadvertent creation of string templates, which may fail to compile in generated code: val stringWithADollar = \"Your total is \" + \"$\" + \"50\" val funSpec = FunSpec . builder ( \"printTotal\" ) . returns ( String :: class ) . addStatement ( \"return %S\" , stringWithADollar ) . build () produces: fun printTotal (): String = \"Your total is ${'$'}50\" If you need to generate string templates, use %P , which doesn\u2019t escape dollars: val amount = 50 val stringWithADollar = \"Your total is \" + \"$\" + \"amount\" val funSpec = FunSpec . builder ( \"printTotal\" ) . returns ( String :: class ) . addStatement ( \"return %P\" , stringWithADollar ) . build () produces: fun printTotal (): String = \"Your total is $amount\" You can also use CodeBlock s as arguments to %P , which is handy when you need to reference importable types or members inside the string template: val file = FileSpec . builder ( \"com.example\" , \"Digits\" ) . addFunction ( FunSpec . builder ( \"print\" ) . addParameter ( \"digits\" , IntArray :: class ) . addStatement ( \"println(%P)\" , buildCodeBlock { val contentToString = MemberName ( \"kotlin.collections\" , \"contentToString\" ) add ( \"These are the digits: \\${digits.%M()}\" , contentToString ) }) . build ()) . build () println ( file ) The snippet above will produce the following output, handling the imports properly: package com.example import kotlin.IntArray import kotlin.collections.contentToString fun print ( digits : IntArray ) { println ( \"\"\"These are the digits: ${digits.contentToString()}\"\"\" ) }","title":"%P for String Templates"},{"location":"#t-for-types","text":"KotlinPoet has rich built-in support for types, including automatic generation of import statements. Just use %T to reference types : val today = FunSpec . builder ( \"today\" ) . returns ( Date :: class ) . addStatement ( \"return %T()\" , Date :: class ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addFunction ( today ) . build () val kotlinFile = FileSpec . builder ( \"com.example.helloworld\" , \"HelloWorld\" ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) That generates the following .kt file, complete with the necessary import : package com.example.helloworld import java.util.Date class HelloWorld { fun today (): Date = Date () } We passed Date::class to reference a class that just-so-happens to be available when we\u2019re generating code. This doesn\u2019t need to be the case. Here\u2019s a similar example, but this one references a class that doesn\u2019t exist (yet): val hoverboard = ClassName ( \"com.mattel\" , \"Hoverboard\" ) val tomorrow = FunSpec . builder ( \"tomorrow\" ) . returns ( hoverboard ) . addStatement ( \"return %T()\" , hoverboard ) . build () And that not-yet-existent class is imported as well: package com.example.helloworld import com.mattel.Hoverboard class HelloWorld { fun tomorrow (): Hoverboard = Hoverboard () } The ClassName type is very important, and you\u2019ll need it frequently when you\u2019re using KotlinPoet. It can identify any declared class. Declared types are just the beginning of Kotlin\u2019s rich type system: we also have arrays, parameterized types, wildcard types, lambda types and type variables. KotlinPoet has classes for building each of these: import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy val hoverboard = ClassName ( \"com.mattel\" , \"Hoverboard\" ) val list = ClassName ( \"kotlin.collections\" , \"List\" ) val arrayList = ClassName ( \"kotlin.collections\" , \"ArrayList\" ) val listOfHoverboards = list . parameterizedBy ( hoverboard ) val arrayListOfHoverboards = arrayList . parameterizedBy ( hoverboard ) val thing = ClassName ( \"com.misc\" , \"Thing\" ) val array = ClassName ( \"kotlin\" , \"Array\" ) val producerArrayOfThings = array . parameterizedBy ( WildcardTypeName . producerOf ( thing )) val beyond = FunSpec . builder ( \"beyond\" ) . returns ( listOfHoverboards ) . addStatement ( \"val result = %T()\" , arrayListOfHoverboards ) . addStatement ( \"result += %T()\" , hoverboard ) . addStatement ( \"result += %T()\" , hoverboard ) . addStatement ( \"result += %T()\" , hoverboard ) . addStatement ( \"return result\" ) . build () val printThings = FunSpec . builder ( \"printThings\" ) . addParameter ( \"things\" , producerArrayOfThings ) . addStatement ( \"println(things)\" ) . build () KotlinPoet will decompose each type and import its components where possible. package com.example.helloworld import com.mattel.Hoverboard import com.misc.Thing import kotlin.Array import kotlin.collections.ArrayList import kotlin.collections.List class HelloWorld { fun beyond (): List < Hoverboard > { val result = ArrayList < Hoverboard >() result += Hoverboard () result += Hoverboard () result += Hoverboard () return result } fun printThings ( things : Array < out Thing >) { println ( things ) } }","title":"%T for Types"},{"location":"#nullable-types","text":"KotlinPoet supports nullable types. To convert a TypeName into its nullable counterpart, use the copy() method with nullable parameter set to true : val java = PropertySpec . builder ( \"java\" , String :: class . asTypeName (). copy ( nullable = true )) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( \"null\" ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addProperty ( java ) . addProperty ( \"kotlin\" , String :: class , KModifier . PRIVATE ) . build () generates: class HelloWorld { private var java : String ? = null private val kotlin : String }","title":"Nullable Types"},{"location":"#m-for-members","text":"Similar to types, KotlinPoet has a special placeholder for members (functions and properties), which comes handy when your code needs to access top-level members and members declared inside objects. Use %M to reference members, pass an instance of MemberName as the argument for the placeholder, and KotlinPoet will handle imports automatically: val createTaco = MemberName ( \"com.squareup.tacos\" , \"createTaco\" ) val isVegan = MemberName ( \"com.squareup.tacos\" , \"isVegan\" ) val file = FileSpec . builder ( \"com.squareup.example\" , \"TacoTest\" ) . addFunction ( FunSpec . builder ( \"main\" ) . addStatement ( \"val taco = %M()\" , createTaco ) . addStatement ( \"println(taco.%M)\" , isVegan ) . build ()) . build () println ( file ) The code above generates the following file: package com.squareup.example import com.squareup.tacos.createTaco import com.squareup.tacos.isVegan fun main () { val taco = createTaco () println ( taco . isVegan ) } As you can see, it\u2019s also possible to use %M to reference extension functions and properties. You just need to make sure the member can be imported without simple name collisions, otherwise importing will fail and the code generator output will not pass compilation. There\u2019s a way to work around such cases though - use FileSpec.addAliasedImport() to create an alias for a clashing MemberName : val createTaco = MemberName ( \"com.squareup.tacos\" , \"createTaco\" ) val createCake = MemberName ( \"com.squareup.cakes\" , \"createCake\" ) val isTacoVegan = MemberName ( \"com.squareup.tacos\" , \"isVegan\" ) val isCakeVegan = MemberName ( \"com.squareup.cakes\" , \"isVegan\" ) val file = FileSpec . builder ( \"com.squareup.example\" , \"Test\" ) . addAliasedImport ( isTacoVegan , \"isTacoVegan\" ) . addAliasedImport ( isCakeVegan , \"isCakeVegan\" ) . addFunction ( FunSpec . builder ( \"main\" ) . addStatement ( \"val taco = %M()\" , createTaco ) . addStatement ( \"val cake = %M()\" , createCake ) . addStatement ( \"println(taco.%M)\" , isTacoVegan ) . addStatement ( \"println(cake.%M)\" , isCakeVegan ) . build ()) . build () println ( file ) KotlinPoet will produce an aliased import for com.squareup.tacos2.isVegan : package com.squareup.example import com.squareup.cakes.createCake import com.squareup.tacos.createTaco import com.squareup.cakes.isVegan as isCakeVegan import com.squareup.tacos.isVegan as isTacoVegan fun main () { val taco = createTaco () val cake = createCake () println ( taco . isTacoVegan ) println ( cake . isCakeVegan ) }","title":"%M for Members"},{"location":"#membername-and-operators","text":"MemberName also supports operators, you can use MemberName(String, KOperator) or MemberName(ClassName, KOperator) to import and reference operators. val taco = ClassName ( \"com.squareup.tacos\" , \"Taco\" ) val meat = ClassName ( \"com.squareup.tacos.ingredient\" , \"Meat\" ) val iterator = MemberName ( \"com.squareup.tacos.internal\" , KOperator . ITERATOR ) val minusAssign = MemberName ( \"com.squareup.tacos.internal\" , KOperator . MINUS_ASSIGN ) val file = FileSpec . builder ( \"com.example\" , \"Test\" ) . addFunction ( FunSpec . builder ( \"makeTacoHealthy\" ) . addParameter ( \"taco\" , taco ) . beginControlFlow ( \"for (ingredient %M taco)\" , iterator ) . addStatement ( \"if (ingredient is %T) taco %M ingredient\" , meat , minusAssign ) . endControlFlow () . addStatement ( \"return taco\" ) . build ()) . build () println ( file ) KotlinPoet will import the extension operator functions and emit the operator. package com.example import com.squareup.tacos.Taco import com.squareup.tacos.ingredient.Meat import com.squareup.tacos.internal.iterator import com.squareup.tacos.internal.minusAssign fun makeTacoHealthy ( taco : Taco ) { for ( ingredient in taco ) { if ( ingredient is Meat ) taco -= ingredient } return taco }","title":"MemberName and operators"},{"location":"#n-for-names","text":"Generated code is often self-referential. Use %N to refer to another generated declaration by its name. Here\u2019s a method that calls another: fun byteToHex ( b : Int ): String { val result = CharArray ( 2 ) result [ 0 ] = hexDigit (( b ushr 4 ) and 0 xf ) result [ 1 ] = hexDigit ( b and 0 xf ) return String ( result ) } fun hexDigit ( i : Int ): Char { return ( if ( i < 10 ) i + '0' . toInt () else i - 10 + 'a' . toInt ()). toChar () } When generating the code above, we pass the hexDigit() method as an argument to the byteToHex() method using %N : val hexDigit = FunSpec . builder ( \"hexDigit\" ) . addParameter ( \"i\" , Int :: class ) . returns ( Char :: class ) . addStatement ( \"return (if (i < 10) i + '0'.toInt() else i - 10 + 'a'.toInt()).toChar()\" ) . build () val byteToHex = FunSpec . builder ( \"byteToHex\" ) . addParameter ( \"b\" , Int :: class ) . returns ( String :: class ) . addStatement ( \"val result = CharArray(2)\" ) . addStatement ( \"result[0] = %N((b ushr 4) and 0xf)\" , hexDigit ) . addStatement ( \"result[1] = %N(b and 0xf)\" , hexDigit ) . addStatement ( \"return String(result)\" ) . build () Another handy feature that %N provides is automatically escaping names that contain illegal identifier characters with double ticks. Suppose your code creates a MemberName with a Kotlin keyword as the simple name: val taco = ClassName ( \"com.squareup.tacos\" , \"Taco\" ) val packager = ClassName ( \"com.squareup.tacos\" , \"TacoPackager\" ) val file = FileSpec . builder ( \"com.example\" , \"Test\" ) . addFunction ( FunSpec . builder ( \"packageTacos\" ) . addParameter ( \"tacos\" , LIST . parameterizedBy ( taco )) . addParameter ( \"packager\" , packager ) . addStatement ( \"packager.%N(tacos)\" , packager . member ( \"package\" )) . build ()) . build () %N will escape the name for you, ensuring that the output will pass compilation: package com.example import com.squareup.tacos.Taco import com.squareup.tacos.TacoPackager import kotlin.collections.List fun packageTacos ( tacos : List < Taco >, packager : TacoPackager ) { packager . `package` ( tacos ) }","title":"%N for Names"},{"location":"#l-for-literals","text":"Although Kotlin\u2019s string templates usually work well in cases when you want to include literals into generated code, KotlinPoet offers additional syntax inspired-by but incompatible-with String.format() . It accepts %L to emit a literal value in the output. This works just like Formatter \u2018s %s : private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( \"var result = 0\" ) . beginControlFlow ( \"for (i in %L until %L)\" , from , to ) . addStatement ( \"result = result %L i\" , op ) . endControlFlow () . addStatement ( \"return result\" ) . build () } Literals are emitted directly to the output code with no escaping. Arguments for literals may be strings, primitives, and a few KotlinPoet types described below.","title":"%L for Literals"},{"location":"#code-block-format-strings","text":"Code blocks may specify the values for their placeholders in a few ways. Only one style may be used for each operation on a code block.","title":"Code block format strings"},{"location":"#relative-arguments","text":"Pass an argument value for each placeholder in the format string to CodeBlock.add() . In each example, we generate code to say \u201cI ate 3 tacos\u201d CodeBlock . builder (). add ( \"I ate %L %L\" , 3 , \"tacos\" )","title":"Relative Arguments"},{"location":"#positional-arguments","text":"Place an integer index (1-based) before the placeholder in the format string to specify which argument to use. CodeBlock . builder (). add ( \"I ate %2L %1L\" , \"tacos\" , 3 )","title":"Positional Arguments"},{"location":"#named-arguments","text":"Use the syntax %argumentName:X where X is the format character and call CodeBlock.addNamed() with a map containing all argument keys in the format string. Argument names use characters in a-z , A-Z , 0-9 , and _ , and must start with a lowercase character. val map = LinkedHashMap < String , Any >() map += \"food\" to \"tacos\" map += \"count\" to 3 CodeBlock . builder (). addNamed ( \"I ate %count:L %food:L\" , map )","title":"Named Arguments"},{"location":"#functions","text":"All of the above functions have a code body. Use KModifier.ABSTRACT to get a function without any body. This is only legal if it is enclosed by an abstract class or an interface. val flux = FunSpec . builder ( \"flux\" ) . addModifiers ( KModifier . ABSTRACT , KModifier . PROTECTED ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addModifiers ( KModifier . ABSTRACT ) . addFunction ( flux ) . build () Which generates this: abstract class HelloWorld { protected abstract fun flux () } The other modifiers work where permitted. Methods also have parameters, varargs, KDoc, annotations, type variables, return type and receiver type for extension functions. All of these are configured with FunSpec.Builder .","title":"Functions"},{"location":"#extension-functions","text":"Extension functions can be generated by specifying a receiver . val square = FunSpec . builder ( \"square\" ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( \"var s = this * this\" ) . addStatement ( \"return s\" ) . build () Which outputs: fun Int . square (): Int { val s = this * this return s }","title":"Extension functions"},{"location":"#single-expression-functions","text":"KotlinPoet can recognize single-expression functions and print them out properly. It treats each function with a body that starts with return as a single-expression function: val abs = FunSpec . builder ( \"abs\" ) . addParameter ( \"x\" , Int :: class ) . returns ( Int :: class ) . addStatement ( \"return if (x < 0) -x else x\" ) . build () Which outputs: fun abs ( x : Int ): Int = if ( x < 0 ) - x else x","title":"Single-expression functions"},{"location":"#default-function-arguments","text":"Consider the example below. Function argument b has a default value of 0 to avoid overloading this function. fun add ( a : Int , b : Int = 0 ) { print ( \"a + b = ${ a + b }\" ) } Use the defaultValue() builder function to declare default value for a function argument. FunSpec . builder ( \"add\" ) . addParameter ( \"a\" , Int :: class ) . addParameter ( ParameterSpec . builder ( \"b\" , Int :: class ) . defaultValue ( \"%L\" , 0 ) . build ()) . addStatement ( \"print(\\\"a + b = ${ a + b }\\\")\" ) . build ()","title":"Default function arguments"},{"location":"#spaces-wrap-by-default","text":"In order to provide meaningful formatting, KotlinPoet would replace spaces, found in blocks of code, with new line symbols, in cases when the line of code exceeds the length limit. Let\u2019s take this function for example: val funSpec = FunSpec . builder ( \"foo\" ) . addStatement ( \"return (100..10000).map { number -> number * number }.map { number -> number.toString() }.also { string -> println(string) }\" ) . build () Depending on where it\u2019s found in the file, it may end up being printed out like this: fun foo () = ( 100. . 10000 ). map { number -> number * number }. map { number -> number . toString () }. also { string -> println ( string ) } Unfortunately this code is broken: the compiler expects also and { to be on the same line. KotlinPoet is unable to understand the context of the expression and fix the formatting for you, but there\u2019s a trick you can use to declare a non-breaking space - use the \u00b7 symbol where you would otherwise use a space. Let\u2019s apply this to our example: val funSpec = FunSpec . builder ( \"foo\" ) . addStatement ( \"return (100..10000).map\u00b7{ number -> number * number }.map\u00b7{ number -> number.toString() }.also\u00b7{ string -> println(string) }\" ) . build () This will now produce the following result: fun foo () = ( 100. . 10000 ). map { number -> number * number }. map { number -> number . toString () }. also { string -> println ( string ) } The code is now correct and will compile properly. It still doesn\u2019t look perfect - you can play with replacing other spaces in the code block with \u00b7 symbols to achieve better formatting.","title":"Spaces wrap by default!"},{"location":"#constructors","text":"FunSpec is a slight misnomer; it can also be used for constructors: val flux = FunSpec . constructorBuilder () . addParameter ( \"greeting\" , String :: class ) . addStatement ( \"this.%N = %N\" , \"greeting\" , \"greeting\" ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addProperty ( \"greeting\" , String :: class , KModifier . PRIVATE ) . addFunction ( flux ) . build () Which generates this: class HelloWorld { private val greeting : String constructor ( greeting : String ) { this . greeting = greeting } } For the most part, constructors work just like methods. When emitting code, KotlinPoet will place constructors before methods in the output file. Often times you\u2019ll need to generate the primary constructor for a class: val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . primaryConstructor ( flux ) . addProperty ( \"greeting\" , String :: class , KModifier . PRIVATE ) . build () This code, however, generates the following: class HelloWorld ( greeting : String ) { private val greeting : String init { this . greeting = greeting } } By default, KotlinPoet won\u2019t merge primary constructor parameters and properties, even if they share the same name. To achieve the effect, you have to tell KotlinPoet that the property is initialized via the constructor parameter: val flux = FunSpec . constructorBuilder () . addParameter ( \"greeting\" , String :: class ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . primaryConstructor ( flux ) . addProperty ( PropertySpec . builder ( \"greeting\" , String :: class ) . initializer ( \"greeting\" ) . addModifiers ( KModifier . PRIVATE ) . build ()) . build () Now we\u2019re getting the following output: class HelloWorld ( private val greeting : String ) Notice that KotlinPoet omits {} for classes with empty bodies.","title":"Constructors"},{"location":"#parameters","text":"Declare parameters on methods and constructors with either ParameterSpec.builder() or FunSpec \u2018s convenient addParameter() API: val android = ParameterSpec . builder ( \"android\" , String :: class ) . defaultValue ( \"\\\"pie\\\"\" ) . build () val welcomeOverlords = FunSpec . builder ( \"welcomeOverlords\" ) . addParameter ( android ) . addParameter ( \"robot\" , String :: class ) . build () The code above generates: fun welcomeOverlords ( android : String = \"pie\" , robot : String ) { } The extended Builder form is necessary when the parameter has annotations (such as @Inject ).","title":"Parameters"},{"location":"#properties","text":"Like parameters, properties can be created either with builders or by using convenient helper methods: val android = PropertySpec . builder ( \"android\" , String :: class ) . addModifiers ( KModifier . PRIVATE ) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addProperty ( android ) . addProperty ( \"robot\" , String :: class , KModifier . PRIVATE ) . build () Which generates: class HelloWorld { private val android : String private val robot : String } The extended Builder form is necessary when a field has KDoc, annotations, or a field initializer. Field initializers use the same String.format() -like syntax as the code blocks above: val android = PropertySpec . builder ( \"android\" , String :: class ) . addModifiers ( KModifier . PRIVATE ) . initializer ( \"%S + %L\" , \"Oreo v.\" , 8.1 ) . build () Which generates: private val android : String = \"Oreo v.\" + 8.1 By default PropertySpec.Builder produces val properties. Use mutable() if you need a var : val android = PropertySpec . builder ( \"android\" , String :: class ) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( \"%S + %L\" , \"Oreo v.\" , 8.1 ) . build ()","title":"Properties"},{"location":"#inline-properties","text":"The way KotlinPoet models inline properties deserves special mention. The following snippet of code: val android = PropertySpec . builder ( \"android\" , String :: class ) . addModifiers ( KModifier . INLINE ) . build () will produce an error: java.lang.IllegalArgumentException: KotlinPoet doesn't allow setting the inline modifier on properties. You should mark either the getter, the setter, or both inline. Indeed, a property marked with inline should have at least one accessor which will be inlined by the compiler. Let\u2019s add a getter to this property: val android = PropertySpec . builder ( \"android\" , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( \"return %S\" , \"foo\" ) . build ()) . build () The result is the following: val android : kotlin . String inline get () = \"foo\" Now, what if we wanted to add a non-inline setter to the property above? We can do so without modifying any of the code we wrote previously: val android = PropertySpec . builder ( \"android\" , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( \"return %S\" , \"foo\" ) . build ()) . setter ( FunSpec . setterBuilder () . addParameter ( \"value\" , String :: class ) . build ()) . build () We get the expected result: val android : kotlin . String inline get () = \"foo\" set ( value ) { } Finally, if we go back and add KModifier.INLINE to the setter, KotlinPoet can wrap it nicely and produce the following result: inline val android : kotlin . String get () = \"foo\" set ( value ) { } Removing the modifier from either the getter or the setter will unwrap the expression back. If, on the other hand, KotlinPoet had allowed marking a property inline directly, the programmer would have had to manually add/remove the modifier whenever the state of the accessors changes in order to get correct and compilable output. We\u2019re solving this problem by making accessors the source of truth for the inline modifier.","title":"Inline properties"},{"location":"#interfaces","text":"KotlinPoet has no trouble with interfaces. Note that interface methods must always be ABSTRACT . The modifier is necessary when defining the interface: val helloWorld = TypeSpec . interfaceBuilder ( \"HelloWorld\" ) . addProperty ( \"buzz\" , String :: class ) . addFunction ( FunSpec . builder ( \"beep\" ) . addModifiers ( KModifier . ABSTRACT ) . build ()) . build () But these modifiers are omitted when the code is generated. These are the default so we don\u2019t need to include them for kotlinc \u2018s benefit! interface HelloWorld { val buzz : String fun beep () } Kotlin 1.4 adds support for functional interfaces via fun interface syntax. To create this in KotlinPoet, use TypeSpec.funInterfaceBuilder() . val helloWorld = TypeSpec . funInterfaceBuilder ( \"HelloWorld\" ) . addFunction ( FunSpec . builder ( \"beep\" ) . addModifiers ( KModifier . ABSTRACT ) . build ()) . build () // Generates... fun interface HelloWorld { fun beep () }","title":"Interfaces"},{"location":"#objects","text":"KotlinPoet supports objects: val helloWorld = TypeSpec . objectBuilder ( \"HelloWorld\" ) . addProperty ( PropertySpec . builder ( \"buzz\" , String :: class ) . initializer ( \"%S\" , \"buzz\" ) . build ()) . addFunction ( FunSpec . builder ( \"beep\" ) . addStatement ( \"println(%S)\" , \"Beep!\" ) . build ()) . build () Similarly, you can create companion objects and add them to classes using addType() : val companion = TypeSpec . companionObjectBuilder () . addProperty ( PropertySpec . builder ( \"buzz\" , String :: class ) . initializer ( \"%S\" , \"buzz\" ) . build ()) . addFunction ( FunSpec . builder ( \"beep\" ) . addStatement ( \"println(%S)\" , \"Beep!\" ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addType ( companion ) . build () You can provide an optional name for a companion object.","title":"Objects"},{"location":"#enums","text":"Use enumBuilder to create the enum type, and addEnumConstant() for each value: val helloWorld = TypeSpec . enumBuilder ( \"Roshambo\" ) . addEnumConstant ( \"ROCK\" ) . addEnumConstant ( \"SCISSORS\" ) . addEnumConstant ( \"PAPER\" ) . build () To generate this: enum class Roshambo { ROCK , SCISSORS , PAPER } Fancy enums are supported, where the enum values override methods or call a superclass constructor. Here\u2019s a comprehensive example: val helloWorld = TypeSpec . enumBuilder ( \"Roshambo\" ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( \"handsign\" , String :: class ) . build ()) . addEnumConstant ( \"ROCK\" , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( \"%S\" , \"fist\" ) . addFunction ( FunSpec . builder ( \"toString\" ) . addModifiers ( KModifier . OVERRIDE ) . addStatement ( \"return %S\" , \"avalanche!\" ) . returns ( String :: class ) . build ()) . build ()) . addEnumConstant ( \"SCISSORS\" , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( \"%S\" , \"peace\" ) . build ()) . addEnumConstant ( \"PAPER\" , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( \"%S\" , \"flat\" ) . build ()) . addProperty ( PropertySpec . builder ( \"handsign\" , String :: class , KModifier . PRIVATE ) . initializer ( \"handsign\" ) . build ()) . build () Which generates this: enum class Roshambo ( private val handsign : String ) { ROCK ( \"fist\" ) { override fun toString (): String = \"avalanche!\" }, SCISSORS ( \"peace\" ), PAPER ( \"flat\" ); }","title":"Enums"},{"location":"#anonymous-inner-classes","text":"In the enum code, we used TypeSpec.anonymousClassBuilder() . Anonymous inner classes can also be used in code blocks. They are values that can be referenced with %L : val comparator = TypeSpec . anonymousClassBuilder () . addSuperinterface ( Comparator :: class . parameterizedBy ( String :: class )) . addFunction ( FunSpec . builder ( \"compare\" ) . addModifiers ( KModifier . OVERRIDE ) . addParameter ( \"a\" , String :: class ) . addParameter ( \"b\" , String :: class ) . returns ( Int :: class ) . addStatement ( \"return %N.length - %N.length\" , \"a\" , \"b\" ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( \"HelloWorld\" ) . addFunction ( FunSpec . builder ( \"sortByLength\" ) . addParameter ( \"strings\" , List :: class . parameterizedBy ( String :: class )) . addStatement ( \"%N.sortedWith(%L)\" , \"strings\" , comparator ) . build ()) . build () This generates a method that contains a class that contains a method: class HelloWorld { fun sortByLength ( strings : List < String >) { strings . sortedWith ( object : Comparator < String > { override fun compare ( a : String , b : String ): Int = a . length - b . length }) } } One particularly tricky part of defining anonymous inner classes is the arguments to the superclass constructor. To pass them use TypeSpec.Builder \u2018s addSuperclassConstructorParameter() method.","title":"Anonymous Inner Classes"},{"location":"#annotations","text":"Simple annotations are easy: val test = FunSpec . builder ( \"test string equality\" ) . addAnnotation ( Test :: class ) . addStatement ( \"assertThat(%1S).isEqualTo(%1S)\" , \"foo\" ) . build () Which generates this function with an @Test annotation: @Test fun `test string equality` () { assertThat ( \"foo\" ). isEqualTo ( \"foo\" ) } Use AnnotationSpec.builder() to set properties on annotations: val logRecord = FunSpec . builder ( \"recordEvent\" ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( Headers :: class ) . addMember ( \"accept = %S\" , \"application/json; charset=utf-8\" ) . addMember ( \"userAgent = %S\" , \"Square Cash\" ) . build ()) . addParameter ( \"logRecord\" , LogRecord :: class ) . returns ( LogReceipt :: class ) . build () Which generates this annotation with accept and userAgent properties: @Headers ( accept = \"application/json; charset=utf-8\" , userAgent = \"Square Cash\" ) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt When you get fancy, annotation values can be annotations themselves. Use %L for embedded annotations: val headerList = ClassName ( \"\" , \"HeaderList\" ) val header = ClassName ( \"\" , \"Header\" ) val logRecord = FunSpec . builder ( \"recordEvent\" ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( headerList ) . addMember ( \"[\\n\u21e5%L,\\n%L\u21e4\\n]\" , AnnotationSpec . builder ( header ) . addMember ( \"name = %S\" , \"Accept\" ) . addMember ( \"value = %S\" , \"application/json; charset=utf-8\" ) . build (), AnnotationSpec . builder ( header ) . addMember ( \"name = %S\" , \"User-Agent\" ) . addMember ( \"value = %S\" , \"Square Cash\" ) . build ()) . build ()) . addParameter ( \"logRecord\" , logRecordName ) . returns ( logReceipt ) . build () Which generates this: @HeaderList ([ Header ( name = \"Accept\" , value = \"application/json; charset=utf-8\" ), Header ( name = \"User-Agent\" , value = \"Square Cash\" ) ]) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt KotlinPoet supports use-site targets for annotations: val utils = FileSpec . builder ( \"com.example\" , \"Utils\" ) . addAnnotation ( AnnotationSpec . builder ( JvmName :: class ) . useSiteTarget ( UseSiteTarget . FILE ) . build ()) . addFunction ( FunSpec . builder ( \"abs\" ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( \"return if (this < 0) -this else this\" ) . build ()) . build () Will output this: @file : JvmName package com.example import kotlin.Int import kotlin.jvm.JvmName fun Int . abs (): Int = if ( this < 0 ) - this else this","title":"Annotations"},{"location":"#type-aliases","text":"KotlinPoet provides API for creating Type Aliases, which supports simple class names, parameterized types and lambdas: val fileTable = Map :: class . asClassName () . parameterizedBy ( TypeVariableName ( \"K\" ), Set :: class . parameterizedBy ( File :: class )) val predicate = LambdaTypeName . get ( parameters = * arrayOf ( TypeVariableName ( \"T\" )), returnType = Boolean :: class . asClassName ()) val helloWorld = FileSpec . builder ( \"com.example\" , \"HelloWorld\" ) . addTypeAlias ( TypeAliasSpec . builder ( \"Word\" , String :: class ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( \"FileTable<K>\" , fileTable ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( \"Predicate<T>\" , predicate ). build ()) . build () Which generates the following: package com.example import java.io.File import kotlin.Boolean import kotlin.String import kotlin.collections.Map import kotlin.collections.Set typealias Word = String typealias FileTable < K > = Map < K , Set < File >> typealias Predicate < T > = ( T ) -> Boolean","title":"Type Aliases"},{"location":"#callable-references","text":"Callable references to constructors, functions, and properties may be emitted via: ClassName.constructorReference() for constructors MemberName.reference() for functions and properties For example, val helloClass = ClassName ( \"com.example.hello\" , \"Hello\" ) val worldFunction : MemberName = helloClass . member ( \"world\" ) val byeProperty : MemberName = helloClass . nestedClass ( \"World\" ). member ( \"bye\" ) val factoriesFun = FunSpec . builder ( \"factories\" ) . addStatement ( \"val hello = %L\" , helloClass . constructorReference ()) . addStatement ( \"val world = %L\" , worldFunction . reference ()) . addStatement ( \"val bye = %L\" , byeProperty . reference ()) . build () FileSpec . builder ( \"com.example\" , \"HelloWorld\" ) . addFunction ( factoriesFun ) . build () would generate: package com.example import com.example.hello.Hello fun factories () { val hello = :: Hello val world = Hello :: world val bye = Hello . World :: bye } Top-level classes and members with conflicting names may require aliased imports, as with member names .","title":"Callable References"},{"location":"#download","text":"Download the latest .jar or depend via Maven: <dependency> <groupId> com.squareup </groupId> <artifactId> kotlinpoet </artifactId> <version> 1.6.0 </version> </dependency> or Gradle: implementation ( \"com.squareup:kotlinpoet:1.6.0\" ) Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Download"},{"location":"#license","text":"Copyright 2017 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 1.6.0 \u00b6 2020-05-28 New: Deprecate Mirror API integrations. Mirror API integrations, such as TypeElement.asClassName() and FunSpec.overriding(ExecutableElement) , are being deprecated in this release. These KotlinPoet APIs are most often used in annotation processors. Since kapt runs annotation processors over stubs, which are Java files, a lot of the Kotlin-specific information gets lost in translation and cannot be accessed by KotlinPoet through the Mirror API integrations. Examples include: Alias types, such as kotlin.String , get converted to their JVM representations, such as java.lang.String . Type nullability information is not accessible. suspend functions are seen as simple functions with an additional Continuation parameter. The correct solution is to switch to KotlinPoet-metadata or KotlinPoet-metadata-specs API, which fetches Kotlin-specific information from the @Metadata annotation and produces correct KotlinPoet Specs. We may explore adding new metadata-based alternatives to the deprecated APIs in the future. New: Kotlin 1.3.72. New: Improve MemberName to support operator overloading. New: Support generics in AnnotationSpec . New: Add support for functional interfaces. New: Make more FunSpec.Builder members public for easier mutation. Fix: Properly propagate implicit type and function modifiers in nested declarations. Fix: Properly escape type names containing $ character. Fix: Don\u2019t emit LambdaTypeName annotations twice. Fix: Preserve tags in TypeName.copy() . Version 1.5.0 \u00b6 2020-01-09 KotlinPoet now targets JDK8, which means that executing a build that includes KotlinPoet as a dependency on a machine with an older version of JDK installed won\u2019t work. This has no effect on the code that KotlinPoet produces : the code can still be compiled against JDK6, as long as it doesn\u2019t use any features that were introduced in newer releases. New: Kotlin 1.3.61. New: Add support for processing FileFacades in KotlinPoet-metadata. New: Add support for inner nested and companion objects on annotation classes. New: Improve error messages for mismatched open/close statement characters. New: Tag AnnotationSpec s with the annotation mirror when available. New: Include annotations on enum entries when creating TypeSpec s from metadata. Fix: Fix metadata parsing for types. Fix: Allow file names that are Kotlin keywords. Fix: Properly escape type alias names with backticks. Fix: Allow creating TypeSpec s with names that can be escaped with backticks. Fix: Properly escape enum constant names with backticks. Fix: Maintain proper ordering of properties and initializers when emitting a TypeSpec . Note : with this change, any properties declared after any initializer blocks will not be added to the primary constructor and will instead be emitted inside the TypeSpec body. Fix: Don\u2019t emit a leading new line if type KDoc is empty but parameter KDocs are present. Fix: Ensure KotlinPoet-metadata resolves package names properly. ## Version 1.4.4 2019-11-16 Fix: Support reified inline types in KotlinPoet-metadata. Version 1.4.3 \u00b6 2019-10-30 Fix: Don\u2019t emit stubs for abstract functions in KotlinPoet-metadata. Version 1.4.2 \u00b6 2019-10-28 Fix: Properly handle abstract elements in KotlinPoet-metadata. Fix: Properly handle typealiases in KotlinPoet-metadata. Fix: Properly render % symbols at the end of KDocs. Version 1.4.1 \u00b6 2019-10-18 New: Add annotations support to TypeAliasSpec . New: Read type annotations from Kotlin Metadata . New: Introduce ImmutableKmDeclarationContainer . Fix: Use full package name for shading auto-common . Fix: Support reading self-type variables (e.g. Asset<A : Asset<A>> ) from Kotlin Metadata . Version 1.4.0 \u00b6 2019-09-24 New: This release introduces the new KotlinPoet-metadata API that makes it easy to introspect Kotlin types and build KotlinPoet Specs based on that data. The strategy for type introspection is driven by ClassInspector , which is a basic interface for looking up JVM information about a given Class. This optionally is used by the toTypeSpec() / toFileSpec() APIs in kotlinpoet-metadata-specs artifact to inform about Classes with information that isn\u2019t present in metadata (overrides, JVM modifiers, etc). There are two batteries-included implementations available in ReflectiveClassInspector (for reflection) and ElementsClassInspector (for the javax Elements API in annotation processing). These implementations are available through their respective kotlinpoet-classinspector-* artifacts. For more information refer to the KotlinPoet-metadata-specs README . At the time of this release the API is in experimental mode and has to be opted into via the KotlinPoetMetadataPreview annotation. New: Kotlin 1.3.50. New: A new constructor to simplify creation of ParameterSpec instances. New: New ClassName constructors. New: TypeName and subclasses can now store tags. New: Optional parameters added to toBuilder() methods of most Specs. New: List overrides for Spec methods that accept vararg s. New: CodeBlock.Builder.clear() helper method. New: FunSpec.Builder.clearBody() helper method. Fix: Properly escape enum constant names. Fix: Ensure trailing newlines in KDoc and function bodies. Fix: TypeVariableName s with empty bounds will now default to Any? . Fix: Don\u2019t emit parens for primary constructors. Fix: ClassName s with empty simple names are not allowed anymore. Fix: Throw if names contain illegal characters that can\u2019t be escaped with backticks. Version 1.3.0 \u00b6 2019-05-30 New: Don\u2019t inline annotations in the primary constructor. New: Force new lines when emitting primary constructors. New: Support using MemberNames as arguments to %N. New: Add more ClassName constants: ClassName.STRING, ClassName.LIST, etc. New: Add ClassName.constructorReference() and MemberName.reference(). New: Make %N accept MemberNames. New: Escape spaces in import aliases. New: Escape spaces in ClassNames. New: Escape spaces in MemberNames. New: Escape imports containing spaces. New: Escape package name containing spaces. New: Use 2-space indents. New: Only indent one level on annotation values. Fix: Pass only unique originating elements to Filer. Fix: Fix bug with MemberNames in same package nested inside a class. Version 1.2.0 \u00b6 2019-03-28 New: Add writeTo(Filer) and originating element API. New: Make *Spec types taggable. New: Make FunSpec.Builder#addCode take vararg Any?. Fix: Import members from default package. Fix: Add non-wrapping spaces in control flow creation methods. Fix: Named \u201cvalue\u201d argument being omitted in annotation array types. Version 1.1.0 \u00b6 2019-02-28 New: Kotlin 1.3.21. New: Support referencing members using %M and MemberName type. New: Add extensions for getting a MemberName from a ClassName , KClass and Class . New: Allow passing CodeBlock s as arguments to %P . New: Allow interface delegation for objects. Fix: Don\u2019t emit visible whitespace in toString() . Fix: Prevent line wrapping in weird places inside function signature. Fix: No line wrapping between val and property name. Fix: Allow passing line prefix into LineWrapper to enable proper line wrapping in KDoc. Fix: Add newline for TypeSpec Kdoc with no tags. Fix: Add newline for remaining Specs. Fix: Fix kdoc formatting for property getter/setters. Fix: Don\u2019t wrap single line comments inside FunSpec . Fix: Add non-wrapping package name. Fix: Remove n^2 algorithm in CodeWriter.resolve() by precomputing all of the nested simple names of a TypeSpec . Fix: Fix edge case with empty enum classes. Fix: Fix Nullable Type Parameter handling in KType.asTypeName() . Fix: Fix incorrect long comment wrapping in FileSpec . Fix: Attach primary constructor param/property KDoc to the element vs emitting it inside the type header. Version 1.0.1 \u00b6 2019-01-02 New: Allow enums without constants. New: Improved formatting of TypeSpec KDoc. New: Support @property and @param KDoc tags in TypeSpec. Fix: Use pre-formatted strings for arguments to %P. Version 1.0.0 \u00b6 2018-12-10 New: Kotlin 1.3.11. Fix: Prevent wrapping in import statements. Version 1.0.0-RC3 \u00b6 2018-11-28 New: Kotlin 1.3.10. New: Add %P placeholder for string templates. New: Add support for receiver kdoc. New: Avoid emitting Unit as return type. New: Add support for empty setters. New: Add checks for inline classes. New: Escape property and variable names if keywords. New: Replace %> , %< , %[ , %] placeholders with \u21e5 , \u21e4 , \u00ab , \u00bb . New: Replace %W with space, and add \u00b7 as a non-breaking space. New: Change TypeName to sealed class. New: Documentation improvements. New: Replace TypeName modifier methods with copy() . New: Rename members of WildcardTypeName to match with the producer/consumer generics model. New: Rename TypeName.nullable into TypeName.isNullable . New: Rename LambdaTypeName.suspending into LambdaTypeName.isSuspending . New: Rename TypeVariableName.reified into TypeVariableName.isReified . Fix: Emit star-projection only for types with Any? upper bound. Fix: Fold property with escaped name. Version 1.0.0-RC2 \u00b6 2018-10-22 New: Kotlin 1.2.71. New: README improvements. New: Allow opening braces and params in beginControlFlow() . New: Add KDoc to ParameterSpec , collapse into parent KDoc. New: Support TypeVariable s in PropertySpec . New: Add parens for annotated types in LambdaTypeName . New: Improve error messaging and documentation for inline properties. New: Allow sealed classes to declare abstract properties. New: Added buildCodeBlock() helper function. New: Allow using CodeBlock s with statements as property initializers and default parameter values. New: Rename NameAllocator.clone() into `NameAllocator.copy(). New: Rename TypeName.asNonNullable() to TypeName.asNonNull() . New: Remove PropertySpec.varBuilder() (use mutable() instead). New: Allow importing top-level members in default package. New: Add overloads to add KDoc to return type. Fix: Distinguishing IntArray and Array<Int> when creating TypeName . Fix: Use TypeName instead of ClassName as parameter type of plusParameter() . Fix: Keep type-parameter variance when constructing TypeName from KType . Fix: Don\u2019t validate modifiers when merging properties with primary constructor parameters. Fix: Escape $ characters in formatted strings. Fix: FileSpec.Builder blank package and subfolder fix. Fix: Append new line at end of parameter KDoc. Fix: Add parameter KDoc in toBuilder() . Version 1.0.0-RC1 \u00b6 2018-07-16 New: Escape keywords in imports and canonical class names. New: Improve external support. New: Extensions for KType and KTypeParameter . New: Add builder methods to simplify adding common kotlin.jvm annotations. New: Enums are able to have companion objects. New: Add missing primaryConstructor & companionObject to TypeSpec#toBuilder() . New: Make subtype checking vals inside Kind public. New: Escape (class/property/function/variable) names automatically if they contain space, hyphen, or other symbols. New: Improve ParameterizedTypeName API. New: Add WildcardTypeName.STAR constant. New: Expose mutable builder properties and move their validations to build-time. Fix: Use regular indents for parameter lists. Fix: Inline annotations on properties defined in primary constructor. Fix: Use Any? as the default type variable bounds. Fix: Fix importing annotated TypeName . Fix: If any primary constructor property has KDoc, put properties on new lines. Fix: Properly emit where block in type signature. Fix: Avoid type name collisions in primary constructor. Fix: Remove implicit TypeVariable bound when more bounds are added. Fix: Combine annotations and modifiers from constructor params and properties. Fix: Replace delegate constructor args along with the constructor. Version 0.7.0 \u00b6 2018-02-16 New: Increase indent to 4 spaces. New: Delegate super interfaces as constructor parameters. New: Support PropertySpec s as CodeBlock literals. New: Support KDoc for TypeAliasSpec . New: Allow for adding an initializer block inside a companion object. New: Escape name in ParameterSpec which is also a keyword. New: Escape names in statements. New: Set com.squareup.kotlinpoet as automatic module name. New: Support suspending lambda types. New: Support named LambdaTypeName parameters. New: Support dynamic type. New: Disallow wildcard imports. New: Depend on Kotlin 1.2.21. Fix: Correct handling of super-classes/interfaces on anonymous classes. Fix: Fix boundary filtering to Any? . Fix: Wrap long property initializers. Fix: Fix formatting and indentation of parameter lists. Version 0.6.0 \u00b6 2017-11-03 New: Support lambda extensions. New: Support renames in imports like import bar.Bar as bBar . New: Support extension and inline properties. New: Support reified types. New: Expose enclosed types inside LambdaTypeName . New: Depend on Kotlin Kotlin 1.1.51. New: Improved API and formatting of annotations. New: Improved multiplatform support. Fix: Escape function and package names if they are a Kotlin keyword. Fix: Properly format WildcardTypeName\u2019s class declaration. Version 0.5.0 \u00b6 2017-09-13 New: Rename addFun() to addFunction() . New: Rename KotlinFile to FileSpec . New: Rename KotlinFile.addFileAnnotation() to addAnnotation() . New: Rename KotlinFile.addFileComment() to addComment() . New: Support cross-platform code, including HEADER and IMPL modifiers. New: Support type variables for type aliases. New: Support constructor delegation. New: Support named companion objects. New: Depend on Kotlin 1.1.4-3. Fix: Format one parameter per line when there are more than two parameters. Fix: Don\u2019t emit braces when the constructor body is empty. Fix: Do not invoke superclass constructor when no primary constructor. Fix: Enforce the right modifiers on functions. Version 0.4.0 \u00b6 2017-08-08 New: Change KotlinPoet\u2019s extensions like asClassName() to be top-level functions. New: Add declaration-site variance support. New: Improve handling of single expression bodies. New: Support file annotations. New: Support imports from the top-level file. New: Accept superclass constructor parameters. New: Support primary constructors using the constructor keyword. Fix: Don\u2019t emit setter parameter types. Fix: Support Kotlin keywords in NameAllocator . Fix: Emit the right default parameters for primary constructors. Fix: Format annotations properly when used as parameters. Fix: Recognize imports when emitting nullable types. Fix: Call through to the superclass constructor when superclass has a no-args constructor. Fix: Omit class braces if all properties are declared in primary constructor. Fix: Don\u2019t emit empty class bodies. Fix: Emit the right syntax for declaring multiple generic type constraints. Fix: Support properties on objects, companions and interfaces. Fix: Use AnnotationSpec for throws. Version 0.3.0 \u00b6 2017-06-11 New: Objects and companion objects. New: TypeAliasSpec to create type aliases. New: LambdaTypeName to create lambda types. New: Collapse property declarations into constructor params. New: Extension and invoke functions for creating type names: Runnable::class.asClassName() . New: Basic support for expression bodies. New: Basic support for custom accessors. New: Remove Filer writing and originating elements concept. These stem from javac annotation processors. Fix: Generate valid annotation classes. Fix: Use KModifier for varargs. Fix: Use ParameterizedTypeName for array types. Fix: Extract Kotlin name from KClass instead of Java name. Fix: Emit valid class literals: Double::class instead of Double.class . Fix: Emit modifiers in the expected order. Fix: Emit the correct syntax for enum classes and overridden members. Version 0.2.0 \u00b6 2017-05-21 New: Flip API signatures to be (name, type) instead of (type, name). New: Support for nullable types. New: Support delegated properties. New: Extension functions. New: Support top-level properties. Fix: Inheritance should use : instead of extends and implements . Fix: Make initializerBlock emit init {} . Version 0.1.0 \u00b6 2017-05-16 Initial public release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-160","text":"2020-05-28 New: Deprecate Mirror API integrations. Mirror API integrations, such as TypeElement.asClassName() and FunSpec.overriding(ExecutableElement) , are being deprecated in this release. These KotlinPoet APIs are most often used in annotation processors. Since kapt runs annotation processors over stubs, which are Java files, a lot of the Kotlin-specific information gets lost in translation and cannot be accessed by KotlinPoet through the Mirror API integrations. Examples include: Alias types, such as kotlin.String , get converted to their JVM representations, such as java.lang.String . Type nullability information is not accessible. suspend functions are seen as simple functions with an additional Continuation parameter. The correct solution is to switch to KotlinPoet-metadata or KotlinPoet-metadata-specs API, which fetches Kotlin-specific information from the @Metadata annotation and produces correct KotlinPoet Specs. We may explore adding new metadata-based alternatives to the deprecated APIs in the future. New: Kotlin 1.3.72. New: Improve MemberName to support operator overloading. New: Support generics in AnnotationSpec . New: Add support for functional interfaces. New: Make more FunSpec.Builder members public for easier mutation. Fix: Properly propagate implicit type and function modifiers in nested declarations. Fix: Properly escape type names containing $ character. Fix: Don\u2019t emit LambdaTypeName annotations twice. Fix: Preserve tags in TypeName.copy() .","title":"Version 1.6.0"},{"location":"changelog/#version-150","text":"2020-01-09 KotlinPoet now targets JDK8, which means that executing a build that includes KotlinPoet as a dependency on a machine with an older version of JDK installed won\u2019t work. This has no effect on the code that KotlinPoet produces : the code can still be compiled against JDK6, as long as it doesn\u2019t use any features that were introduced in newer releases. New: Kotlin 1.3.61. New: Add support for processing FileFacades in KotlinPoet-metadata. New: Add support for inner nested and companion objects on annotation classes. New: Improve error messages for mismatched open/close statement characters. New: Tag AnnotationSpec s with the annotation mirror when available. New: Include annotations on enum entries when creating TypeSpec s from metadata. Fix: Fix metadata parsing for types. Fix: Allow file names that are Kotlin keywords. Fix: Properly escape type alias names with backticks. Fix: Allow creating TypeSpec s with names that can be escaped with backticks. Fix: Properly escape enum constant names with backticks. Fix: Maintain proper ordering of properties and initializers when emitting a TypeSpec . Note : with this change, any properties declared after any initializer blocks will not be added to the primary constructor and will instead be emitted inside the TypeSpec body. Fix: Don\u2019t emit a leading new line if type KDoc is empty but parameter KDocs are present. Fix: Ensure KotlinPoet-metadata resolves package names properly. ## Version 1.4.4 2019-11-16 Fix: Support reified inline types in KotlinPoet-metadata.","title":"Version 1.5.0"},{"location":"changelog/#version-143","text":"2019-10-30 Fix: Don\u2019t emit stubs for abstract functions in KotlinPoet-metadata.","title":"Version 1.4.3"},{"location":"changelog/#version-142","text":"2019-10-28 Fix: Properly handle abstract elements in KotlinPoet-metadata. Fix: Properly handle typealiases in KotlinPoet-metadata. Fix: Properly render % symbols at the end of KDocs.","title":"Version 1.4.2"},{"location":"changelog/#version-141","text":"2019-10-18 New: Add annotations support to TypeAliasSpec . New: Read type annotations from Kotlin Metadata . New: Introduce ImmutableKmDeclarationContainer . Fix: Use full package name for shading auto-common . Fix: Support reading self-type variables (e.g. Asset<A : Asset<A>> ) from Kotlin Metadata .","title":"Version 1.4.1"},{"location":"changelog/#version-140","text":"2019-09-24 New: This release introduces the new KotlinPoet-metadata API that makes it easy to introspect Kotlin types and build KotlinPoet Specs based on that data. The strategy for type introspection is driven by ClassInspector , which is a basic interface for looking up JVM information about a given Class. This optionally is used by the toTypeSpec() / toFileSpec() APIs in kotlinpoet-metadata-specs artifact to inform about Classes with information that isn\u2019t present in metadata (overrides, JVM modifiers, etc). There are two batteries-included implementations available in ReflectiveClassInspector (for reflection) and ElementsClassInspector (for the javax Elements API in annotation processing). These implementations are available through their respective kotlinpoet-classinspector-* artifacts. For more information refer to the KotlinPoet-metadata-specs README . At the time of this release the API is in experimental mode and has to be opted into via the KotlinPoetMetadataPreview annotation. New: Kotlin 1.3.50. New: A new constructor to simplify creation of ParameterSpec instances. New: New ClassName constructors. New: TypeName and subclasses can now store tags. New: Optional parameters added to toBuilder() methods of most Specs. New: List overrides for Spec methods that accept vararg s. New: CodeBlock.Builder.clear() helper method. New: FunSpec.Builder.clearBody() helper method. Fix: Properly escape enum constant names. Fix: Ensure trailing newlines in KDoc and function bodies. Fix: TypeVariableName s with empty bounds will now default to Any? . Fix: Don\u2019t emit parens for primary constructors. Fix: ClassName s with empty simple names are not allowed anymore. Fix: Throw if names contain illegal characters that can\u2019t be escaped with backticks.","title":"Version 1.4.0"},{"location":"changelog/#version-130","text":"2019-05-30 New: Don\u2019t inline annotations in the primary constructor. New: Force new lines when emitting primary constructors. New: Support using MemberNames as arguments to %N. New: Add more ClassName constants: ClassName.STRING, ClassName.LIST, etc. New: Add ClassName.constructorReference() and MemberName.reference(). New: Make %N accept MemberNames. New: Escape spaces in import aliases. New: Escape spaces in ClassNames. New: Escape spaces in MemberNames. New: Escape imports containing spaces. New: Escape package name containing spaces. New: Use 2-space indents. New: Only indent one level on annotation values. Fix: Pass only unique originating elements to Filer. Fix: Fix bug with MemberNames in same package nested inside a class.","title":"Version 1.3.0"},{"location":"changelog/#version-120","text":"2019-03-28 New: Add writeTo(Filer) and originating element API. New: Make *Spec types taggable. New: Make FunSpec.Builder#addCode take vararg Any?. Fix: Import members from default package. Fix: Add non-wrapping spaces in control flow creation methods. Fix: Named \u201cvalue\u201d argument being omitted in annotation array types.","title":"Version 1.2.0"},{"location":"changelog/#version-110","text":"2019-02-28 New: Kotlin 1.3.21. New: Support referencing members using %M and MemberName type. New: Add extensions for getting a MemberName from a ClassName , KClass and Class . New: Allow passing CodeBlock s as arguments to %P . New: Allow interface delegation for objects. Fix: Don\u2019t emit visible whitespace in toString() . Fix: Prevent line wrapping in weird places inside function signature. Fix: No line wrapping between val and property name. Fix: Allow passing line prefix into LineWrapper to enable proper line wrapping in KDoc. Fix: Add newline for TypeSpec Kdoc with no tags. Fix: Add newline for remaining Specs. Fix: Fix kdoc formatting for property getter/setters. Fix: Don\u2019t wrap single line comments inside FunSpec . Fix: Add non-wrapping package name. Fix: Remove n^2 algorithm in CodeWriter.resolve() by precomputing all of the nested simple names of a TypeSpec . Fix: Fix edge case with empty enum classes. Fix: Fix Nullable Type Parameter handling in KType.asTypeName() . Fix: Fix incorrect long comment wrapping in FileSpec . Fix: Attach primary constructor param/property KDoc to the element vs emitting it inside the type header.","title":"Version 1.1.0"},{"location":"changelog/#version-101","text":"2019-01-02 New: Allow enums without constants. New: Improved formatting of TypeSpec KDoc. New: Support @property and @param KDoc tags in TypeSpec. Fix: Use pre-formatted strings for arguments to %P.","title":"Version 1.0.1"},{"location":"changelog/#version-100","text":"2018-12-10 New: Kotlin 1.3.11. Fix: Prevent wrapping in import statements.","title":"Version 1.0.0"},{"location":"changelog/#version-100-rc3","text":"2018-11-28 New: Kotlin 1.3.10. New: Add %P placeholder for string templates. New: Add support for receiver kdoc. New: Avoid emitting Unit as return type. New: Add support for empty setters. New: Add checks for inline classes. New: Escape property and variable names if keywords. New: Replace %> , %< , %[ , %] placeholders with \u21e5 , \u21e4 , \u00ab , \u00bb . New: Replace %W with space, and add \u00b7 as a non-breaking space. New: Change TypeName to sealed class. New: Documentation improvements. New: Replace TypeName modifier methods with copy() . New: Rename members of WildcardTypeName to match with the producer/consumer generics model. New: Rename TypeName.nullable into TypeName.isNullable . New: Rename LambdaTypeName.suspending into LambdaTypeName.isSuspending . New: Rename TypeVariableName.reified into TypeVariableName.isReified . Fix: Emit star-projection only for types with Any? upper bound. Fix: Fold property with escaped name.","title":"Version 1.0.0-RC3"},{"location":"changelog/#version-100-rc2","text":"2018-10-22 New: Kotlin 1.2.71. New: README improvements. New: Allow opening braces and params in beginControlFlow() . New: Add KDoc to ParameterSpec , collapse into parent KDoc. New: Support TypeVariable s in PropertySpec . New: Add parens for annotated types in LambdaTypeName . New: Improve error messaging and documentation for inline properties. New: Allow sealed classes to declare abstract properties. New: Added buildCodeBlock() helper function. New: Allow using CodeBlock s with statements as property initializers and default parameter values. New: Rename NameAllocator.clone() into `NameAllocator.copy(). New: Rename TypeName.asNonNullable() to TypeName.asNonNull() . New: Remove PropertySpec.varBuilder() (use mutable() instead). New: Allow importing top-level members in default package. New: Add overloads to add KDoc to return type. Fix: Distinguishing IntArray and Array<Int> when creating TypeName . Fix: Use TypeName instead of ClassName as parameter type of plusParameter() . Fix: Keep type-parameter variance when constructing TypeName from KType . Fix: Don\u2019t validate modifiers when merging properties with primary constructor parameters. Fix: Escape $ characters in formatted strings. Fix: FileSpec.Builder blank package and subfolder fix. Fix: Append new line at end of parameter KDoc. Fix: Add parameter KDoc in toBuilder() .","title":"Version 1.0.0-RC2"},{"location":"changelog/#version-100-rc1","text":"2018-07-16 New: Escape keywords in imports and canonical class names. New: Improve external support. New: Extensions for KType and KTypeParameter . New: Add builder methods to simplify adding common kotlin.jvm annotations. New: Enums are able to have companion objects. New: Add missing primaryConstructor & companionObject to TypeSpec#toBuilder() . New: Make subtype checking vals inside Kind public. New: Escape (class/property/function/variable) names automatically if they contain space, hyphen, or other symbols. New: Improve ParameterizedTypeName API. New: Add WildcardTypeName.STAR constant. New: Expose mutable builder properties and move their validations to build-time. Fix: Use regular indents for parameter lists. Fix: Inline annotations on properties defined in primary constructor. Fix: Use Any? as the default type variable bounds. Fix: Fix importing annotated TypeName . Fix: If any primary constructor property has KDoc, put properties on new lines. Fix: Properly emit where block in type signature. Fix: Avoid type name collisions in primary constructor. Fix: Remove implicit TypeVariable bound when more bounds are added. Fix: Combine annotations and modifiers from constructor params and properties. Fix: Replace delegate constructor args along with the constructor.","title":"Version 1.0.0-RC1"},{"location":"changelog/#version-070","text":"2018-02-16 New: Increase indent to 4 spaces. New: Delegate super interfaces as constructor parameters. New: Support PropertySpec s as CodeBlock literals. New: Support KDoc for TypeAliasSpec . New: Allow for adding an initializer block inside a companion object. New: Escape name in ParameterSpec which is also a keyword. New: Escape names in statements. New: Set com.squareup.kotlinpoet as automatic module name. New: Support suspending lambda types. New: Support named LambdaTypeName parameters. New: Support dynamic type. New: Disallow wildcard imports. New: Depend on Kotlin 1.2.21. Fix: Correct handling of super-classes/interfaces on anonymous classes. Fix: Fix boundary filtering to Any? . Fix: Wrap long property initializers. Fix: Fix formatting and indentation of parameter lists.","title":"Version 0.7.0"},{"location":"changelog/#version-060","text":"2017-11-03 New: Support lambda extensions. New: Support renames in imports like import bar.Bar as bBar . New: Support extension and inline properties. New: Support reified types. New: Expose enclosed types inside LambdaTypeName . New: Depend on Kotlin Kotlin 1.1.51. New: Improved API and formatting of annotations. New: Improved multiplatform support. Fix: Escape function and package names if they are a Kotlin keyword. Fix: Properly format WildcardTypeName\u2019s class declaration.","title":"Version 0.6.0"},{"location":"changelog/#version-050","text":"2017-09-13 New: Rename addFun() to addFunction() . New: Rename KotlinFile to FileSpec . New: Rename KotlinFile.addFileAnnotation() to addAnnotation() . New: Rename KotlinFile.addFileComment() to addComment() . New: Support cross-platform code, including HEADER and IMPL modifiers. New: Support type variables for type aliases. New: Support constructor delegation. New: Support named companion objects. New: Depend on Kotlin 1.1.4-3. Fix: Format one parameter per line when there are more than two parameters. Fix: Don\u2019t emit braces when the constructor body is empty. Fix: Do not invoke superclass constructor when no primary constructor. Fix: Enforce the right modifiers on functions.","title":"Version 0.5.0"},{"location":"changelog/#version-040","text":"2017-08-08 New: Change KotlinPoet\u2019s extensions like asClassName() to be top-level functions. New: Add declaration-site variance support. New: Improve handling of single expression bodies. New: Support file annotations. New: Support imports from the top-level file. New: Accept superclass constructor parameters. New: Support primary constructors using the constructor keyword. Fix: Don\u2019t emit setter parameter types. Fix: Support Kotlin keywords in NameAllocator . Fix: Emit the right default parameters for primary constructors. Fix: Format annotations properly when used as parameters. Fix: Recognize imports when emitting nullable types. Fix: Call through to the superclass constructor when superclass has a no-args constructor. Fix: Omit class braces if all properties are declared in primary constructor. Fix: Don\u2019t emit empty class bodies. Fix: Emit the right syntax for declaring multiple generic type constraints. Fix: Support properties on objects, companions and interfaces. Fix: Use AnnotationSpec for throws.","title":"Version 0.4.0"},{"location":"changelog/#version-030","text":"2017-06-11 New: Objects and companion objects. New: TypeAliasSpec to create type aliases. New: LambdaTypeName to create lambda types. New: Collapse property declarations into constructor params. New: Extension and invoke functions for creating type names: Runnable::class.asClassName() . New: Basic support for expression bodies. New: Basic support for custom accessors. New: Remove Filer writing and originating elements concept. These stem from javac annotation processors. Fix: Generate valid annotation classes. Fix: Use KModifier for varargs. Fix: Use ParameterizedTypeName for array types. Fix: Extract Kotlin name from KClass instead of Java name. Fix: Emit valid class literals: Double::class instead of Double.class . Fix: Emit modifiers in the expected order. Fix: Emit the correct syntax for enum classes and overridden members.","title":"Version 0.3.0"},{"location":"changelog/#version-020","text":"2017-05-21 New: Flip API signatures to be (name, type) instead of (type, name). New: Support for nullable types. New: Support delegated properties. New: Extension functions. New: Support top-level properties. Fix: Inheritance should use : instead of extends and implements . Fix: Make initializerBlock emit init {} .","title":"Version 0.2.0"},{"location":"changelog/#version-010","text":"2017-05-16 Initial public release.","title":"Version 0.1.0"},{"location":"contributing/","text":"Contributing \u00b6 If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"kotlinpoet_metadata/","text":"KotlinPoet-metadata \u00b6 KotlinPoet-metadata is an API for working with Kotlin @Metadata annotations. Its API sits atop kotlinx-metadata , offering immutable versions of its types + JVM metadata information. This can be used to read Kotlin language semantics off of class files. Example \u00b6 data class Taco ( val seasoning : String , val soft : Boolean ) { fun prepare () { } } val kmClass = Taco :: class . toImmutableKmClass () // Now you can access misc information about Taco from a Kotlin lens println ( kmClass . name ) kmClass . properties . forEach { println ( it . name ) } kmClass . functions . forEach { println ( it . name ) } Flags \u00b6 There are a number of boolean flags available to types as well under Flags.kt . These read the underlying kotlinx-metadata Flags property. Using the Taco example above, we can glean certain information: println ( \"Is class? ${kmClass.isClass}\" ) println ( \"Is data class? ${kmClass.isData}\" ) Interop with kotlinx-metadata \u00b6 To convert a kotlinx-metadata type to its analogous immutable type, simply call toImmutable() val immutableKmClass : ImmutableKmClass = kmClass . toImmutable () To convert an immutable type back to its analogous kotlinx-metadata type, call toMutable() . val mutableKmClass : KmClass = kmClass . toMutable () Interop with KotlinPoet \u00b6 There is a separate kotlinpoet-metadata-specs artifact that offers interop APIs to create TypeSpec / FileSpec representations of classes using this artifact for intermediary parsing.","title":"KotlinPoet Metadata"},{"location":"kotlinpoet_metadata/#kotlinpoet-metadata","text":"KotlinPoet-metadata is an API for working with Kotlin @Metadata annotations. Its API sits atop kotlinx-metadata , offering immutable versions of its types + JVM metadata information. This can be used to read Kotlin language semantics off of class files.","title":"KotlinPoet-metadata"},{"location":"kotlinpoet_metadata/#example","text":"data class Taco ( val seasoning : String , val soft : Boolean ) { fun prepare () { } } val kmClass = Taco :: class . toImmutableKmClass () // Now you can access misc information about Taco from a Kotlin lens println ( kmClass . name ) kmClass . properties . forEach { println ( it . name ) } kmClass . functions . forEach { println ( it . name ) }","title":"Example"},{"location":"kotlinpoet_metadata/#flags","text":"There are a number of boolean flags available to types as well under Flags.kt . These read the underlying kotlinx-metadata Flags property. Using the Taco example above, we can glean certain information: println ( \"Is class? ${kmClass.isClass}\" ) println ( \"Is data class? ${kmClass.isData}\" )","title":"Flags"},{"location":"kotlinpoet_metadata/#interop-with-kotlinx-metadata","text":"To convert a kotlinx-metadata type to its analogous immutable type, simply call toImmutable() val immutableKmClass : ImmutableKmClass = kmClass . toImmutable () To convert an immutable type back to its analogous kotlinx-metadata type, call toMutable() . val mutableKmClass : KmClass = kmClass . toMutable ()","title":"Interop with kotlinx-metadata"},{"location":"kotlinpoet_metadata/#interop-with-kotlinpoet","text":"There is a separate kotlinpoet-metadata-specs artifact that offers interop APIs to create TypeSpec / FileSpec representations of classes using this artifact for intermediary parsing.","title":"Interop with KotlinPoet"},{"location":"kotlinpoet_metadata_specs/","text":"KotlinPoet-metadata-specs \u00b6 KotlinPoet-metadata-specs is an API for converting kotlinpoet-metadata types to KotlinPoet source representations of their APIs. This includes full type resolution, signatures, enclosed elements, and general stub source representations of the underlying API. Example \u00b6 data class Taco ( val seasoning : String , val soft : Boolean ) { fun prepare () { } } val typeSpec = Taco :: class . toTypeSpec () // Or FileSpec val fileSpec = Taco :: class . toFileSpec () Source representation \u00b6 The generated representations are a best effort representation of the underlying source code. This means that synthetic elements will be excluded from generation. Kotlin-specific language features like lambdas or delegation will be coerced to their idiomatic source form. To aid with this, toTypeSpec() and toFileSpec() accept optional ClassInspector instances to assist in parsing/understanding the underlying JVM code. This is important for things like annotations, companion objects, certain JVM modifiers, overrides, and more. While it is optional, represented sources can be incomplete without this information available. Reflective and javax Elements implementations are available under the kotlinpoet-classinspector-* artifacts. Generated sources are solely stub implementations, meaning implementation details of elements like functions, property getters, and delegated properties are simply stubbed with TODO() placeholders. Known limitations \u00b6 Only KotlinClassMetadata.Class supported for now. No support for FileFacade , SyntheticClass , MultiFileClassFacade , or MultiFileClassPart @file: annotations are not supported yet. @JvmOverloads annotations are only supported with kotlinpoet-classinspector-elements and not reflection. Non-const literal values are only supported with kotlinpoet-classinspector-reflective and not reflection. ClassInspector data sourced from synthetic constructs are only supported with kotlinpoet-classinspector-reflective and not elements. This is because the javax Elements API does not model synthetic constructs. This can yield some missing information, like static companion object properties or property: site target annotations. Annotations annotated with AnnotationRetention.SOURCE are not parsable in reflection nor javax elements.","title":"KotlinPoet Metadata Specs"},{"location":"kotlinpoet_metadata_specs/#kotlinpoet-metadata-specs","text":"KotlinPoet-metadata-specs is an API for converting kotlinpoet-metadata types to KotlinPoet source representations of their APIs. This includes full type resolution, signatures, enclosed elements, and general stub source representations of the underlying API.","title":"KotlinPoet-metadata-specs"},{"location":"kotlinpoet_metadata_specs/#example","text":"data class Taco ( val seasoning : String , val soft : Boolean ) { fun prepare () { } } val typeSpec = Taco :: class . toTypeSpec () // Or FileSpec val fileSpec = Taco :: class . toFileSpec ()","title":"Example"},{"location":"kotlinpoet_metadata_specs/#source-representation","text":"The generated representations are a best effort representation of the underlying source code. This means that synthetic elements will be excluded from generation. Kotlin-specific language features like lambdas or delegation will be coerced to their idiomatic source form. To aid with this, toTypeSpec() and toFileSpec() accept optional ClassInspector instances to assist in parsing/understanding the underlying JVM code. This is important for things like annotations, companion objects, certain JVM modifiers, overrides, and more. While it is optional, represented sources can be incomplete without this information available. Reflective and javax Elements implementations are available under the kotlinpoet-classinspector-* artifacts. Generated sources are solely stub implementations, meaning implementation details of elements like functions, property getters, and delegated properties are simply stubbed with TODO() placeholders.","title":"Source representation"},{"location":"kotlinpoet_metadata_specs/#known-limitations","text":"Only KotlinClassMetadata.Class supported for now. No support for FileFacade , SyntheticClass , MultiFileClassFacade , or MultiFileClassPart @file: annotations are not supported yet. @JvmOverloads annotations are only supported with kotlinpoet-classinspector-elements and not reflection. Non-const literal values are only supported with kotlinpoet-classinspector-reflective and not reflection. ClassInspector data sourced from synthetic constructs are only supported with kotlinpoet-classinspector-reflective and not elements. This is because the javax Elements API does not model synthetic constructs. This can yield some missing information, like static companion object properties or property: site target annotations. Annotations annotated with AnnotationRetention.SOURCE are not parsable in reflection nor javax elements.","title":"Known limitations"},{"location":"1.x/kotlinpoet/","text":"kotlinpoet Packages \u00b6 Name Summary com.squareup.kotlinpoet com.squareup.kotlinpoet.jvm Index \u00b6 All Types","title":"kotlinpoet"},{"location":"1.x/kotlinpoet/#packages","text":"Name Summary com.squareup.kotlinpoet com.squareup.kotlinpoet.jvm","title":"Packages"},{"location":"1.x/kotlinpoet/#index","text":"All Types","title":"Index"},{"location":"1.x/kotlinpoet/alltypes/","text":"All Types \u00b6 Name Summary com.squareup.kotlinpoet.AnnotationSpec \u00b6 A generated annotation on a declaration. | (extensions in package com.squareup.kotlinpoet) java.lang.Class \u00b6 | com.squareup.kotlinpoet.ClassName \u00b6 A fully-qualified class name for top-level and member classes. | com.squareup.kotlinpoet.CodeBlock \u00b6 A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! | (extensions in package com.squareup.kotlinpoet) kotlin.collections.Collection \u00b6 | com.squareup.kotlinpoet.Dynamic \u00b6 | com.squareup.kotlinpoet.FileSpec \u00b6 A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. | com.squareup.kotlinpoet.FunSpec \u00b6 A generated function declaration. | com.squareup.kotlinpoet.Import \u00b6 | (extensions in package com.squareup.kotlinpoet) kotlin.reflect.KClass \u00b6 | com.squareup.kotlinpoet.KModifier \u00b6 | com.squareup.kotlinpoet.KOperator \u00b6 | (extensions in package com.squareup.kotlinpoet) kotlin.reflect.KType \u00b6 | (extensions in package com.squareup.kotlinpoet) kotlin.reflect.KTypeParameter \u00b6 | com.squareup.kotlinpoet.LambdaTypeName \u00b6 | com.squareup.kotlinpoet.MemberName \u00b6 Represents the name of a member (such as a function or a property). | com.squareup.kotlinpoet.NameAllocator \u00b6 Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: | com.squareup.kotlinpoet.OriginatingElementsHolder \u00b6 A type that can have originating elements . | (extensions in package com.squareup.kotlinpoet) java.lang.reflect.ParameterizedType \u00b6 | com.squareup.kotlinpoet.ParameterizedTypeName \u00b6 | com.squareup.kotlinpoet.ParameterSpec \u00b6 A generated parameter declaration. | com.squareup.kotlinpoet.PropertySpec \u00b6 A generated property declaration. | com.squareup.kotlinpoet.Taggable \u00b6 A type that can be tagged with extra metadata of the user\u2019s choice. | (extensions in package com.squareup.kotlinpoet) java.lang.reflect.Type \u00b6 | com.squareup.kotlinpoet.TypeAliasSpec \u00b6 A generated typealias declaration | (extensions in package com.squareup.kotlinpoet) javax.lang.model.element.TypeElement \u00b6 | (extensions in package com.squareup.kotlinpoet) javax.lang.model.type.TypeMirror \u00b6 | com.squareup.kotlinpoet.TypeName \u00b6 Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . | (extensions in package com.squareup.kotlinpoet) javax.lang.model.element.TypeParameterElement \u00b6 | com.squareup.kotlinpoet.TypeSpec \u00b6 A generated class, interface, or enum declaration. | (extensions in package com.squareup.kotlinpoet) javax.lang.model.type.TypeVariable \u00b6 | com.squareup.kotlinpoet.TypeVariableName \u00b6 | (extensions in package com.squareup.kotlinpoet) javax.lang.model.type.WildcardType \u00b6 | (extensions in package com.squareup.kotlinpoet) java.lang.reflect.WildcardType \u00b6 | com.squareup.kotlinpoet.WildcardTypeName \u00b6","title":"Index"},{"location":"1.x/kotlinpoet/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetannotationspec","text":"A generated annotation on a declaration. | (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.AnnotationSpec"},{"location":"1.x/kotlinpoet/alltypes/#javalangclass","text":"|","title":"java.lang.Class"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetclassname","text":"A fully-qualified class name for top-level and member classes. |","title":"com.squareup.kotlinpoet.ClassName"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetcodeblock","text":"A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! | (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.CodeBlock"},{"location":"1.x/kotlinpoet/alltypes/#kotlincollectionscollection","text":"|","title":"kotlin.collections.Collection"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetdynamic","text":"|","title":"com.squareup.kotlinpoet.Dynamic"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetfilespec","text":"A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. |","title":"com.squareup.kotlinpoet.FileSpec"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetfunspec","text":"A generated function declaration. |","title":"com.squareup.kotlinpoet.FunSpec"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetimport","text":"| (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.Import"},{"location":"1.x/kotlinpoet/alltypes/#kotlinreflectkclass","text":"|","title":"kotlin.reflect.KClass"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetkmodifier","text":"|","title":"com.squareup.kotlinpoet.KModifier"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetkoperator","text":"| (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.KOperator"},{"location":"1.x/kotlinpoet/alltypes/#kotlinreflectktype","text":"| (extensions in package com.squareup.kotlinpoet)","title":"kotlin.reflect.KType"},{"location":"1.x/kotlinpoet/alltypes/#kotlinreflectktypeparameter","text":"|","title":"kotlin.reflect.KTypeParameter"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetlambdatypename","text":"|","title":"com.squareup.kotlinpoet.LambdaTypeName"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetmembername","text":"Represents the name of a member (such as a function or a property). |","title":"com.squareup.kotlinpoet.MemberName"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetnameallocator","text":"Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: |","title":"com.squareup.kotlinpoet.NameAllocator"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetoriginatingelementsholder","text":"A type that can have originating elements . | (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.OriginatingElementsHolder"},{"location":"1.x/kotlinpoet/alltypes/#javalangreflectparameterizedtype","text":"|","title":"java.lang.reflect.ParameterizedType"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetparameterizedtypename","text":"|","title":"com.squareup.kotlinpoet.ParameterizedTypeName"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetparameterspec","text":"A generated parameter declaration. |","title":"com.squareup.kotlinpoet.ParameterSpec"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetpropertyspec","text":"A generated property declaration. |","title":"com.squareup.kotlinpoet.PropertySpec"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoettaggable","text":"A type that can be tagged with extra metadata of the user\u2019s choice. | (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.Taggable"},{"location":"1.x/kotlinpoet/alltypes/#javalangreflecttype","text":"|","title":"java.lang.reflect.Type"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoettypealiasspec","text":"A generated typealias declaration | (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.TypeAliasSpec"},{"location":"1.x/kotlinpoet/alltypes/#javaxlangmodelelementtypeelement","text":"| (extensions in package com.squareup.kotlinpoet)","title":"javax.lang.model.element.TypeElement"},{"location":"1.x/kotlinpoet/alltypes/#javaxlangmodeltypetypemirror","text":"|","title":"javax.lang.model.type.TypeMirror"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoettypename","text":"Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . | (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.TypeName"},{"location":"1.x/kotlinpoet/alltypes/#javaxlangmodelelementtypeparameterelement","text":"|","title":"javax.lang.model.element.TypeParameterElement"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoettypespec","text":"A generated class, interface, or enum declaration. | (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.TypeSpec"},{"location":"1.x/kotlinpoet/alltypes/#javaxlangmodeltypetypevariable","text":"|","title":"javax.lang.model.type.TypeVariable"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoettypevariablename","text":"| (extensions in package com.squareup.kotlinpoet)","title":"com.squareup.kotlinpoet.TypeVariableName"},{"location":"1.x/kotlinpoet/alltypes/#javaxlangmodeltypewildcardtype","text":"| (extensions in package com.squareup.kotlinpoet)","title":"javax.lang.model.type.WildcardType"},{"location":"1.x/kotlinpoet/alltypes/#javalangreflectwildcardtype","text":"|","title":"java.lang.reflect.WildcardType"},{"location":"1.x/kotlinpoet/alltypes/#comsquareupkotlinpoetwildcardtypename","text":"","title":"com.squareup.kotlinpoet.WildcardTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/","text":"kotlinpoet / com.squareup.kotlinpoet Package com.squareup.kotlinpoet \u00b6 Types \u00b6 Name Summary AnnotationSpec A generated annotation on a declaration. class AnnotationSpec : Taggable ClassName A fully-qualified class name for top-level and member classes. class ClassName : TypeName , Comparable < ClassName > CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! class CodeBlock Dynamic object Dynamic : TypeName FileSpec A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. class FileSpec : Taggable FunSpec A generated function declaration. class FunSpec : Taggable , OriginatingElementsHolder Import data class Import : Comparable < Import > KModifier enum class KModifier KOperator enum class KOperator LambdaTypeName class LambdaTypeName : TypeName MemberName Represents the name of a member (such as a function or a property). data class MemberName NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: class NameAllocator OriginatingElementsHolder A type that can have originating elements . interface OriginatingElementsHolder ParameterizedTypeName class ParameterizedTypeName : TypeName ParameterSpec A generated parameter declaration. class ParameterSpec : Taggable PropertySpec A generated property declaration. class PropertySpec : Taggable , OriginatingElementsHolder Taggable A type that can be tagged with extra metadata of the user\u2019s choice. interface Taggable TypeAliasSpec A generated typealias declaration class TypeAliasSpec : Taggable TypeName Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . sealed class TypeName : Taggable TypeSpec A generated class, interface, or enum declaration. class TypeSpec : Taggable , OriginatingElementsHolder TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName Extensions for External Classes \u00b6 Name Summary java.lang.Class java.lang.reflect.ParameterizedType java.lang.reflect.Type java.lang.reflect.WildcardType javax.lang.model.element.TypeElement javax.lang.model.element.TypeParameterElement javax.lang.model.type.TypeMirror javax.lang.model.type.TypeVariable javax.lang.model.type.WildcardType kotlin.collections.Collection kotlin.reflect.KClass kotlin.reflect.KType kotlin.reflect.KTypeParameter Properties \u00b6 Name Summary ANNOTATION val ANNOTATION: ClassName ANY val ANY: ClassName ARRAY val ARRAY: ClassName BOOLEAN val BOOLEAN: ClassName BOOLEAN_ARRAY val BOOLEAN_ARRAY: ClassName BYTE val BYTE: ClassName BYTE_ARRAY val BYTE_ARRAY: ClassName CHAR val CHAR: ClassName CHAR_ARRAY val CHAR_ARRAY: ClassName CHAR_SEQUENCE val CHAR_SEQUENCE: ClassName COLLECTION val COLLECTION: ClassName COMPARABLE val COMPARABLE: ClassName DOUBLE val DOUBLE: ClassName DOUBLE_ARRAY val DOUBLE_ARRAY: ClassName DYNAMIC Dynamic is a singleton object type, so this is a shorthand for it in Java. val DYNAMIC: Dynamic ENUM val ENUM: ClassName FLOAT val FLOAT: ClassName FLOAT_ARRAY val FLOAT_ARRAY: ClassName INT val INT: ClassName INT_ARRAY val INT_ARRAY: ClassName ITERABLE val ITERABLE: ClassName LIST val LIST: ClassName LONG val LONG: ClassName LONG_ARRAY val LONG_ARRAY: ClassName MAP val MAP: ClassName MAP_ENTRY val MAP_ENTRY: ClassName MUTABLE_COLLECTION val MUTABLE_COLLECTION: ClassName MUTABLE_ITERABLE val MUTABLE_ITERABLE: ClassName MUTABLE_LIST val MUTABLE_LIST: ClassName MUTABLE_MAP val MUTABLE_MAP: ClassName MUTABLE_MAP_ENTRY val MUTABLE_MAP_ENTRY: ClassName MUTABLE_SET val MUTABLE_SET: ClassName NOTHING val NOTHING: ClassName NUMBER val NUMBER: ClassName SET val SET: ClassName SHORT val SHORT: ClassName SHORT_ARRAY val SHORT_ARRAY: ClassName STAR The wildcard type * which is shorthand for out Any? . val STAR: WildcardTypeName STRING val STRING: ClassName THROWABLE val THROWABLE: ClassName U_BYTE val U_BYTE: ClassName U_BYTE_ARRAY val U_BYTE_ARRAY: ClassName U_INT val U_INT: ClassName U_INT_ARRAY val U_INT_ARRAY: ClassName U_LONG val U_LONG: ClassName U_LONG_ARRAY val U_LONG_ARRAY: ClassName U_SHORT val U_SHORT: ClassName U_SHORT_ARRAY val U_SHORT_ARRAY: ClassName UNIT val UNIT: ClassName Functions \u00b6 Name Summary buildCodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock . fun buildCodeBlock(builderAction: Builder.() -> Unit ): CodeBlock tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T? Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder typeNameOf fun <T> typeNameOf(): TypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#package-comsquareupkotlinpoet","text":"","title":"Package com.squareup.kotlinpoet"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#types","text":"Name Summary AnnotationSpec A generated annotation on a declaration. class AnnotationSpec : Taggable ClassName A fully-qualified class name for top-level and member classes. class ClassName : TypeName , Comparable < ClassName > CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! class CodeBlock Dynamic object Dynamic : TypeName FileSpec A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. class FileSpec : Taggable FunSpec A generated function declaration. class FunSpec : Taggable , OriginatingElementsHolder Import data class Import : Comparable < Import > KModifier enum class KModifier KOperator enum class KOperator LambdaTypeName class LambdaTypeName : TypeName MemberName Represents the name of a member (such as a function or a property). data class MemberName NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: class NameAllocator OriginatingElementsHolder A type that can have originating elements . interface OriginatingElementsHolder ParameterizedTypeName class ParameterizedTypeName : TypeName ParameterSpec A generated parameter declaration. class ParameterSpec : Taggable PropertySpec A generated property declaration. class PropertySpec : Taggable , OriginatingElementsHolder Taggable A type that can be tagged with extra metadata of the user\u2019s choice. interface Taggable TypeAliasSpec A generated typealias declaration class TypeAliasSpec : Taggable TypeName Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . sealed class TypeName : Taggable TypeSpec A generated class, interface, or enum declaration. class TypeSpec : Taggable , OriginatingElementsHolder TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#extensions-for-external-classes","text":"Name Summary java.lang.Class java.lang.reflect.ParameterizedType java.lang.reflect.Type java.lang.reflect.WildcardType javax.lang.model.element.TypeElement javax.lang.model.element.TypeParameterElement javax.lang.model.type.TypeMirror javax.lang.model.type.TypeVariable javax.lang.model.type.WildcardType kotlin.collections.Collection kotlin.reflect.KClass kotlin.reflect.KType kotlin.reflect.KTypeParameter","title":"Extensions for External Classes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#properties","text":"Name Summary ANNOTATION val ANNOTATION: ClassName ANY val ANY: ClassName ARRAY val ARRAY: ClassName BOOLEAN val BOOLEAN: ClassName BOOLEAN_ARRAY val BOOLEAN_ARRAY: ClassName BYTE val BYTE: ClassName BYTE_ARRAY val BYTE_ARRAY: ClassName CHAR val CHAR: ClassName CHAR_ARRAY val CHAR_ARRAY: ClassName CHAR_SEQUENCE val CHAR_SEQUENCE: ClassName COLLECTION val COLLECTION: ClassName COMPARABLE val COMPARABLE: ClassName DOUBLE val DOUBLE: ClassName DOUBLE_ARRAY val DOUBLE_ARRAY: ClassName DYNAMIC Dynamic is a singleton object type, so this is a shorthand for it in Java. val DYNAMIC: Dynamic ENUM val ENUM: ClassName FLOAT val FLOAT: ClassName FLOAT_ARRAY val FLOAT_ARRAY: ClassName INT val INT: ClassName INT_ARRAY val INT_ARRAY: ClassName ITERABLE val ITERABLE: ClassName LIST val LIST: ClassName LONG val LONG: ClassName LONG_ARRAY val LONG_ARRAY: ClassName MAP val MAP: ClassName MAP_ENTRY val MAP_ENTRY: ClassName MUTABLE_COLLECTION val MUTABLE_COLLECTION: ClassName MUTABLE_ITERABLE val MUTABLE_ITERABLE: ClassName MUTABLE_LIST val MUTABLE_LIST: ClassName MUTABLE_MAP val MUTABLE_MAP: ClassName MUTABLE_MAP_ENTRY val MUTABLE_MAP_ENTRY: ClassName MUTABLE_SET val MUTABLE_SET: ClassName NOTHING val NOTHING: ClassName NUMBER val NUMBER: ClassName SET val SET: ClassName SHORT val SHORT: ClassName SHORT_ARRAY val SHORT_ARRAY: ClassName STAR The wildcard type * which is shorthand for out Any? . val STAR: WildcardTypeName STRING val STRING: ClassName THROWABLE val THROWABLE: ClassName U_BYTE val U_BYTE: ClassName U_BYTE_ARRAY val U_BYTE_ARRAY: ClassName U_INT val U_INT: ClassName U_INT_ARRAY val U_INT_ARRAY: ClassName U_LONG val U_LONG: ClassName U_LONG_ARRAY val U_LONG_ARRAY: ClassName U_SHORT val U_SHORT: ClassName U_SHORT_ARRAY val U_SHORT_ARRAY: ClassName UNIT val UNIT: ClassName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#functions","text":"Name Summary buildCodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock . fun buildCodeBlock(builderAction: Builder.() -> Unit ): CodeBlock tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T? Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder fun <T : Any > Builder.tag(tag: T?): Builder typeNameOf fun <T> typeNameOf(): TypeName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-n-o-t-a-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / ANNOTATION ANNOTATION \u00b6 val ANNOTATION: ClassName","title":" a n n o t a t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-n-o-t-a-t-i-o-n/#annotation","text":"val ANNOTATION: ClassName","title":"ANNOTATION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-y/","text":"kotlinpoet / com.squareup.kotlinpoet / ANY ANY \u00b6 val ANY: ClassName","title":" a n y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-y/#any","text":"val ANY: ClassName","title":"ANY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / ARRAY ARRAY \u00b6 val ARRAY: ClassName","title":" a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-r-r-a-y/#array","text":"val ARRAY: ClassName","title":"ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n/","text":"kotlinpoet / com.squareup.kotlinpoet / BOOLEAN BOOLEAN \u00b6 val BOOLEAN: ClassName","title":" b o o l e a n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n/#boolean","text":"val BOOLEAN: ClassName","title":"BOOLEAN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / BOOLEAN_ARRAY BOOLEAN_ARRAY \u00b6 val BOOLEAN_ARRAY: ClassName","title":" b o o l e a n  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n_-a-r-r-a-y/#boolean_array","text":"val BOOLEAN_ARRAY: ClassName","title":"BOOLEAN_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / BYTE BYTE \u00b6 val BYTE: ClassName","title":" b y t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e/#byte","text":"val BYTE: ClassName","title":"BYTE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / BYTE_ARRAY BYTE_ARRAY \u00b6 val BYTE_ARRAY: ClassName","title":" b y t e  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e_-a-r-r-a-y/#byte_array","text":"val BYTE_ARRAY: ClassName","title":"BYTE_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r/","text":"kotlinpoet / com.squareup.kotlinpoet / CHAR CHAR \u00b6 val CHAR: ClassName","title":" c h a r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r/#char","text":"val CHAR: ClassName","title":"CHAR"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / CHAR_ARRAY CHAR_ARRAY \u00b6 val CHAR_ARRAY: ClassName","title":" c h a r  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-a-r-r-a-y/#char_array","text":"val CHAR_ARRAY: ClassName","title":"CHAR_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-s-e-q-u-e-n-c-e/","text":"kotlinpoet / com.squareup.kotlinpoet / CHAR_SEQUENCE CHAR_SEQUENCE \u00b6 val CHAR_SEQUENCE: ClassName","title":" c h a r  s e q u e n c e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-s-e-q-u-e-n-c-e/#char_sequence","text":"val CHAR_SEQUENCE: ClassName","title":"CHAR_SEQUENCE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-l-l-e-c-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / COLLECTION COLLECTION \u00b6 val COLLECTION: ClassName","title":" c o l l e c t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-l-l-e-c-t-i-o-n/#collection","text":"val COLLECTION: ClassName","title":"COLLECTION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-m-p-a-r-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / COMPARABLE COMPARABLE \u00b6 val COMPARABLE: ClassName","title":" c o m p a r a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-m-p-a-r-a-b-l-e/#comparable","text":"val COMPARABLE: ClassName","title":"COMPARABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / DOUBLE DOUBLE \u00b6 val DOUBLE: ClassName","title":" d o u b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e/#double","text":"val DOUBLE: ClassName","title":"DOUBLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / DOUBLE_ARRAY DOUBLE_ARRAY \u00b6 val DOUBLE_ARRAY: ClassName","title":" d o u b l e  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e_-a-r-r-a-y/#double_array","text":"val DOUBLE_ARRAY: ClassName","title":"DOUBLE_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-y-n-a-m-i-c/","text":"kotlinpoet / com.squareup.kotlinpoet / DYNAMIC DYNAMIC \u00b6 val DYNAMIC: Dynamic Dynamic is a singleton object type, so this is a shorthand for it in Java.","title":" d y n a m i c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-y-n-a-m-i-c/#dynamic","text":"val DYNAMIC: Dynamic Dynamic is a singleton object type, so this is a shorthand for it in Java.","title":"DYNAMIC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-e-n-u-m/","text":"kotlinpoet / com.squareup.kotlinpoet / ENUM ENUM \u00b6 val ENUM: ClassName","title":" e n u m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-e-n-u-m/#enum","text":"val ENUM: ClassName","title":"ENUM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t/","text":"kotlinpoet / com.squareup.kotlinpoet / FLOAT FLOAT \u00b6 val FLOAT: ClassName","title":" f l o a t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t/#float","text":"val FLOAT: ClassName","title":"FLOAT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / FLOAT_ARRAY FLOAT_ARRAY \u00b6 val FLOAT_ARRAY: ClassName","title":" f l o a t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t_-a-r-r-a-y/#float_array","text":"val FLOAT_ARRAY: ClassName","title":"FLOAT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t/","text":"kotlinpoet / com.squareup.kotlinpoet / INT INT \u00b6 val INT: ClassName","title":" i n t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t/#int","text":"val INT: ClassName","title":"INT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / INT_ARRAY INT_ARRAY \u00b6 val INT_ARRAY: ClassName","title":" i n t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t_-a-r-r-a-y/#int_array","text":"val INT_ARRAY: ClassName","title":"INT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-t-e-r-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / ITERABLE ITERABLE \u00b6 val ITERABLE: ClassName","title":" i t e r a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-t-e-r-a-b-l-e/#iterable","text":"val ITERABLE: ClassName","title":"ITERABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-i-s-t/","text":"kotlinpoet / com.squareup.kotlinpoet / LIST LIST \u00b6 val LIST: ClassName","title":" l i s t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-i-s-t/#list","text":"val LIST: ClassName","title":"LIST"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / LONG LONG \u00b6 val LONG: ClassName","title":" l o n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g/#long","text":"val LONG: ClassName","title":"LONG"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / LONG_ARRAY LONG_ARRAY \u00b6 val LONG_ARRAY: ClassName","title":" l o n g  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g_-a-r-r-a-y/#long_array","text":"val LONG_ARRAY: ClassName","title":"LONG_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p/","text":"kotlinpoet / com.squareup.kotlinpoet / MAP MAP \u00b6 val MAP: ClassName","title":" m a p"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p/#map","text":"val MAP: ClassName","title":"MAP"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p_-e-n-t-r-y/","text":"kotlinpoet / com.squareup.kotlinpoet / MAP_ENTRY MAP_ENTRY \u00b6 val MAP_ENTRY: ClassName","title":" m a p  e n t r y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p_-e-n-t-r-y/#map_entry","text":"val MAP_ENTRY: ClassName","title":"MAP_ENTRY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-c-o-l-l-e-c-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_COLLECTION MUTABLE_COLLECTION \u00b6 val MUTABLE_COLLECTION: ClassName","title":" m u t a b l e  c o l l e c t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-c-o-l-l-e-c-t-i-o-n/#mutable_collection","text":"val MUTABLE_COLLECTION: ClassName","title":"MUTABLE_COLLECTION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-i-t-e-r-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_ITERABLE MUTABLE_ITERABLE \u00b6 val MUTABLE_ITERABLE: ClassName","title":" m u t a b l e  i t e r a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-i-t-e-r-a-b-l-e/#mutable_iterable","text":"val MUTABLE_ITERABLE: ClassName","title":"MUTABLE_ITERABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-l-i-s-t/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_LIST MUTABLE_LIST \u00b6 val MUTABLE_LIST: ClassName","title":" m u t a b l e  l i s t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-l-i-s-t/#mutable_list","text":"val MUTABLE_LIST: ClassName","title":"MUTABLE_LIST"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_MAP MUTABLE_MAP \u00b6 val MUTABLE_MAP: ClassName","title":" m u t a b l e  m a p"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p/#mutable_map","text":"val MUTABLE_MAP: ClassName","title":"MUTABLE_MAP"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p_-e-n-t-r-y/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_MAP_ENTRY MUTABLE_MAP_ENTRY \u00b6 val MUTABLE_MAP_ENTRY: ClassName","title":" m u t a b l e  m a p  e n t r y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p_-e-n-t-r-y/#mutable_map_entry","text":"val MUTABLE_MAP_ENTRY: ClassName","title":"MUTABLE_MAP_ENTRY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-s-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_SET MUTABLE_SET \u00b6 val MUTABLE_SET: ClassName","title":" m u t a b l e  s e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-s-e-t/#mutable_set","text":"val MUTABLE_SET: ClassName","title":"MUTABLE_SET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-o-t-h-i-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / NOTHING NOTHING \u00b6 val NOTHING: ClassName","title":" n o t h i n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-o-t-h-i-n-g/#nothing","text":"val NOTHING: ClassName","title":"NOTHING"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-u-m-b-e-r/","text":"kotlinpoet / com.squareup.kotlinpoet / NUMBER NUMBER \u00b6 val NUMBER: ClassName","title":" n u m b e r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-u-m-b-e-r/#number","text":"val NUMBER: ClassName","title":"NUMBER"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / SET SET \u00b6 val SET: ClassName","title":" s e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-e-t/#set","text":"val SET: ClassName","title":"SET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t/","text":"kotlinpoet / com.squareup.kotlinpoet / SHORT SHORT \u00b6 val SHORT: ClassName","title":" s h o r t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t/#short","text":"val SHORT: ClassName","title":"SHORT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / SHORT_ARRAY SHORT_ARRAY \u00b6 val SHORT_ARRAY: ClassName","title":" s h o r t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t_-a-r-r-a-y/#short_array","text":"val SHORT_ARRAY: ClassName","title":"SHORT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-a-r/","text":"kotlinpoet / com.squareup.kotlinpoet / STAR STAR \u00b6 val STAR: WildcardTypeName The wildcard type * which is shorthand for out Any? .","title":" s t a r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-a-r/#star","text":"val STAR: WildcardTypeName The wildcard type * which is shorthand for out Any? .","title":"STAR"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-r-i-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / STRING STRING \u00b6 val STRING: ClassName","title":" s t r i n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-r-i-n-g/#string","text":"val STRING: ClassName","title":"STRING"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-t-h-r-o-w-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / THROWABLE THROWABLE \u00b6 val THROWABLE: ClassName","title":" t h r o w a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-t-h-r-o-w-a-b-l-e/#throwable","text":"val THROWABLE: ClassName","title":"THROWABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u-n-i-t/","text":"kotlinpoet / com.squareup.kotlinpoet / UNIT UNIT \u00b6 val UNIT: ClassName","title":" u n i t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u-n-i-t/#unit","text":"val UNIT: ClassName","title":"UNIT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / U_BYTE U_BYTE \u00b6 val U_BYTE: ClassName","title":" u  b y t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e/#u_byte","text":"val U_BYTE: ClassName","title":"U_BYTE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_BYTE_ARRAY U_BYTE_ARRAY \u00b6 val U_BYTE_ARRAY: ClassName","title":" u  b y t e  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e_-a-r-r-a-y/#u_byte_array","text":"val U_BYTE_ARRAY: ClassName","title":"U_BYTE_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t/","text":"kotlinpoet / com.squareup.kotlinpoet / U_INT U_INT \u00b6 val U_INT: ClassName","title":" u  i n t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t/#u_int","text":"val U_INT: ClassName","title":"U_INT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_INT_ARRAY U_INT_ARRAY \u00b6 val U_INT_ARRAY: ClassName","title":" u  i n t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t_-a-r-r-a-y/#u_int_array","text":"val U_INT_ARRAY: ClassName","title":"U_INT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / U_LONG U_LONG \u00b6 val U_LONG: ClassName","title":" u  l o n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g/#u_long","text":"val U_LONG: ClassName","title":"U_LONG"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_LONG_ARRAY U_LONG_ARRAY \u00b6 val U_LONG_ARRAY: ClassName","title":" u  l o n g  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g_-a-r-r-a-y/#u_long_array","text":"val U_LONG_ARRAY: ClassName","title":"U_LONG_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t/","text":"kotlinpoet / com.squareup.kotlinpoet / U_SHORT U_SHORT \u00b6 val U_SHORT: ClassName","title":" u  s h o r t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t/#u_short","text":"val U_SHORT: ClassName","title":"U_SHORT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_SHORT_ARRAY U_SHORT_ARRAY \u00b6 val U_SHORT_ARRAY: ClassName","title":" u  s h o r t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t_-a-r-r-a-y/#u_short_array","text":"val U_SHORT_ARRAY: ClassName","title":"U_SHORT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/build-code-block/","text":"kotlinpoet / com.squareup.kotlinpoet / buildCodeBlock buildCodeBlock \u00b6 inline fun buildCodeBlock(builderAction: Builder.() -> Unit ): CodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock .","title":"Build code block"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/build-code-block/#buildcodeblock","text":"inline fun buildCodeBlock(builderAction: Builder.() -> Unit ): CodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock .","title":"buildCodeBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/tag/","text":"kotlinpoet / com.squareup.kotlinpoet / tag tag \u00b6 fun <reified T : Any > Taggable .tag(): T? Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . Use this API to attach debugging or other application data to a spec so that you may read it in other APIs or callbacks.","title":"Tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/tag/#tag","text":"fun <reified T : Any > Taggable .tag(): T? Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder fun <reified T : Any > Builder.tag(tag: T?): Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . Use this API to attach debugging or other application data to a spec so that you may read it in other APIs or callbacks.","title":"tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/type-name-of/","text":"kotlinpoet / com.squareup.kotlinpoet / typeNameOf typeNameOf \u00b6 @ExperimentalStdlibApi fun <reified T> typeNameOf(): TypeName","title":"Type name of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/type-name-of/#typenameof","text":"@ExperimentalStdlibApi fun <reified T> typeNameOf(): TypeName","title":"typeNameOf"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec AnnotationSpec \u00b6 class AnnotationSpec : Taggable A generated annotation on a declaration. Types \u00b6 Name Summary Builder class Builder : Builder<Builder> UseSiteTarget enum class UseSiteTarget Properties \u00b6 Name Summary className val ~~className~~: ClassName members val members: List < CodeBlock > typeName val typeName: TypeName useSiteTarget val useSiteTarget: UseSiteTarget? Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): Builder toString fun toString(): String Companion Object Functions \u00b6 Name Summary builder fun builder(type: ClassName ): Builder fun builder(type: ParameterizedTypeName ): Builder fun builder(type: Class <out Annotation >): Builder fun builder(type: KClass <out Annotation >): Builder get fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec fun ~~get~~(annotation: AnnotationMirror ): AnnotationSpec Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#annotationspec","text":"class AnnotationSpec : Taggable A generated annotation on a declaration.","title":"AnnotationSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#types","text":"Name Summary Builder class Builder : Builder<Builder> UseSiteTarget enum class UseSiteTarget","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#properties","text":"Name Summary className val ~~className~~: ClassName members val members: List < CodeBlock > typeName val typeName: TypeName useSiteTarget val useSiteTarget: UseSiteTarget?","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#companion-object-functions","text":"Name Summary builder fun builder(type: ClassName ): Builder fun builder(type: ParameterizedTypeName ): Builder fun builder(type: Class <out Annotation >): Builder fun builder(type: KClass <out Annotation >): Builder get fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec fun ~~get~~(annotation: AnnotationMirror ): AnnotationSpec","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / builder builder \u00b6 @JvmStatic fun builder(type: ClassName ): Builder @JvmStatic fun builder(type: ParameterizedTypeName ): Builder @JvmStatic fun builder(type: Class <out Annotation >): Builder @JvmStatic fun builder(type: KClass <out Annotation >): Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/builder/#builder","text":"@JvmStatic fun builder(type: ClassName ): Builder @JvmStatic fun builder(type: ParameterizedTypeName ): Builder @JvmStatic fun builder(type: Class <out Annotation >): Builder @JvmStatic fun builder(type: KClass <out Annotation >): Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / className className \u00b6 val ~~className~~: ClassName Deprecated: Use typeName instead. This property will be removed in KotlinPoet 2.0.","title":"Class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/class-name/#classname","text":"val ~~className~~: ClassName Deprecated: Use typeName instead. This property will be removed in KotlinPoet 2.0.","title":"className"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/get/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / get get \u00b6 @JvmStatic @JvmOverloads fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec @JvmStatic fun ~~get~~(annotation: AnnotationMirror ): AnnotationSpec Deprecated: Mirror APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/get/#get","text":"@JvmStatic @JvmOverloads fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec @JvmStatic fun ~~get~~(annotation: AnnotationMirror ): AnnotationSpec Deprecated: Mirror APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/members/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / members members \u00b6 val members: List < CodeBlock >","title":"Members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/members/#members","text":"val members: List < CodeBlock >","title":"members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / toBuilder toBuilder \u00b6 fun toBuilder(): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-builder/#tobuilder","text":"fun toBuilder(): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / typeName typeName \u00b6 val typeName: TypeName","title":"Type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/type-name/#typename","text":"val typeName: TypeName","title":"typeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/use-site-target/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / useSiteTarget useSiteTarget \u00b6 val useSiteTarget: UseSiteTarget?","title":"Use site target"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/use-site-target/#usesitetarget","text":"val useSiteTarget: UseSiteTarget?","title":"useSiteTarget"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder Builder \u00b6 class Builder : Builder<Builder> Properties \u00b6 Name Summary members val members: MutableList < CodeBlock > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > Functions \u00b6 Name Summary addMember fun addMember(format: String , vararg args: Any ): Builder fun addMember(codeBlock: CodeBlock ): Builder build fun build(): AnnotationSpec useSiteTarget fun useSiteTarget(useSiteTarget: UseSiteTarget?): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#builder","text":"class Builder : Builder<Builder>","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#properties","text":"Name Summary members val members: MutableList < CodeBlock > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#functions","text":"Name Summary addMember fun addMember(format: String , vararg args: Any ): Builder fun addMember(codeBlock: CodeBlock ): Builder build fun build(): AnnotationSpec useSiteTarget fun useSiteTarget(useSiteTarget: UseSiteTarget?): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/add-member/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / addMember addMember \u00b6 fun addMember(format: String , vararg args: Any ): Builder fun addMember(codeBlock: CodeBlock ): Builder","title":"Add member"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/add-member/#addmember","text":"fun addMember(format: String , vararg args: Any ): Builder fun addMember(codeBlock: CodeBlock ): Builder","title":"addMember"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / build build \u00b6 fun build(): AnnotationSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/build/#build","text":"fun build(): AnnotationSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/members/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / members members \u00b6 val members: MutableList < CodeBlock >","title":"Members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/members/#members","text":"val members: MutableList < CodeBlock >","title":"members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / tags tags \u00b6 val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/tags/#tags","text":"val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/use-site-target/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / useSiteTarget useSiteTarget \u00b6 fun useSiteTarget(useSiteTarget: UseSiteTarget?): Builder","title":"Use site target"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/use-site-target/#usesitetarget","text":"fun useSiteTarget(useSiteTarget: UseSiteTarget?): Builder","title":"useSiteTarget"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget UseSiteTarget \u00b6 enum class UseSiteTarget Enum Values \u00b6 Name Summary FILE PROPERTY FIELD GET SET RECEIVER PARAM SETPARAM DELEGATE","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/#usesitetarget","text":"enum class UseSiteTarget","title":"UseSiteTarget"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/#enum-values","text":"Name Summary FILE PROPERTY FIELD GET SET RECEIVER PARAM SETPARAM DELEGATE","title":"Enum Values"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-d-e-l-e-g-a-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / DELEGATE DELEGATE \u00b6 DELEGATE","title":" d e l e g a t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-d-e-l-e-g-a-t-e/#delegate","text":"DELEGATE","title":"DELEGATE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-e-l-d/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / FIELD FIELD \u00b6 FIELD","title":" f i e l d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-e-l-d/#field","text":"FIELD","title":"FIELD"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / FILE FILE \u00b6 FILE","title":" f i l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-l-e/#file","text":"FILE","title":"FILE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-g-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / GET GET \u00b6 GET","title":" g e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-g-e-t/#get","text":"GET","title":"GET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-a-r-a-m/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / PARAM PARAM \u00b6 PARAM","title":" p a r a m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-a-r-a-m/#param","text":"PARAM","title":"PARAM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-r-o-p-e-r-t-y/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / PROPERTY PROPERTY \u00b6 PROPERTY","title":" p r o p e r t y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-r-o-p-e-r-t-y/#property","text":"PROPERTY","title":"PROPERTY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-r-e-c-e-i-v-e-r/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / RECEIVER RECEIVER \u00b6 RECEIVER","title":" r e c e i v e r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-r-e-c-e-i-v-e-r/#receiver","text":"RECEIVER","title":"RECEIVER"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t-p-a-r-a-m/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / SETPARAM SETPARAM \u00b6 SETPARAM","title":" s e t p a r a m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t-p-a-r-a-m/#setparam","text":"SETPARAM","title":"SETPARAM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / SET SET \u00b6 SET","title":" s e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t/#set","text":"SET","title":"SET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName ClassName \u00b6 class ClassName : TypeName , Comparable < ClassName > A fully-qualified class name for top-level and member classes. Constructors \u00b6 Name Summary <init> Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry . ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) ClassName(packageName: String , vararg simpleNames: String ) ClassName(packageName: String , simpleNames: List < String >) Properties \u00b6 Name Summary canonicalName Fully qualified name using . as a separator, like kotlin.collections.Map.Entry . val canonicalName: String packageName Package name, like \"kotlin.collections\" for Map.Entry . val packageName: String simpleName Simple name of this class, like \"Entry\" for Map.Entry . val simpleName: String simpleNames The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry . val simpleNames: List < String > Functions \u00b6 Name Summary compareTo Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: fun compareTo(other: ClassName ): Int constructorReference Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. fun constructorReference(): CodeBlock copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ClassName enclosingClassName Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class. fun enclosingClassName(): ClassName ? nestedClass Returns a new ClassName instance for the specified name as nested inside this class. fun nestedClass(name: String ): ClassName peerClass Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) . fun peerClass(name: String ): ClassName reflectionName Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry . fun reflectionName(): String topLevelClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result\u2019s enclosing class is null. fun topLevelClassName(): ClassName Companion Object Functions \u00b6 Name Summary bestGuess Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions. fun bestGuess(classNameString: String ): ClassName Extension Functions \u00b6 Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#classname","text":"class ClassName : TypeName , Comparable < ClassName > A fully-qualified class name for top-level and member classes.","title":"ClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#constructors","text":"Name Summary <init> Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry . ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) ClassName(packageName: String , vararg simpleNames: String ) ClassName(packageName: String , simpleNames: List < String >)","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#properties","text":"Name Summary canonicalName Fully qualified name using . as a separator, like kotlin.collections.Map.Entry . val canonicalName: String packageName Package name, like \"kotlin.collections\" for Map.Entry . val packageName: String simpleName Simple name of this class, like \"Entry\" for Map.Entry . val simpleName: String simpleNames The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry . val simpleNames: List < String >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#functions","text":"Name Summary compareTo Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: fun compareTo(other: ClassName ): Int constructorReference Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. fun constructorReference(): CodeBlock copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ClassName enclosingClassName Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class. fun enclosingClassName(): ClassName ? nestedClass Returns a new ClassName instance for the specified name as nested inside this class. fun nestedClass(name: String ): ClassName peerClass Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) . fun peerClass(name: String ): ClassName reflectionName Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry . fun reflectionName(): String topLevelClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result\u2019s enclosing class is null. fun topLevelClassName(): ClassName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#companion-object-functions","text":"Name Summary bestGuess Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions. fun bestGuess(classNameString: String ): ClassName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / <init> <init> \u00b6 ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) ClassName(packageName: String , vararg simpleNames: String ) ClassName(packageName: String , simpleNames: List < String >) Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry .","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/-init-/#init","text":"ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) ClassName(packageName: String , vararg simpleNames: String ) ClassName(packageName: String , simpleNames: List < String >) Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry .","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/best-guess/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / bestGuess bestGuess \u00b6 @JvmStatic fun bestGuess(classNameString: String ): ClassName Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions.","title":"Best guess"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/best-guess/#bestguess","text":"@JvmStatic fun bestGuess(classNameString: String ): ClassName Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions.","title":"bestGuess"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/canonical-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / canonicalName canonicalName \u00b6 val canonicalName: String Fully qualified name using . as a separator, like kotlin.collections.Map.Entry .","title":"Canonical name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/canonical-name/#canonicalname","text":"val canonicalName: String Fully qualified name using . as a separator, like kotlin.collections.Map.Entry .","title":"canonicalName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/compare-to/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / compareTo compareTo \u00b6 fun compareTo(other: ClassName ): Int Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: com.example.Robot com.example.Robot.Motor com.example.RoboticVacuum","title":"Compare to"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/compare-to/#compareto","text":"fun compareTo(other: ClassName ): Int Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: com.example.Robot com.example.Robot.Motor com.example.RoboticVacuum","title":"compareTo"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/constructor-reference/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / constructorReference constructorReference \u00b6 fun constructorReference(): CodeBlock Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level class with a conflicting name.","title":"Constructor reference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/constructor-reference/#constructorreference","text":"fun constructorReference(): CodeBlock Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level class with a conflicting name.","title":"constructorReference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / copy copy \u00b6 fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ClassName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ClassName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/enclosing-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / enclosingClassName enclosingClassName \u00b6 fun enclosingClassName(): ClassName ? Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class.","title":"Enclosing class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/enclosing-class-name/#enclosingclassname","text":"fun enclosingClassName(): ClassName ? Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class.","title":"enclosingClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/nested-class/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / nestedClass nestedClass \u00b6 fun nestedClass(name: String ): ClassName Returns a new ClassName instance for the specified name as nested inside this class.","title":"Nested class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/nested-class/#nestedclass","text":"fun nestedClass(name: String ): ClassName Returns a new ClassName instance for the specified name as nested inside this class.","title":"nestedClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / packageName packageName \u00b6 val packageName: String Package name, like \"kotlin.collections\" for Map.Entry .","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/package-name/#packagename","text":"val packageName: String Package name, like \"kotlin.collections\" for Map.Entry .","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/peer-class/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / peerClass peerClass \u00b6 fun peerClass(name: String ): ClassName Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) .","title":"Peer class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/peer-class/#peerclass","text":"fun peerClass(name: String ): ClassName Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) .","title":"peerClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/reflection-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / reflectionName reflectionName \u00b6 fun reflectionName(): String Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry .","title":"Reflection name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/reflection-name/#reflectionname","text":"fun reflectionName(): String Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry .","title":"reflectionName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / simpleName simpleName \u00b6 val simpleName: String Simple name of this class, like \"Entry\" for Map.Entry .","title":"Simple name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-name/#simplename","text":"val simpleName: String Simple name of this class, like \"Entry\" for Map.Entry .","title":"simpleName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-names/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / simpleNames simpleNames \u00b6 val simpleNames: List < String > The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry .","title":"Simple names"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-names/#simplenames","text":"val simpleNames: List < String > The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry .","title":"simpleNames"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/top-level-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / topLevelClassName topLevelClassName \u00b6 fun topLevelClassName(): ClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result\u2019s enclosing class is null.","title":"Top level class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/top-level-class-name/#toplevelclassname","text":"fun topLevelClassName(): ClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result\u2019s enclosing class is null.","title":"topLevelClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock CodeBlock \u00b6 class CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! Code blocks support placeholders like java.text.Format . This class primarily uses a percent sign % but has its own set of permitted placeholders: %L emits a literal value with no escaping. Arguments for literals may be strings, primitives, type declarations , annotations and even other code blocks. %N emits a name , using name collision avoidance where necessary. Arguments for names may be strings (actually any character sequence ), parameters , properties , functions , and types . %S escapes the value as a string , wraps it with double quotes, and emits that. For example, 6\" sandwich is emitted \"6\\\" sandwich\" . %S will also escape all dollar signs ( $ ), use %P for string templates. %P - Similar to %S , but doesn\u2019t escape dollar signs ( $ ) to allow creation of string templates. If the string contains dollar signs that should be escaped - use %S . %T emits a type reference. Types will be imported if possible. Arguments for types may be classes . %M emits a member reference. A member is either a function or a property. If the member is importable, e.g. it\u2019s a top-level function or a property declared inside an object, the import will be resolved if possible. Arguments for members must be of type MemberName . %% emits a percent sign. \u00b7 emits a space that never wraps. KotlinPoet prefers to wrap lines longer than 100 columns. It does this by replacing normal spaces with a newline and indent. Note that spaces in strings are never wrapped. \u21e5 increases the indentation level. \u21e4 decreases the indentation level. \u00ab begins a statement. For multiline statements, every line after the first line is double-indented. \u00bb ends a statement. Types \u00b6 Name Summary Builder class Builder Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty A heterogeneous list containing string literals and value placeholders. fun isEmpty(): Boolean isNotEmpty fun isNotEmpty(): Boolean toBuilder fun toBuilder(): Builder toString fun toString(): String Companion Object Functions \u00b6 Name Summary builder fun builder(): Builder of fun of(format: String , vararg args: Any ?): CodeBlock","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#codeblock","text":"class CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! Code blocks support placeholders like java.text.Format . This class primarily uses a percent sign % but has its own set of permitted placeholders: %L emits a literal value with no escaping. Arguments for literals may be strings, primitives, type declarations , annotations and even other code blocks. %N emits a name , using name collision avoidance where necessary. Arguments for names may be strings (actually any character sequence ), parameters , properties , functions , and types . %S escapes the value as a string , wraps it with double quotes, and emits that. For example, 6\" sandwich is emitted \"6\\\" sandwich\" . %S will also escape all dollar signs ( $ ), use %P for string templates. %P - Similar to %S , but doesn\u2019t escape dollar signs ( $ ) to allow creation of string templates. If the string contains dollar signs that should be escaped - use %S . %T emits a type reference. Types will be imported if possible. Arguments for types may be classes . %M emits a member reference. A member is either a function or a property. If the member is importable, e.g. it\u2019s a top-level function or a property declared inside an object, the import will be resolved if possible. Arguments for members must be of type MemberName . %% emits a percent sign. \u00b7 emits a space that never wraps. KotlinPoet prefers to wrap lines longer than 100 columns. It does this by replacing normal spaces with a newline and indent. Note that spaces in strings are never wrapped. \u21e5 increases the indentation level. \u21e4 decreases the indentation level. \u00ab begins a statement. For multiline statements, every line after the first line is double-indented. \u00bb ends a statement.","title":"CodeBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty A heterogeneous list containing string literals and value placeholders. fun isEmpty(): Boolean isNotEmpty fun isNotEmpty(): Boolean toBuilder fun toBuilder(): Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#companion-object-functions","text":"Name Summary builder fun builder(): Builder of fun of(format: String , vararg args: Any ?): CodeBlock","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / builder builder \u00b6 @JvmStatic fun builder(): Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/builder/#builder","text":"@JvmStatic fun builder(): Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / isEmpty isEmpty \u00b6 fun isEmpty(): Boolean A heterogeneous list containing string literals and value placeholders.","title":"Is empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-empty/#isempty","text":"fun isEmpty(): Boolean A heterogeneous list containing string literals and value placeholders.","title":"isEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-not-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / isNotEmpty isNotEmpty \u00b6 fun isNotEmpty(): Boolean","title":"Is not empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-not-empty/#isnotempty","text":"fun isNotEmpty(): Boolean","title":"isNotEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/of/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / of of \u00b6 @JvmStatic fun of(format: String , vararg args: Any ?): CodeBlock","title":"Of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/of/#of","text":"@JvmStatic fun of(format: String , vararg args: Any ?): CodeBlock","title":"of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / toBuilder toBuilder \u00b6 fun toBuilder(): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-builder/#tobuilder","text":"fun toBuilder(): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary add Add code with positional or relative arguments. fun add(format: String , vararg args: Any ?): Builder``fun add(codeBlock: CodeBlock ): Builder addNamed Adds code using named arguments. fun addNamed(format: String , arguments: Map < String , *>): Builder addStatement fun addStatement(format: String , vararg args: Any ?): Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ?): Builder build fun build(): CodeBlock clear fun clear(): Builder endControlFlow fun endControlFlow(): Builder indent fun indent(): Builder isEmpty fun isEmpty(): Boolean isNotEmpty fun isNotEmpty(): Boolean nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ?): Builder unindent fun unindent(): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/#functions","text":"Name Summary add Add code with positional or relative arguments. fun add(format: String , vararg args: Any ?): Builder``fun add(codeBlock: CodeBlock ): Builder addNamed Adds code using named arguments. fun addNamed(format: String , arguments: Map < String , *>): Builder addStatement fun addStatement(format: String , vararg args: Any ?): Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ?): Builder build fun build(): CodeBlock clear fun clear(): Builder endControlFlow fun endControlFlow(): Builder indent fun indent(): Builder isEmpty fun isEmpty(): Boolean isNotEmpty fun isNotEmpty(): Boolean nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ?): Builder unindent fun unindent(): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-named/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / addNamed addNamed \u00b6 fun addNamed(format: String , arguments: Map < String , *>): Builder Adds code using named arguments. Named arguments specify their name after the \u2018%\u2019 followed by : and the corresponding type character. Argument names consist of characters in a-z, A-Z, 0-9, and _ and must start with a lowercase character. For example, to refer to the type java.lang.Integer with the argument name clazz use a format string containing %clazz:T and include the key clazz with value java.lang.Integer.class in the argument map.","title":"Add named"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-named/#addnamed","text":"fun addNamed(format: String , arguments: Map < String , *>): Builder Adds code using named arguments. Named arguments specify their name after the \u2018%\u2019 followed by : and the corresponding type character. Argument names consist of characters in a-z, A-Z, 0-9, and _ and must start with a lowercase character. For example, to refer to the type java.lang.Integer with the argument name clazz use a format string containing %clazz:T and include the key clazz with value java.lang.Integer.class in the argument map.","title":"addNamed"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-statement/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / addStatement addStatement \u00b6 fun addStatement(format: String , vararg args: Any ?): Builder","title":"Add statement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-statement/#addstatement","text":"fun addStatement(format: String , vararg args: Any ?): Builder","title":"addStatement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / add add \u00b6 fun add(format: String , vararg args: Any ?): Builder Add code with positional or relative arguments. Relative arguments map 1:1 with the placeholders in the format string. Positional arguments use an index after the placeholder to identify which argument index to use. For example, for a literal to reference the 3 rd argument: \u201c%3L\u201d (1 based index) Mixing relative and positional arguments in a call to add is invalid and will result in an error. fun add(codeBlock: CodeBlock ): Builder","title":"Add"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add/#add","text":"fun add(format: String , vararg args: Any ?): Builder Add code with positional or relative arguments. Relative arguments map 1:1 with the placeholders in the format string. Positional arguments use an index after the placeholder to identify which argument index to use. For example, for a literal to reference the 3 rd argument: \u201c%3L\u201d (1 based index) Mixing relative and positional arguments in a call to add is invalid and will result in an error. fun add(codeBlock: CodeBlock ): Builder","title":"add"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/begin-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / beginControlFlow beginControlFlow \u00b6 fun beginControlFlow(controlFlow: String , vararg args: Any ?): Builder Parameters \u00b6 controlFlow - the control flow construct and its code, such as if (foo == 5) . Shouldn\u2019t contain newline characters. Can contain opening braces, e.g. beginControlFlow(\"list.forEach { element ->\") . If there\u2019s no opening brace at the end of the string, it will be added.","title":"Begin control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/begin-control-flow/#begincontrolflow","text":"fun beginControlFlow(controlFlow: String , vararg args: Any ?): Builder","title":"beginControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/begin-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as if (foo == 5) . Shouldn\u2019t contain newline characters. Can contain opening braces, e.g. beginControlFlow(\"list.forEach { element ->\") . If there\u2019s no opening brace at the end of the string, it will be added.","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / build build \u00b6 fun build(): CodeBlock","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/build/#build","text":"fun build(): CodeBlock","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/clear/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / clear clear \u00b6 fun clear(): Builder","title":"Clear"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/clear/#clear","text":"fun clear(): Builder","title":"clear"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/end-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / endControlFlow endControlFlow \u00b6 fun endControlFlow(): Builder","title":"End control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/end-control-flow/#endcontrolflow","text":"fun endControlFlow(): Builder","title":"endControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/indent/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / indent indent \u00b6 fun indent(): Builder","title":"Indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/indent/#indent","text":"fun indent(): Builder","title":"indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / isEmpty isEmpty \u00b6 fun isEmpty(): Boolean","title":"Is empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-empty/#isempty","text":"fun isEmpty(): Boolean","title":"isEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-not-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / isNotEmpty isNotEmpty \u00b6 fun isNotEmpty(): Boolean","title":"Is not empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-not-empty/#isnotempty","text":"fun isNotEmpty(): Boolean","title":"isNotEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/next-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / nextControlFlow nextControlFlow \u00b6 fun nextControlFlow(controlFlow: String , vararg args: Any ?): Builder Parameters \u00b6 controlFlow - the control flow construct and its code, such as \u201celse if (foo == 10)\u201d. Shouldn\u2019t contain braces or newline characters.","title":"Next control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/next-control-flow/#nextcontrolflow","text":"fun nextControlFlow(controlFlow: String , vararg args: Any ?): Builder","title":"nextControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/next-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as \u201celse if (foo == 10)\u201d. Shouldn\u2019t contain braces or newline characters.","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/unindent/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / unindent unindent \u00b6 fun unindent(): Builder","title":"Unindent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/unindent/#unindent","text":"fun unindent(): Builder","title":"unindent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/","text":"kotlinpoet / com.squareup.kotlinpoet / Dynamic Dynamic \u00b6 object Dynamic : TypeName Functions \u00b6 Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): Nothing Extension Functions \u00b6 Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#dynamic","text":"object Dynamic : TypeName","title":"Dynamic"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): Nothing","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / Dynamic / copy copy \u00b6 fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): Nothing","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): Nothing","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec FileSpec \u00b6 class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. Items are output in the following order: Comment Annotations Package Imports Members Types \u00b6 Name Summary Builder class Builder : Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: List < AnnotationSpec > comment val comment: CodeBlock members val members: List < Any > name val name: String packageName val packageName: String Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(packageName: String = this.packageName, name: String = this.name): Builder toJavaFileObject fun toJavaFileObject(): JavaFileObject toString fun toString(): String writeTo fun writeTo(out: Appendable ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to filer . fun writeTo(filer: Filer ): Unit Companion Object Functions \u00b6 Name Summary builder fun builder(packageName: String , fileName: String ): Builder get fun get(packageName: String , typeSpec: TypeSpec ): FileSpec Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#filespec","text":"class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. Items are output in the following order: Comment Annotations Package Imports Members","title":"FileSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#types","text":"Name Summary Builder class Builder : Builder<Builder>","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#properties","text":"Name Summary annotations val annotations: List < AnnotationSpec > comment val comment: CodeBlock members val members: List < Any > name val name: String packageName val packageName: String","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(packageName: String = this.packageName, name: String = this.name): Builder toJavaFileObject fun toJavaFileObject(): JavaFileObject toString fun toString(): String writeTo fun writeTo(out: Appendable ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to filer . fun writeTo(filer: Filer ): Unit","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#companion-object-functions","text":"Name Summary builder fun builder(packageName: String , fileName: String ): Builder get fun get(packageName: String , typeSpec: TypeSpec ): FileSpec","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / annotations annotations \u00b6 val annotations: List < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/annotations/#annotations","text":"val annotations: List < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / builder builder \u00b6 @JvmStatic fun builder(packageName: String , fileName: String ): Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/builder/#builder","text":"@JvmStatic fun builder(packageName: String , fileName: String ): Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/comment/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / comment comment \u00b6 val comment: CodeBlock","title":"Comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/comment/#comment","text":"val comment: CodeBlock","title":"comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/get/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / get get \u00b6 @JvmStatic fun get(packageName: String , typeSpec: TypeSpec ): FileSpec","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/get/#get","text":"@JvmStatic fun get(packageName: String , typeSpec: TypeSpec ): FileSpec","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/members/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / members members \u00b6 val members: List < Any >","title":"Members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/members/#members","text":"val members: List < Any >","title":"members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / name name \u00b6 val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / packageName packageName \u00b6 val packageName: String","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/package-name/#packagename","text":"val packageName: String","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / toBuilder toBuilder \u00b6 @JvmOverloads fun toBuilder(packageName: String = this.packageName, name: String = this.name): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-builder/#tobuilder","text":"@JvmOverloads fun toBuilder(packageName: String = this.packageName, name: String = this.name): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-java-file-object/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / toJavaFileObject toJavaFileObject \u00b6 fun toJavaFileObject(): JavaFileObject","title":"To java file object"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-java-file-object/#tojavafileobject","text":"fun toJavaFileObject(): JavaFileObject","title":"toJavaFileObject"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/write-to/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / writeTo writeTo \u00b6 fun writeTo(out: Appendable ): Unit fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(filer: Filer ): Unit Writes this to filer .","title":"Write to"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/write-to/#writeto","text":"fun writeTo(out: Appendable ): Unit fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(filer: Filer ): Unit Writes this to filer .","title":"writeTo"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder Builder \u00b6 class Builder : Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: MutableList < AnnotationSpec > imports val imports: List < Import > members val members: MutableList < Any > name val name: String packageName val packageName: String tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > Functions \u00b6 Name Summary addAliasedImport fun addAliasedImport(class: Class <*>, as: String ): Builder fun addAliasedImport(class: KClass <*>, as: String ): Builder fun addAliasedImport(className: ClassName , as: String ): Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): Builder fun addAliasedImport(memberName: MemberName , as: String ): Builder addAnnotation Add an annotation to the file. fun addAnnotation(annotationSpec: AnnotationSpec ): Builder``fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addComment fun addComment(format: String , vararg args: Any ): Builder addFunction fun addFunction(funSpec: FunSpec ): Builder addImport fun addImport(constant: Enum <*>): Builder fun addImport(class: Class <*>, vararg names: String ): Builder fun addImport(class: KClass <*>, vararg names: String ): Builder fun addImport(className: ClassName , vararg names: String ): Builder fun addImport(class: Class <*>, names: Iterable < String >): Builder fun addImport(class: KClass <*>, names: Iterable < String >): Builder fun addImport(className: ClassName , names: Iterable < String >): Builder fun addImport(packageName: String , vararg names: String ): Builder fun addImport(packageName: String , names: Iterable < String >): Builder fun addImport(import: Import ): Builder addProperty fun addProperty(propertySpec: PropertySpec ): Builder addType fun addType(typeSpec: TypeSpec ): Builder addTypeAlias fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): Builder build fun build(): FileSpec clearComment fun clearComment(): Builder clearImports fun clearImports(): Builder indent fun indent(indent: String ): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#builder","text":"class Builder : Builder<Builder>","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList < AnnotationSpec > imports val imports: List < Import > members val members: MutableList < Any > name val name: String packageName val packageName: String tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#functions","text":"Name Summary addAliasedImport fun addAliasedImport(class: Class <*>, as: String ): Builder fun addAliasedImport(class: KClass <*>, as: String ): Builder fun addAliasedImport(className: ClassName , as: String ): Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): Builder fun addAliasedImport(memberName: MemberName , as: String ): Builder addAnnotation Add an annotation to the file. fun addAnnotation(annotationSpec: AnnotationSpec ): Builder``fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addComment fun addComment(format: String , vararg args: Any ): Builder addFunction fun addFunction(funSpec: FunSpec ): Builder addImport fun addImport(constant: Enum <*>): Builder fun addImport(class: Class <*>, vararg names: String ): Builder fun addImport(class: KClass <*>, vararg names: String ): Builder fun addImport(className: ClassName , vararg names: String ): Builder fun addImport(class: Class <*>, names: Iterable < String >): Builder fun addImport(class: KClass <*>, names: Iterable < String >): Builder fun addImport(className: ClassName , names: Iterable < String >): Builder fun addImport(packageName: String , vararg names: String ): Builder fun addImport(packageName: String , names: Iterable < String >): Builder fun addImport(import: Import ): Builder addProperty fun addProperty(propertySpec: PropertySpec ): Builder addType fun addType(typeSpec: TypeSpec ): Builder addTypeAlias fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): Builder build fun build(): FileSpec clearComment fun clearComment(): Builder clearImports fun clearImports(): Builder indent fun indent(indent: String ): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-aliased-import/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addAliasedImport addAliasedImport \u00b6 fun addAliasedImport(class: Class <*>, as: String ): Builder fun addAliasedImport(class: KClass <*>, as: String ): Builder fun addAliasedImport(className: ClassName , as: String ): Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): Builder fun addAliasedImport(memberName: MemberName , as: String ): Builder","title":"Add aliased import"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-aliased-import/#addaliasedimport","text":"fun addAliasedImport(class: Class <*>, as: String ): Builder fun addAliasedImport(class: KClass <*>, as: String ): Builder fun addAliasedImport(className: ClassName , as: String ): Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): Builder fun addAliasedImport(memberName: MemberName , as: String ): Builder","title":"addAliasedImport"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addAnnotation addAnnotation \u00b6 fun addAnnotation(annotationSpec: AnnotationSpec ): Builder Add an annotation to the file. The annotation must either have a file use-site target or not have a use-site target specified (in which case it will be changed to file ). fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): Builder Add an annotation to the file. The annotation must either have a file use-site target or not have a use-site target specified (in which case it will be changed to file ). fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-comment/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addComment addComment \u00b6 fun addComment(format: String , vararg args: Any ): Builder","title":"Add comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-comment/#addcomment","text":"fun addComment(format: String , vararg args: Any ): Builder","title":"addComment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-function/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addFunction addFunction \u00b6 fun addFunction(funSpec: FunSpec ): Builder","title":"Add function"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-function/#addfunction","text":"fun addFunction(funSpec: FunSpec ): Builder","title":"addFunction"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-import/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addImport addImport \u00b6 fun addImport(constant: Enum <*>): Builder fun addImport(class: Class <*>, vararg names: String ): Builder fun addImport(class: KClass <*>, vararg names: String ): Builder fun addImport(className: ClassName , vararg names: String ): Builder fun addImport(class: Class <*>, names: Iterable < String >): Builder fun addImport(class: KClass <*>, names: Iterable < String >): Builder fun addImport(className: ClassName , names: Iterable < String >): Builder fun addImport(packageName: String , vararg names: String ): Builder fun addImport(packageName: String , names: Iterable < String >): Builder fun addImport(import: Import ): Builder","title":"Add import"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-import/#addimport","text":"fun addImport(constant: Enum <*>): Builder fun addImport(class: Class <*>, vararg names: String ): Builder fun addImport(class: KClass <*>, vararg names: String ): Builder fun addImport(className: ClassName , vararg names: String ): Builder fun addImport(class: Class <*>, names: Iterable < String >): Builder fun addImport(class: KClass <*>, names: Iterable < String >): Builder fun addImport(className: ClassName , names: Iterable < String >): Builder fun addImport(packageName: String , vararg names: String ): Builder fun addImport(packageName: String , names: Iterable < String >): Builder fun addImport(import: Import ): Builder","title":"addImport"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-property/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addProperty addProperty \u00b6 fun addProperty(propertySpec: PropertySpec ): Builder","title":"Add property"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-property/#addproperty","text":"fun addProperty(propertySpec: PropertySpec ): Builder","title":"addProperty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type-alias/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addTypeAlias addTypeAlias \u00b6 fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): Builder","title":"Add type alias"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type-alias/#addtypealias","text":"fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): Builder","title":"addTypeAlias"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addType addType \u00b6 fun addType(typeSpec: TypeSpec ): Builder","title":"Add type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type/#addtype","text":"fun addType(typeSpec: TypeSpec ): Builder","title":"addType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / annotations annotations \u00b6 val annotations: MutableList < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/annotations/#annotations","text":"val annotations: MutableList < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / build build \u00b6 fun build(): FileSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/build/#build","text":"fun build(): FileSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/clear-comment/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / clearComment clearComment \u00b6 fun clearComment(): Builder","title":"Clear comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/clear-comment/#clearcomment","text":"fun clearComment(): Builder","title":"clearComment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/clear-imports/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / clearImports clearImports \u00b6 fun clearImports(): Builder","title":"Clear imports"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/clear-imports/#clearimports","text":"fun clearImports(): Builder","title":"clearImports"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/imports/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / imports imports \u00b6 val imports: List < Import >","title":"Imports"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/imports/#imports","text":"val imports: List < Import >","title":"imports"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/indent/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / indent indent \u00b6 fun indent(indent: String ): Builder","title":"Indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/indent/#indent","text":"fun indent(indent: String ): Builder","title":"indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/members/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / members members \u00b6 val members: MutableList < Any >","title":"Members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/members/#members","text":"val members: MutableList < Any >","title":"members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / name name \u00b6 val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / packageName packageName \u00b6 val packageName: String","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/package-name/#packagename","text":"val packageName: String","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / tags tags \u00b6 val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/tags/#tags","text":"val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec FunSpec \u00b6 class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. Types \u00b6 Name Summary Builder class Builder : Builder<Builder>, Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: List < AnnotationSpec > body val body: CodeBlock delegateConstructor val delegateConstructor: String ? delegateConstructorArguments val delegateConstructorArguments: List < CodeBlock > isAccessor val isAccessor: Boolean isConstructor val isConstructor: Boolean kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > name val name: String parameters val parameters: List < ParameterSpec > receiverKdoc val receiverKdoc: CodeBlock receiverType val receiverType: TypeName ? returnKdoc val returnKdoc: CodeBlock returnType val returnType: TypeName ? typeVariables val typeVariables: List < TypeVariableName > Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name): Builder toString fun toString(): String Companion Object Functions \u00b6 Name Summary builder fun builder(name: String ): Builder constructorBuilder fun constructorBuilder(): Builder getterBuilder fun getterBuilder(): Builder overriding fun ~~overriding~~(method: ExecutableElement ): Builder fun ~~overriding~~(method: ExecutableElement , enclosing: DeclaredType , types: Types ): Builder setterBuilder fun setterBuilder(): Builder Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#funspec","text":"class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration.","title":"FunSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#types","text":"Name Summary Builder class Builder : Builder<Builder>, Builder<Builder>","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#properties","text":"Name Summary annotations val annotations: List < AnnotationSpec > body val body: CodeBlock delegateConstructor val delegateConstructor: String ? delegateConstructorArguments val delegateConstructorArguments: List < CodeBlock > isAccessor val isAccessor: Boolean isConstructor val isConstructor: Boolean kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > name val name: String parameters val parameters: List < ParameterSpec > receiverKdoc val receiverKdoc: CodeBlock receiverType val receiverType: TypeName ? returnKdoc val returnKdoc: CodeBlock returnType val returnType: TypeName ? typeVariables val typeVariables: List < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name): Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String ): Builder constructorBuilder fun constructorBuilder(): Builder getterBuilder fun getterBuilder(): Builder overriding fun ~~overriding~~(method: ExecutableElement ): Builder fun ~~overriding~~(method: ExecutableElement , enclosing: DeclaredType , types: Types ): Builder setterBuilder fun setterBuilder(): Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / annotations annotations \u00b6 val annotations: List < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/annotations/#annotations","text":"val annotations: List < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/body/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / body body \u00b6 val body: CodeBlock","title":"Body"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/body/#body","text":"val body: CodeBlock","title":"body"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / builder builder \u00b6 @JvmStatic fun builder(name: String ): Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/builder/#builder","text":"@JvmStatic fun builder(name: String ): Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/constructor-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / constructorBuilder constructorBuilder \u00b6 @JvmStatic fun constructorBuilder(): Builder","title":"Constructor builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/constructor-builder/#constructorbuilder","text":"@JvmStatic fun constructorBuilder(): Builder","title":"constructorBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor-arguments/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / delegateConstructorArguments delegateConstructorArguments \u00b6 val delegateConstructorArguments: List < CodeBlock >","title":"Delegate constructor arguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor-arguments/#delegateconstructorarguments","text":"val delegateConstructorArguments: List < CodeBlock >","title":"delegateConstructorArguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / delegateConstructor delegateConstructor \u00b6 val delegateConstructor: String ?","title":"Delegate constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor/#delegateconstructor","text":"val delegateConstructor: String ?","title":"delegateConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/getter-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / getterBuilder getterBuilder \u00b6 @JvmStatic fun getterBuilder(): Builder","title":"Getter builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/getter-builder/#getterbuilder","text":"@JvmStatic fun getterBuilder(): Builder","title":"getterBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-accessor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / isAccessor isAccessor \u00b6 val isAccessor: Boolean","title":"Is accessor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-accessor/#isaccessor","text":"val isAccessor: Boolean","title":"isAccessor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / isConstructor isConstructor \u00b6 val isConstructor: Boolean","title":"Is constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-constructor/#isconstructor","text":"val isConstructor: Boolean","title":"isConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / kdoc kdoc \u00b6 val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / modifiers modifiers \u00b6 val modifiers: Set < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/modifiers/#modifiers","text":"val modifiers: Set < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / name name \u00b6 val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/overriding/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / overriding overriding \u00b6 @JvmStatic fun ~~overriding~~(method: ExecutableElement ): Builder Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead. @JvmStatic fun ~~overriding~~(method: ExecutableElement , enclosing: DeclaredType , types: Types ): Builder Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"Overriding"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/overriding/#overriding","text":"@JvmStatic fun ~~overriding~~(method: ExecutableElement ): Builder Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead. @JvmStatic fun ~~overriding~~(method: ExecutableElement , enclosing: DeclaredType , types: Types ): Builder Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"overriding"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / parameters parameters \u00b6 val parameters: List < ParameterSpec >","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/parameters/#parameters","text":"val parameters: List < ParameterSpec >","title":"parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / receiverKdoc receiverKdoc \u00b6 val receiverKdoc: CodeBlock","title":"Receiver kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-kdoc/#receiverkdoc","text":"val receiverKdoc: CodeBlock","title":"receiverKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-type/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / receiverType receiverType \u00b6 val receiverType: TypeName ?","title":"Receiver type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-type/#receivertype","text":"val receiverType: TypeName ?","title":"receiverType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / returnKdoc returnKdoc \u00b6 val returnKdoc: CodeBlock","title":"Return kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-kdoc/#returnkdoc","text":"val returnKdoc: CodeBlock","title":"returnKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-type/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / returnType returnType \u00b6 val returnType: TypeName ?","title":"Return type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-type/#returntype","text":"val returnType: TypeName ?","title":"returnType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/setter-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / setterBuilder setterBuilder \u00b6 @JvmStatic fun setterBuilder(): Builder","title":"Setter builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/setter-builder/#setterbuilder","text":"@JvmStatic fun setterBuilder(): Builder","title":"setterBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / toBuilder toBuilder \u00b6 @JvmOverloads fun toBuilder(name: String = this.name): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-builder/#tobuilder","text":"@JvmOverloads fun toBuilder(name: String = this.name): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / typeVariables typeVariables \u00b6 val typeVariables: List < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/type-variables/#typevariables","text":"val typeVariables: List < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder Builder \u00b6 class Builder : Builder<Builder>, Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: MutableList < AnnotationSpec > modifiers val modifiers: MutableList < KModifier > originatingElements Mutable map of the current originating elements this builder contains. val originatingElements: MutableList < Element > parameters val parameters: MutableList < ParameterSpec > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeVariables val typeVariables: MutableList < TypeVariableName > Functions \u00b6 Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addCode fun addCode(format: String , vararg args: Any ?): Builder fun addCode(codeBlock: CodeBlock ): Builder addComment fun addComment(format: String , vararg args: Any ): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addNamedCode fun addNamedCode(format: String , args: Map < String , *>): Builder addParameter fun addParameter(parameterSpec: ParameterSpec ): Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder addParameters fun addParameters(parameterSpecs: Iterable < ParameterSpec >): Builder addStatement fun addStatement(format: String , vararg args: Any ): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ): Builder build fun build(): FunSpec callSuperConstructor fun callSuperConstructor(args: Iterable < CodeBlock >): Builder fun callSuperConstructor(args: List < CodeBlock >): Builder fun callSuperConstructor(vararg args: String ): Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): Builder callThisConstructor fun callThisConstructor(args: List < CodeBlock >): Builder fun callThisConstructor(args: Iterable < CodeBlock >): Builder fun callThisConstructor(vararg args: String ): Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): Builder clearBody fun clearBody(): Builder endControlFlow fun endControlFlow(): Builder jvmModifiers fun jvmModifiers(modifiers: Iterable < Modifier >): Unit nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ): Builder receiver fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): Builder fun receiver(receiverType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: KClass <*>, kdoc: String , vararg args: Any ): Builder returns fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): Builder fun returns(returnType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: KClass <*>, kdoc: String , vararg args: Any ): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#builder","text":"class Builder : Builder<Builder>, Builder<Builder>","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList < AnnotationSpec > modifiers val modifiers: MutableList < KModifier > originatingElements Mutable map of the current originating elements this builder contains. val originatingElements: MutableList < Element > parameters val parameters: MutableList < ParameterSpec > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeVariables val typeVariables: MutableList < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addCode fun addCode(format: String , vararg args: Any ?): Builder fun addCode(codeBlock: CodeBlock ): Builder addComment fun addComment(format: String , vararg args: Any ): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addNamedCode fun addNamedCode(format: String , args: Map < String , *>): Builder addParameter fun addParameter(parameterSpec: ParameterSpec ): Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder addParameters fun addParameters(parameterSpecs: Iterable < ParameterSpec >): Builder addStatement fun addStatement(format: String , vararg args: Any ): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ): Builder build fun build(): FunSpec callSuperConstructor fun callSuperConstructor(args: Iterable < CodeBlock >): Builder fun callSuperConstructor(args: List < CodeBlock >): Builder fun callSuperConstructor(vararg args: String ): Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): Builder callThisConstructor fun callThisConstructor(args: List < CodeBlock >): Builder fun callThisConstructor(args: Iterable < CodeBlock >): Builder fun callThisConstructor(vararg args: String ): Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): Builder clearBody fun clearBody(): Builder endControlFlow fun endControlFlow(): Builder jvmModifiers fun jvmModifiers(modifiers: Iterable < Modifier >): Unit nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ): Builder receiver fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): Builder fun receiver(receiverType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: KClass <*>, kdoc: String , vararg args: Any ): Builder returns fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): Builder fun returns(returnType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: KClass <*>, kdoc: String , vararg args: Any ): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addAnnotation addAnnotation \u00b6 fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addAnnotations addAnnotations \u00b6 fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addCode addCode \u00b6 fun addCode(format: String , vararg args: Any ?): Builder fun addCode(codeBlock: CodeBlock ): Builder","title":"Add code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-code/#addcode","text":"fun addCode(format: String , vararg args: Any ?): Builder fun addCode(codeBlock: CodeBlock ): Builder","title":"addCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-comment/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addComment addComment \u00b6 fun addComment(format: String , vararg args: Any ): Builder","title":"Add comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-comment/#addcomment","text":"fun addComment(format: String , vararg args: Any ): Builder","title":"addComment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addKdoc addKdoc \u00b6 fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addModifiers addModifiers \u00b6 fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-named-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addNamedCode addNamedCode \u00b6 fun addNamedCode(format: String , args: Map < String , *>): Builder","title":"Add named code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-named-code/#addnamedcode","text":"fun addNamedCode(format: String , args: Map < String , *>): Builder","title":"addNamedCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addParameter addParameter \u00b6 fun addParameter(parameterSpec: ParameterSpec ): Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"Add parameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameter/#addparameter","text":"fun addParameter(parameterSpec: ParameterSpec ): Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addParameter(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addParameter(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"addParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addParameters addParameters \u00b6 fun addParameters(parameterSpecs: Iterable < ParameterSpec >): Builder","title":"Add parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameters/#addparameters","text":"fun addParameters(parameterSpecs: Iterable < ParameterSpec >): Builder","title":"addParameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-statement/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addStatement addStatement \u00b6 fun addStatement(format: String , vararg args: Any ): Builder","title":"Add statement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-statement/#addstatement","text":"fun addStatement(format: String , vararg args: Any ): Builder","title":"addStatement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addTypeVariable addTypeVariable \u00b6 fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addTypeVariables addTypeVariables \u00b6 fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / annotations annotations \u00b6 val annotations: MutableList < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/annotations/#annotations","text":"val annotations: MutableList < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/begin-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / beginControlFlow beginControlFlow \u00b6 fun beginControlFlow(controlFlow: String , vararg args: Any ): Builder Parameters \u00b6 controlFlow - the control flow construct and its code, such as \u201cif (foo == 5)\u201d.","title":"Begin control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/begin-control-flow/#begincontrolflow","text":"fun beginControlFlow(controlFlow: String , vararg args: Any ): Builder","title":"beginControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/begin-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as \u201cif (foo == 5)\u201d.","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / build build \u00b6 fun build(): FunSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/build/#build","text":"fun build(): FunSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-super-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / callSuperConstructor callSuperConstructor \u00b6 fun callSuperConstructor(args: Iterable < CodeBlock >): Builder fun callSuperConstructor(args: List < CodeBlock >): Builder fun callSuperConstructor(vararg args: String ): Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): Builder","title":"Call super constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-super-constructor/#callsuperconstructor","text":"fun callSuperConstructor(args: Iterable < CodeBlock >): Builder fun callSuperConstructor(args: List < CodeBlock >): Builder fun callSuperConstructor(vararg args: String ): Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): Builder","title":"callSuperConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-this-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / callThisConstructor callThisConstructor \u00b6 fun callThisConstructor(args: List < CodeBlock >): Builder fun callThisConstructor(args: Iterable < CodeBlock >): Builder fun callThisConstructor(vararg args: String ): Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): Builder","title":"Call this constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-this-constructor/#callthisconstructor","text":"fun callThisConstructor(args: List < CodeBlock >): Builder fun callThisConstructor(args: Iterable < CodeBlock >): Builder fun callThisConstructor(vararg args: String ): Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): Builder","title":"callThisConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/clear-body/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / clearBody clearBody \u00b6 fun clearBody(): Builder","title":"Clear body"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/clear-body/#clearbody","text":"fun clearBody(): Builder","title":"clearBody"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/end-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / endControlFlow endControlFlow \u00b6 fun endControlFlow(): Builder","title":"End control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/end-control-flow/#endcontrolflow","text":"fun endControlFlow(): Builder","title":"endControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/jvm-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / jvmModifiers jvmModifiers \u00b6 fun jvmModifiers(modifiers: Iterable < Modifier >): Unit","title":"Jvm modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/jvm-modifiers/#jvmmodifiers","text":"fun jvmModifiers(modifiers: Iterable < Modifier >): Unit","title":"jvmModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / modifiers modifiers \u00b6 val modifiers: MutableList < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableList < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/next-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / nextControlFlow nextControlFlow \u00b6 fun nextControlFlow(controlFlow: String , vararg args: Any ): Builder Parameters \u00b6 controlFlow - the control flow construct and its code, such as \u201celse if (foo == 10)\u201d.","title":"Next control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/next-control-flow/#nextcontrolflow","text":"fun nextControlFlow(controlFlow: String , vararg args: Any ): Builder","title":"nextControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/next-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as \u201celse if (foo == 10)\u201d.","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / originatingElements originatingElements \u00b6 val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/originating-elements/#originatingelements","text":"val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / parameters parameters \u00b6 val parameters: MutableList < ParameterSpec >","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/parameters/#parameters","text":"val parameters: MutableList < ParameterSpec >","title":"parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/receiver/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / receiver receiver \u00b6 @JvmOverloads fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder @JvmOverloads fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): Builder @JvmOverloads fun receiver(receiverType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: KClass <*>, kdoc: String , vararg args: Any ): Builder","title":"Receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/receiver/#receiver","text":"@JvmOverloads fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder @JvmOverloads fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): Builder @JvmOverloads fun receiver(receiverType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun receiver(receiverType: KClass <*>, kdoc: String , vararg args: Any ): Builder","title":"receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/returns/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / returns returns \u00b6 @JvmOverloads fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder @JvmOverloads fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): Builder @JvmOverloads fun returns(returnType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: KClass <*>, kdoc: String , vararg args: Any ): Builder","title":"Returns"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/returns/#returns","text":"@JvmOverloads fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): Builder @JvmOverloads fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): Builder @JvmOverloads fun returns(returnType: KClass <*>, kdoc: CodeBlock = CodeBlock.EMPTY): Builder fun returns(returnType: KClass <*>, kdoc: String , vararg args: Any ): Builder","title":"returns"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / tags tags \u00b6 val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/tags/#tags","text":"val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / typeVariables typeVariables \u00b6 val typeVariables: MutableList < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableList < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/","text":"kotlinpoet / com.squareup.kotlinpoet / Import Import \u00b6 data class Import : Comparable < Import > Properties \u00b6 Name Summary alias val alias: String ? qualifiedName val qualifiedName: String Functions \u00b6 Name Summary compareTo fun compareTo(other: Import ): Int toString fun toString(): String","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/#import","text":"data class Import : Comparable < Import >","title":"Import"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/#properties","text":"Name Summary alias val alias: String ? qualifiedName val qualifiedName: String","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/#functions","text":"Name Summary compareTo fun compareTo(other: Import ): Int toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/alias/","text":"kotlinpoet / com.squareup.kotlinpoet / Import / alias alias \u00b6 val alias: String ?","title":"Alias"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/alias/#alias","text":"val alias: String ?","title":"alias"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/compare-to/","text":"kotlinpoet / com.squareup.kotlinpoet / Import / compareTo compareTo \u00b6 fun compareTo(other: Import ): Int","title":"Compare to"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/compare-to/#compareto","text":"fun compareTo(other: Import ): Int","title":"compareTo"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/qualified-name/","text":"kotlinpoet / com.squareup.kotlinpoet / Import / qualifiedName qualifiedName \u00b6 val qualifiedName: String","title":"Qualified name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/qualified-name/#qualifiedname","text":"val qualifiedName: String","title":"qualifiedName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / Import / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-import/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier KModifier \u00b6 enum class KModifier Enum Values \u00b6 Name Summary PUBLIC PROTECTED PRIVATE INTERNAL EXPECT ACTUAL FINAL OPEN ABSTRACT SEALED CONST EXTERNAL OVERRIDE LATEINIT TAILREC VARARG SUSPEND INNER ENUM ANNOTATION FUN COMPANION INLINE NOINLINE CROSSINLINE REIFIED INFIX OPERATOR DATA IN OUT","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/#kmodifier","text":"enum class KModifier","title":"KModifier"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/#enum-values","text":"Name Summary PUBLIC PROTECTED PRIVATE INTERNAL EXPECT ACTUAL FINAL OPEN ABSTRACT SEALED CONST EXTERNAL OVERRIDE LATEINIT TAILREC VARARG SUSPEND INNER ENUM ANNOTATION FUN COMPANION INLINE NOINLINE CROSSINLINE REIFIED INFIX OPERATOR DATA IN OUT","title":"Enum Values"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-b-s-t-r-a-c-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ABSTRACT ABSTRACT \u00b6 ABSTRACT","title":" a b s t r a c t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-b-s-t-r-a-c-t/#abstract","text":"ABSTRACT","title":"ABSTRACT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-c-t-u-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ACTUAL ACTUAL \u00b6 ACTUAL","title":" a c t u a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-c-t-u-a-l/#actual","text":"ACTUAL","title":"ACTUAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-n-n-o-t-a-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ANNOTATION ANNOTATION \u00b6 ANNOTATION","title":" a n n o t a t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-n-n-o-t-a-t-i-o-n/#annotation","text":"ANNOTATION","title":"ANNOTATION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-m-p-a-n-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / COMPANION COMPANION \u00b6 COMPANION","title":" c o m p a n i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-m-p-a-n-i-o-n/#companion","text":"COMPANION","title":"COMPANION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-n-s-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / CONST CONST \u00b6 CONST","title":" c o n s t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-n-s-t/#const","text":"CONST","title":"CONST"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-r-o-s-s-i-n-l-i-n-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / CROSSINLINE CROSSINLINE \u00b6 CROSSINLINE","title":" c r o s s i n l i n e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-r-o-s-s-i-n-l-i-n-e/#crossinline","text":"CROSSINLINE","title":"CROSSINLINE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-d-a-t-a/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / DATA DATA \u00b6 DATA","title":" d a t a"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-d-a-t-a/#data","text":"DATA","title":"DATA"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-n-u-m/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ENUM ENUM \u00b6 ENUM","title":" e n u m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-n-u-m/#enum","text":"ENUM","title":"ENUM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-p-e-c-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / EXPECT EXPECT \u00b6 EXPECT","title":" e x p e c t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-p-e-c-t/#expect","text":"EXPECT","title":"EXPECT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-t-e-r-n-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / EXTERNAL EXTERNAL \u00b6 EXTERNAL","title":" e x t e r n a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-t-e-r-n-a-l/#external","text":"EXTERNAL","title":"EXTERNAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-f-i-n-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / FINAL FINAL \u00b6 FINAL","title":" f i n a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-f-i-n-a-l/#final","text":"FINAL","title":"FINAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-f-u-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / FUN FUN \u00b6 FUN","title":" f u n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-f-u-n/#fun","text":"FUN","title":"FUN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-f-i-x/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INFIX INFIX \u00b6 INFIX","title":" i n f i x"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-f-i-x/#infix","text":"INFIX","title":"INFIX"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-l-i-n-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INLINE INLINE \u00b6 INLINE","title":" i n l i n e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-l-i-n-e/#inline","text":"INLINE","title":"INLINE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-n-e-r/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INNER INNER \u00b6 INNER","title":" i n n e r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-n-e-r/#inner","text":"INNER","title":"INNER"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-t-e-r-n-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INTERNAL INTERNAL \u00b6 INTERNAL","title":" i n t e r n a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-t-e-r-n-a-l/#internal","text":"INTERNAL","title":"INTERNAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / IN IN \u00b6 IN","title":" i n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n/#in","text":"IN","title":"IN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-l-a-t-e-i-n-i-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / LATEINIT LATEINIT \u00b6 LATEINIT","title":" l a t e i n i t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-l-a-t-e-i-n-i-t/#lateinit","text":"LATEINIT","title":"LATEINIT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-n-o-i-n-l-i-n-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / NOINLINE NOINLINE \u00b6 NOINLINE","title":" n o i n l i n e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-n-o-i-n-l-i-n-e/#noinline","text":"NOINLINE","title":"NOINLINE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OPEN OPEN \u00b6 OPEN","title":" o p e n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-n/#open","text":"OPEN","title":"OPEN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-r-a-t-o-r/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OPERATOR OPERATOR \u00b6 OPERATOR","title":" o p e r a t o r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-r-a-t-o-r/#operator","text":"OPERATOR","title":"OPERATOR"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-u-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OUT OUT \u00b6 OUT","title":" o u t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-u-t/#out","text":"OUT","title":"OUT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-v-e-r-r-i-d-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OVERRIDE OVERRIDE \u00b6 OVERRIDE","title":" o v e r r i d e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-v-e-r-r-i-d-e/#override","text":"OVERRIDE","title":"OVERRIDE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-i-v-a-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / PRIVATE PRIVATE \u00b6 PRIVATE","title":" p r i v a t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-i-v-a-t-e/#private","text":"PRIVATE","title":"PRIVATE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-o-t-e-c-t-e-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / PROTECTED PROTECTED \u00b6 PROTECTED","title":" p r o t e c t e d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-o-t-e-c-t-e-d/#protected","text":"PROTECTED","title":"PROTECTED"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-u-b-l-i-c/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / PUBLIC PUBLIC \u00b6 PUBLIC","title":" p u b l i c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-u-b-l-i-c/#public","text":"PUBLIC","title":"PUBLIC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-r-e-i-f-i-e-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / REIFIED REIFIED \u00b6 REIFIED","title":" r e i f i e d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-r-e-i-f-i-e-d/#reified","text":"REIFIED","title":"REIFIED"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-e-a-l-e-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / SEALED SEALED \u00b6 SEALED","title":" s e a l e d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-e-a-l-e-d/#sealed","text":"SEALED","title":"SEALED"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-u-s-p-e-n-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / SUSPEND SUSPEND \u00b6 SUSPEND","title":" s u s p e n d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-u-s-p-e-n-d/#suspend","text":"SUSPEND","title":"SUSPEND"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-t-a-i-l-r-e-c/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / TAILREC TAILREC \u00b6 TAILREC","title":" t a i l r e c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-t-a-i-l-r-e-c/#tailrec","text":"TAILREC","title":"TAILREC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-v-a-r-a-r-g/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / VARARG VARARG \u00b6 VARARG","title":" v a r a r g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-v-a-r-a-r-g/#vararg","text":"VARARG","title":"VARARG"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator KOperator \u00b6 enum class KOperator Enum Values \u00b6 Name Summary UNARY_PLUS PLUS UNARY_MINUS MINUS TIMES DIV REM PLUS_ASSIGN MINUS_ASSIGN TIMES_ASSIGN DIV_ASSIGN REM_ASSIGN INC DEC EQUALS NOT_EQUALS NOT RANGE_TO CONTAINS NOT_CONTAINS GT LT GE LE ITERATOR","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/#koperator","text":"enum class KOperator","title":"KOperator"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/#enum-values","text":"Name Summary UNARY_PLUS PLUS UNARY_MINUS MINUS TIMES DIV REM PLUS_ASSIGN MINUS_ASSIGN TIMES_ASSIGN DIV_ASSIGN REM_ASSIGN INC DEC EQUALS NOT_EQUALS NOT RANGE_TO CONTAINS NOT_CONTAINS GT LT GE LE ITERATOR","title":"Enum Values"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-c-o-n-t-a-i-n-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / CONTAINS CONTAINS \u00b6 CONTAINS","title":" c o n t a i n s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-c-o-n-t-a-i-n-s/#contains","text":"CONTAINS","title":"CONTAINS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-d-e-c/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / DEC DEC \u00b6 DEC","title":" d e c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-d-e-c/#dec","text":"DEC","title":"DEC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-d-i-v/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / DIV DIV \u00b6 DIV","title":" d i v"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-d-i-v/#div","text":"DIV","title":"DIV"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-d-i-v_-a-s-s-i-g-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / DIV_ASSIGN DIV_ASSIGN \u00b6 DIV_ASSIGN","title":" d i v  a s s i g n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-d-i-v_-a-s-s-i-g-n/#div_assign","text":"DIV_ASSIGN","title":"DIV_ASSIGN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-e-q-u-a-l-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / EQUALS EQUALS \u00b6 EQUALS","title":" e q u a l s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-e-q-u-a-l-s/#equals","text":"EQUALS","title":"EQUALS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-g-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / GE GE \u00b6 GE","title":" g e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-g-e/#ge","text":"GE","title":"GE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-g-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / GT GT \u00b6 GT","title":" g t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-g-t/#gt","text":"GT","title":"GT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-i-n-c/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / INC INC \u00b6 INC","title":" i n c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-i-n-c/#inc","text":"INC","title":"INC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-i-t-e-r-a-t-o-r/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / ITERATOR ITERATOR \u00b6 ITERATOR","title":" i t e r a t o r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-i-t-e-r-a-t-o-r/#iterator","text":"ITERATOR","title":"ITERATOR"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / LE LE \u00b6 LE","title":" l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-l-e/#le","text":"LE","title":"LE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-l-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / LT LT \u00b6 LT","title":" l t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-l-t/#lt","text":"LT","title":"LT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-m-i-n-u-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / MINUS MINUS \u00b6 MINUS","title":" m i n u s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-m-i-n-u-s/#minus","text":"MINUS","title":"MINUS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-m-i-n-u-s_-a-s-s-i-g-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / MINUS_ASSIGN MINUS_ASSIGN \u00b6 MINUS_ASSIGN","title":" m i n u s  a s s i g n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-m-i-n-u-s_-a-s-s-i-g-n/#minus_assign","text":"MINUS_ASSIGN","title":"MINUS_ASSIGN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-n-o-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / NOT NOT \u00b6 NOT","title":" n o t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-n-o-t/#not","text":"NOT","title":"NOT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-n-o-t_-c-o-n-t-a-i-n-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / NOT_CONTAINS NOT_CONTAINS \u00b6 NOT_CONTAINS","title":" n o t  c o n t a i n s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-n-o-t_-c-o-n-t-a-i-n-s/#not_contains","text":"NOT_CONTAINS","title":"NOT_CONTAINS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-n-o-t_-e-q-u-a-l-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / NOT_EQUALS NOT_EQUALS \u00b6 NOT_EQUALS","title":" n o t  e q u a l s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-n-o-t_-e-q-u-a-l-s/#not_equals","text":"NOT_EQUALS","title":"NOT_EQUALS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-p-l-u-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / PLUS PLUS \u00b6 PLUS","title":" p l u s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-p-l-u-s/#plus","text":"PLUS","title":"PLUS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-p-l-u-s_-a-s-s-i-g-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / PLUS_ASSIGN PLUS_ASSIGN \u00b6 PLUS_ASSIGN","title":" p l u s  a s s i g n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-p-l-u-s_-a-s-s-i-g-n/#plus_assign","text":"PLUS_ASSIGN","title":"PLUS_ASSIGN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-r-a-n-g-e_-t-o/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / RANGE_TO RANGE_TO \u00b6 RANGE_TO","title":" r a n g e  t o"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-r-a-n-g-e_-t-o/#range_to","text":"RANGE_TO","title":"RANGE_TO"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-r-e-m/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / REM REM \u00b6 REM","title":" r e m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-r-e-m/#rem","text":"REM","title":"REM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-r-e-m_-a-s-s-i-g-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / REM_ASSIGN REM_ASSIGN \u00b6 REM_ASSIGN","title":" r e m  a s s i g n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-r-e-m_-a-s-s-i-g-n/#rem_assign","text":"REM_ASSIGN","title":"REM_ASSIGN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-t-i-m-e-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / TIMES TIMES \u00b6 TIMES","title":" t i m e s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-t-i-m-e-s/#times","text":"TIMES","title":"TIMES"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-t-i-m-e-s_-a-s-s-i-g-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / TIMES_ASSIGN TIMES_ASSIGN \u00b6 TIMES_ASSIGN","title":" t i m e s  a s s i g n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-t-i-m-e-s_-a-s-s-i-g-n/#times_assign","text":"TIMES_ASSIGN","title":"TIMES_ASSIGN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-u-n-a-r-y_-m-i-n-u-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / UNARY_MINUS UNARY_MINUS \u00b6 UNARY_MINUS","title":" u n a r y  m i n u s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-u-n-a-r-y_-m-i-n-u-s/#unary_minus","text":"UNARY_MINUS","title":"UNARY_MINUS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-u-n-a-r-y_-p-l-u-s/","text":"kotlinpoet / com.squareup.kotlinpoet / KOperator / UNARY_PLUS UNARY_PLUS \u00b6 UNARY_PLUS","title":" u n a r y  p l u s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-operator/-u-n-a-r-y_-p-l-u-s/#unary_plus","text":"UNARY_PLUS","title":"UNARY_PLUS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName LambdaTypeName \u00b6 class LambdaTypeName : TypeName Properties \u00b6 Name Summary isSuspending val isSuspending: Boolean parameters val parameters: List < ParameterSpec > receiver val receiver: TypeName ? returnType val returnType: TypeName Functions \u00b6 Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): LambdaTypeName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), suspending: Boolean = this.isSuspending, tags: Map < KClass <*>, Any > = this.tags.toMap()): LambdaTypeName Companion Object Functions \u00b6 Name Summary get Returns a lambda type with returnType and parameters listed in parameters . fun get(receiver: TypeName ? = null, parameters: List < ParameterSpec > = emptyList(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName Extension Functions \u00b6 Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#lambdatypename","text":"class LambdaTypeName : TypeName","title":"LambdaTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#properties","text":"Name Summary isSuspending val isSuspending: Boolean parameters val parameters: List < ParameterSpec > receiver val receiver: TypeName ? returnType val returnType: TypeName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): LambdaTypeName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), suspending: Boolean = this.isSuspending, tags: Map < KClass <*>, Any > = this.tags.toMap()): LambdaTypeName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#companion-object-functions","text":"Name Summary get Returns a lambda type with returnType and parameters listed in parameters . fun get(receiver: TypeName ? = null, parameters: List < ParameterSpec > = emptyList(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / copy copy \u00b6 fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): LambdaTypeName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), suspending: Boolean = this.isSuspending, tags: Map < KClass <*>, Any > = this.tags.toMap()): LambdaTypeName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): LambdaTypeName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), suspending: Boolean = this.isSuspending, tags: Map < KClass <*>, Any > = this.tags.toMap()): LambdaTypeName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/get/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / get get \u00b6 @JvmStatic fun get(receiver: TypeName ? = null, parameters: List < ParameterSpec > = emptyList(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName Returns a lambda type with returnType and parameters listed in parameters .","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/get/#get","text":"@JvmStatic fun get(receiver: TypeName ? = null, parameters: List < ParameterSpec > = emptyList(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName Returns a lambda type with returnType and parameters listed in parameters .","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/is-suspending/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / isSuspending isSuspending \u00b6 val isSuspending: Boolean","title":"Is suspending"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/is-suspending/#issuspending","text":"val isSuspending: Boolean","title":"isSuspending"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / parameters parameters \u00b6 val parameters: List < ParameterSpec >","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/parameters/#parameters","text":"val parameters: List < ParameterSpec >","title":"parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/receiver/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / receiver receiver \u00b6 val receiver: TypeName ?","title":"Receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/receiver/#receiver","text":"val receiver: TypeName ?","title":"receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/return-type/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / returnType returnType \u00b6 val returnType: TypeName","title":"Return type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/return-type/#returntype","text":"val returnType: TypeName","title":"returnType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName MemberName \u00b6 data class MemberName Represents the name of a member (such as a function or a property). Parameters \u00b6 packageName - e.g. kotlin.collections enclosingClassName - e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class simpleName - e.g. isBlank , size Constructors \u00b6 Name Summary <init> MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String ) MemberName(packageName: String , operator: KOperator ) MemberName(enclosingClassName: ClassName , operator: KOperator ) Properties \u00b6 Name Summary canonicalName Fully qualified name using . as a separator, like kotlin.String.isBlank . val canonicalName: String enclosingClassName e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class val enclosingClassName: ClassName ? operator val operator: KOperator ? packageName e.g. kotlin.collections``val packageName: String simpleName e.g. isBlank , size``val simpleName: String Functions \u00b6 Name Summary reference Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. fun reference(): CodeBlock toString fun toString(): String Companion Object Functions \u00b6 Name Summary member fun ClassName .member(simpleName: String ): MemberName fun KClass <*>.member(simpleName: String ): MemberName fun Class <*>.member(simpleName: String ): MemberName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#membername","text":"data class MemberName Represents the name of a member (such as a function or a property).","title":"MemberName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#parameters","text":"packageName - e.g. kotlin.collections enclosingClassName - e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class simpleName - e.g. isBlank , size","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#constructors","text":"Name Summary <init> MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String ) MemberName(packageName: String , operator: KOperator ) MemberName(enclosingClassName: ClassName , operator: KOperator )","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#properties","text":"Name Summary canonicalName Fully qualified name using . as a separator, like kotlin.String.isBlank . val canonicalName: String enclosingClassName e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class val enclosingClassName: ClassName ? operator val operator: KOperator ? packageName e.g. kotlin.collections``val packageName: String simpleName e.g. isBlank , size``val simpleName: String","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#functions","text":"Name Summary reference Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. fun reference(): CodeBlock toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#companion-object-functions","text":"Name Summary member fun ClassName .member(simpleName: String ): MemberName fun KClass <*>.member(simpleName: String ): MemberName fun Class <*>.member(simpleName: String ): MemberName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / <init> <init> \u00b6 MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String ) MemberName(packageName: String , operator: KOperator ) MemberName(enclosingClassName: ClassName , operator: KOperator )","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/-init-/#init","text":"MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String ) MemberName(packageName: String , operator: KOperator ) MemberName(enclosingClassName: ClassName , operator: KOperator )","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/canonical-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / canonicalName canonicalName \u00b6 val canonicalName: String Fully qualified name using . as a separator, like kotlin.String.isBlank .","title":"Canonical name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/canonical-name/#canonicalname","text":"val canonicalName: String Fully qualified name using . as a separator, like kotlin.String.isBlank .","title":"canonicalName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/enclosing-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / enclosingClassName enclosingClassName \u00b6 val enclosingClassName: ClassName ? e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class","title":"Enclosing class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/enclosing-class-name/#enclosingclassname","text":"val enclosingClassName: ClassName ? e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class","title":"enclosingClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/member/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / member member \u00b6 @JvmStatic fun ClassName .member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun KClass <*>.member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun Class <*>.member(simpleName: String ): MemberName","title":"Member"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/member/#member","text":"@JvmStatic fun ClassName .member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun KClass <*>.member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun Class <*>.member(simpleName: String ): MemberName","title":"member"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/operator/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / operator operator \u00b6 val operator: KOperator ?","title":"Operator"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/operator/#operator","text":"val operator: KOperator ?","title":"operator"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / packageName packageName \u00b6 val packageName: String e.g. kotlin.collections","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/package-name/#packagename","text":"val packageName: String e.g. kotlin.collections","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/reference/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / reference reference \u00b6 fun reference(): CodeBlock Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level member with a conflicting name.","title":"Reference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/reference/#reference","text":"fun reference(): CodeBlock Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level member with a conflicting name.","title":"reference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/simple-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / simpleName simpleName \u00b6 val simpleName: String e.g. isBlank , size","title":"Simple name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/simple-name/#simplename","text":"val simpleName: String e.g. isBlank , size","title":"simpleName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator NameAllocator \u00b6 class NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: val nameAllocator = NameAllocator() for (property in properties) { nameAllocator.newName(property.name, property) } nameAllocator.newName(\"sb\", \"string builder\") Pass a unique tag object to each allocation. The tag scopes the name, and can be used to look up the allocated name later. Typically the tag is the object that is being named. In the above example we use property for the user-supplied property names, and \"string builder\" for our constant string builder. Once we\u2019ve allocated names we can use them when generating code: val builder = FunSpec.builder(\"toString\") .addModifiers(KModifier.OVERRIDE) .returns(String::class) builder.addStatement(\"val %N = %T()\", nameAllocator.get(\"string builder\"), StringBuilder::class) for (property in properties) { builder.addStatement(\"%N.append(%N)\", nameAllocator.get(\"string builder\"), nameAllocator.get(property)) } builder.addStatement(\"return %N.toString()\", nameAllocator.get(\"string builder\")) return builder.build() The above code generates unique names if presented with conflicts. Given user-supplied properties with names ab and sb this generates the following: override fun toString(): kotlin.String { val sb_ = java.lang.StringBuilder() sb_.append(ab) sb_.append(sb) return sb_.toString() } The underscore is appended to sb to avoid conflicting with the user-supplied sb property. Underscores are also prefixed for names that start with a digit, and used to replace name-unsafe characters like space or dash. When dealing with multiple independent inner scopes, use a copy of the NameAllocator used for the outer scope to further refine name allocation for a specific inner scope. Constructors \u00b6 Name Summary <init> NameAllocator() Functions \u00b6 Name Summary copy Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. fun copy(): NameAllocator get Retrieve a name created with NameAllocator.newName . operator fun get(tag: Any ): String newName Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get . fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/#nameallocator","text":"class NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: val nameAllocator = NameAllocator() for (property in properties) { nameAllocator.newName(property.name, property) } nameAllocator.newName(\"sb\", \"string builder\") Pass a unique tag object to each allocation. The tag scopes the name, and can be used to look up the allocated name later. Typically the tag is the object that is being named. In the above example we use property for the user-supplied property names, and \"string builder\" for our constant string builder. Once we\u2019ve allocated names we can use them when generating code: val builder = FunSpec.builder(\"toString\") .addModifiers(KModifier.OVERRIDE) .returns(String::class) builder.addStatement(\"val %N = %T()\", nameAllocator.get(\"string builder\"), StringBuilder::class) for (property in properties) { builder.addStatement(\"%N.append(%N)\", nameAllocator.get(\"string builder\"), nameAllocator.get(property)) } builder.addStatement(\"return %N.toString()\", nameAllocator.get(\"string builder\")) return builder.build() The above code generates unique names if presented with conflicts. Given user-supplied properties with names ab and sb this generates the following: override fun toString(): kotlin.String { val sb_ = java.lang.StringBuilder() sb_.append(ab) sb_.append(sb) return sb_.toString() } The underscore is appended to sb to avoid conflicting with the user-supplied sb property. Underscores are also prefixed for names that start with a digit, and used to replace name-unsafe characters like space or dash. When dealing with multiple independent inner scopes, use a copy of the NameAllocator used for the outer scope to further refine name allocation for a specific inner scope.","title":"NameAllocator"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/#constructors","text":"Name Summary <init> NameAllocator()","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/#functions","text":"Name Summary copy Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. fun copy(): NameAllocator get Retrieve a name created with NameAllocator.newName . operator fun get(tag: Any ): String newName Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get . fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / <init> <init> \u00b6 NameAllocator()","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/-init-/#init","text":"NameAllocator()","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / copy copy \u00b6 fun copy(): NameAllocator Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. Return A deep copy of this NameAllocator.","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/copy/#copy","text":"fun copy(): NameAllocator Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. Return A deep copy of this NameAllocator.","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/get/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / get get \u00b6 operator fun get(tag: Any ): String Retrieve a name created with NameAllocator.newName .","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/get/#get","text":"operator fun get(tag: Any ): String Retrieve a name created with NameAllocator.newName .","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/new-name/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / newName newName \u00b6 @JvmOverloads fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get .","title":"New name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/new-name/#newname","text":"@JvmOverloads fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get .","title":"newName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder OriginatingElementsHolder \u00b6 interface OriginatingElementsHolder A type that can have originating elements . Types \u00b6 Name Summary Builder The builder analogue to OriginatingElementsHolder types. interface Builder<out T : Builder<T>> Properties \u00b6 Name Summary originatingElements The originating elements of this type. abstract val originatingElements: List < Element > Inheritors \u00b6 Name Summary FunSpec A generated function declaration. class FunSpec : Taggable , OriginatingElementsHolder PropertySpec A generated property declaration. class PropertySpec : Taggable , OriginatingElementsHolder TypeSpec A generated class, interface, or enum declaration. class TypeSpec : Taggable , OriginatingElementsHolder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#originatingelementsholder","text":"interface OriginatingElementsHolder A type that can have originating elements .","title":"OriginatingElementsHolder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#types","text":"Name Summary Builder The builder analogue to OriginatingElementsHolder types. interface Builder<out T : Builder<T>>","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#properties","text":"Name Summary originatingElements The originating elements of this type. abstract val originatingElements: List < Element >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#inheritors","text":"Name Summary FunSpec A generated function declaration. class FunSpec : Taggable , OriginatingElementsHolder PropertySpec A generated property declaration. class PropertySpec : Taggable , OriginatingElementsHolder TypeSpec A generated class, interface, or enum declaration. class TypeSpec : Taggable , OriginatingElementsHolder","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / originatingElements originatingElements \u00b6 abstract val originatingElements: List < Element > The originating elements of this type.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/originating-elements/#originatingelements","text":"abstract val originatingElements: List < Element > The originating elements of this type.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / Builder Builder \u00b6 interface Builder<out T : Builder<T>> The builder analogue to OriginatingElementsHolder types. Properties \u00b6 Name Summary originatingElements Mutable map of the current originating elements this builder contains. abstract val originatingElements: MutableList < Element > Functions \u00b6 Name Summary addOriginatingElement Adds an originatingElement to this type\u2019s list of originating elements. open fun addOriginatingElement(originatingElement: Element ): T","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/#builder","text":"interface Builder<out T : Builder<T>> The builder analogue to OriginatingElementsHolder types.","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/#properties","text":"Name Summary originatingElements Mutable map of the current originating elements this builder contains. abstract val originatingElements: MutableList < Element >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/#functions","text":"Name Summary addOriginatingElement Adds an originatingElement to this type\u2019s list of originating elements. open fun addOriginatingElement(originatingElement: Element ): T","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/add-originating-element/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / Builder / addOriginatingElement addOriginatingElement \u00b6 open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type\u2019s list of originating elements.","title":"Add originating element"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/add-originating-element/#addoriginatingelement","text":"open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type\u2019s list of originating elements.","title":"addOriginatingElement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / Builder / originatingElements originatingElements \u00b6 abstract val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/originating-elements/#originatingelements","text":"abstract val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec ParameterSpec \u00b6 class ParameterSpec : Taggable A generated parameter declaration. Types \u00b6 Name Summary Builder class Builder : Builder<Builder> Constructors \u00b6 Name Summary <init> ParameterSpec(name: String , type: TypeName , vararg modifiers: KModifier ) ParameterSpec(name: String , type: TypeName , modifiers: Iterable < KModifier >) Properties \u00b6 Name Summary annotations val annotations: List < AnnotationSpec > defaultValue val defaultValue: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > name val name: String type val type: TypeName Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder toString fun toString(): String Companion Object Functions \u00b6 Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder get fun ~~get~~(element: VariableElement ): ParameterSpec parametersOf fun ~~parametersOf~~(method: ExecutableElement ): List < ParameterSpec > unnamed fun unnamed(type: KClass <*>): ParameterSpec fun unnamed(type: Type ): ParameterSpec fun unnamed(type: TypeName ): ParameterSpec Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#parameterspec","text":"class ParameterSpec : Taggable A generated parameter declaration.","title":"ParameterSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#types","text":"Name Summary Builder class Builder : Builder<Builder>","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#constructors","text":"Name Summary <init> ParameterSpec(name: String , type: TypeName , vararg modifiers: KModifier ) ParameterSpec(name: String , type: TypeName , modifiers: Iterable < KModifier >)","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#properties","text":"Name Summary annotations val annotations: List < AnnotationSpec > defaultValue val defaultValue: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > name val name: String type val type: TypeName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder get fun ~~get~~(element: VariableElement ): ParameterSpec parametersOf fun ~~parametersOf~~(method: ExecutableElement ): List < ParameterSpec > unnamed fun unnamed(type: KClass <*>): ParameterSpec fun unnamed(type: Type ): ParameterSpec fun unnamed(type: TypeName ): ParameterSpec","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / <init> <init> \u00b6 ParameterSpec(name: String , type: TypeName , vararg modifiers: KModifier ) ParameterSpec(name: String , type: TypeName , modifiers: Iterable < KModifier >)","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-init-/#init","text":"ParameterSpec(name: String , type: TypeName , vararg modifiers: KModifier ) ParameterSpec(name: String , type: TypeName , modifiers: Iterable < KModifier >)","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / annotations annotations \u00b6 val annotations: List < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/annotations/#annotations","text":"val annotations: List < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / builder builder \u00b6 @JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/builder/#builder","text":"@JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/default-value/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / defaultValue defaultValue \u00b6 val defaultValue: CodeBlock ?","title":"Default value"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/default-value/#defaultvalue","text":"val defaultValue: CodeBlock ?","title":"defaultValue"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/get/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / get get \u00b6 @JvmStatic fun ~~get~~(element: VariableElement ): ParameterSpec Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/get/#get","text":"@JvmStatic fun ~~get~~(element: VariableElement ): ParameterSpec Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / kdoc kdoc \u00b6 val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / modifiers modifiers \u00b6 val modifiers: Set < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/modifiers/#modifiers","text":"val modifiers: Set < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / name name \u00b6 val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/parameters-of/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / parametersOf parametersOf \u00b6 @JvmStatic fun ~~parametersOf~~(method: ExecutableElement ): List < ParameterSpec > Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"Parameters of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/parameters-of/#parametersof","text":"@JvmStatic fun ~~parametersOf~~(method: ExecutableElement ): List < ParameterSpec > Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"parametersOf"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / toBuilder toBuilder \u00b6 fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-builder/#tobuilder","text":"fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/type/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / type type \u00b6 val type: TypeName","title":"Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/type/#type","text":"val type: TypeName","title":"type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/unnamed/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / unnamed unnamed \u00b6 @JvmStatic fun unnamed(type: KClass <*>): ParameterSpec @JvmStatic fun unnamed(type: Type ): ParameterSpec @JvmStatic fun unnamed(type: TypeName ): ParameterSpec","title":"Unnamed"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/unnamed/#unnamed","text":"@JvmStatic fun unnamed(type: KClass <*>): ParameterSpec @JvmStatic fun unnamed(type: Type ): ParameterSpec @JvmStatic fun unnamed(type: TypeName ): ParameterSpec","title":"unnamed"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder Builder \u00b6 class Builder : Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: MutableList < AnnotationSpec > kdoc val kdoc: Builder modifiers val modifiers: MutableList < KModifier > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > Functions \u00b6 Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder build fun build(): ParameterSpec defaultValue fun defaultValue(format: String , vararg args: Any ?): Builder fun defaultValue(codeBlock: CodeBlock ): Builder jvmModifiers fun jvmModifiers(modifiers: Iterable < Modifier >): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#builder","text":"class Builder : Builder<Builder>","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList < AnnotationSpec > kdoc val kdoc: Builder modifiers val modifiers: MutableList < KModifier > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder build fun build(): ParameterSpec defaultValue fun defaultValue(format: String , vararg args: Any ?): Builder fun defaultValue(codeBlock: CodeBlock ): Builder jvmModifiers fun jvmModifiers(modifiers: Iterable < Modifier >): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addAnnotation addAnnotation \u00b6 fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addAnnotations addAnnotations \u00b6 fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addKdoc addKdoc \u00b6 fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addModifiers addModifiers \u00b6 fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / annotations annotations \u00b6 val annotations: MutableList < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/annotations/#annotations","text":"val annotations: MutableList < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / build build \u00b6 fun build(): ParameterSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/build/#build","text":"fun build(): ParameterSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/default-value/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / defaultValue defaultValue \u00b6 fun defaultValue(format: String , vararg args: Any ?): Builder fun defaultValue(codeBlock: CodeBlock ): Builder","title":"Default value"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/default-value/#defaultvalue","text":"fun defaultValue(format: String , vararg args: Any ?): Builder fun defaultValue(codeBlock: CodeBlock ): Builder","title":"defaultValue"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/jvm-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / jvmModifiers jvmModifiers \u00b6 fun jvmModifiers(modifiers: Iterable < Modifier >): Builder","title":"Jvm modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/jvm-modifiers/#jvmmodifiers","text":"fun jvmModifiers(modifiers: Iterable < Modifier >): Builder","title":"jvmModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / kdoc kdoc \u00b6 val kdoc: Builder","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/kdoc/#kdoc","text":"val kdoc: Builder","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / modifiers modifiers \u00b6 val modifiers: MutableList < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableList < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / tags tags \u00b6 val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/tags/#tags","text":"val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName ParameterizedTypeName \u00b6 class ParameterizedTypeName : TypeName Properties \u00b6 Name Summary rawType val rawType: ClassName typeArguments val typeArguments: List < TypeName > Functions \u00b6 Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ParameterizedTypeName nestedClass Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments . fun nestedClass(name: String , typeArguments: List < TypeName >): ParameterizedTypeName plusParameter fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass <*>): ParameterizedTypeName fun plusParameter(typeArgument: Class <*>): ParameterizedTypeName Companion Object Functions \u00b6 Name Summary parameterizedBy Returns a parameterized type, applying typeArguments to this . fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName fun KClass <*>.parameterizedBy(vararg typeArguments: KClass <*>): ParameterizedTypeName fun Class <*>.parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName fun ClassName .parameterizedBy(typeArguments: List < TypeName >): ParameterizedTypeName fun KClass <*>.parameterizedBy(typeArguments: Iterable < KClass <*>>): ParameterizedTypeName fun Class <*>.parameterizedBy(typeArguments: Iterable < Type >): ParameterizedTypeName plusParameter Returns a parameterized type, applying typeArgument to this . fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun KClass <*>.plusParameter(typeArgument: KClass <*>): ParameterizedTypeName fun Class <*>.plusParameter(typeArgument: Class <*>): ParameterizedTypeName Extension Functions \u00b6 Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#parameterizedtypename","text":"class ParameterizedTypeName : TypeName","title":"ParameterizedTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#properties","text":"Name Summary rawType val rawType: ClassName typeArguments val typeArguments: List < TypeName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ParameterizedTypeName nestedClass Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments . fun nestedClass(name: String , typeArguments: List < TypeName >): ParameterizedTypeName plusParameter fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass <*>): ParameterizedTypeName fun plusParameter(typeArgument: Class <*>): ParameterizedTypeName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#companion-object-functions","text":"Name Summary parameterizedBy Returns a parameterized type, applying typeArguments to this . fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName fun KClass <*>.parameterizedBy(vararg typeArguments: KClass <*>): ParameterizedTypeName fun Class <*>.parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName fun ClassName .parameterizedBy(typeArguments: List < TypeName >): ParameterizedTypeName fun KClass <*>.parameterizedBy(typeArguments: Iterable < KClass <*>>): ParameterizedTypeName fun Class <*>.parameterizedBy(typeArguments: Iterable < Type >): ParameterizedTypeName plusParameter Returns a parameterized type, applying typeArgument to this . fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun KClass <*>.plusParameter(typeArgument: KClass <*>): ParameterizedTypeName fun Class <*>.plusParameter(typeArgument: Class <*>): ParameterizedTypeName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / copy copy \u00b6 fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ParameterizedTypeName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): ParameterizedTypeName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/nested-class/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / nestedClass nestedClass \u00b6 fun nestedClass(name: String , typeArguments: List < TypeName >): ParameterizedTypeName Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments .","title":"Nested class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/nested-class/#nestedclass","text":"fun nestedClass(name: String , typeArguments: List < TypeName >): ParameterizedTypeName Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments .","title":"nestedClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/parameterized-by/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / parameterizedBy parameterizedBy \u00b6 @JvmStatic @JvmName(\"get\") fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass <*>.parameterizedBy(vararg typeArguments: KClass <*>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class <*>.parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun ClassName .parameterizedBy(typeArguments: List < TypeName >): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass <*>.parameterizedBy(typeArguments: Iterable < KClass <*>>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class <*>.parameterizedBy(typeArguments: Iterable < Type >): ParameterizedTypeName Returns a parameterized type, applying typeArguments to this .","title":"Parameterized by"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/parameterized-by/#parameterizedby","text":"@JvmStatic @JvmName(\"get\") fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass <*>.parameterizedBy(vararg typeArguments: KClass <*>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class <*>.parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun ClassName .parameterizedBy(typeArguments: List < TypeName >): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass <*>.parameterizedBy(typeArguments: Iterable < KClass <*>>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class <*>.parameterizedBy(typeArguments: Iterable < Type >): ParameterizedTypeName Returns a parameterized type, applying typeArguments to this .","title":"parameterizedBy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/plus-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / plusParameter plusParameter \u00b6 fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass <*>): ParameterizedTypeName fun plusParameter(typeArgument: Class <*>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass <*>.plusParameter(typeArgument: KClass <*>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class <*>.plusParameter(typeArgument: Class <*>): ParameterizedTypeName Returns a parameterized type, applying typeArgument to this .","title":"Plus parameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/plus-parameter/#plusparameter","text":"fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass <*>): ParameterizedTypeName fun plusParameter(typeArgument: Class <*>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass <*>.plusParameter(typeArgument: KClass <*>): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class <*>.plusParameter(typeArgument: Class <*>): ParameterizedTypeName Returns a parameterized type, applying typeArgument to this .","title":"plusParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/raw-type/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / rawType rawType \u00b6 val rawType: ClassName","title":"Raw type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/raw-type/#rawtype","text":"val rawType: ClassName","title":"rawType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/type-arguments/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / typeArguments typeArguments \u00b6 val typeArguments: List < TypeName >","title":"Type arguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/type-arguments/#typearguments","text":"val typeArguments: List < TypeName >","title":"typeArguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec PropertySpec \u00b6 class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. Types \u00b6 Name Summary Builder class Builder : Builder<Builder>, Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: List < AnnotationSpec > delegated val delegated: Boolean getter val getter: FunSpec ? initializer val initializer: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > mutable val mutable: Boolean name val name: String receiverType val receiverType: TypeName ? setter val setter: FunSpec ? type val type: TypeName typeVariables val typeVariables: List < TypeVariableName > Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder toString fun toString(): String Companion Object Functions \u00b6 Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#propertyspec","text":"class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration.","title":"PropertySpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#types","text":"Name Summary Builder class Builder : Builder<Builder>, Builder<Builder>","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#properties","text":"Name Summary annotations val annotations: List < AnnotationSpec > delegated val delegated: Boolean getter val getter: FunSpec ? initializer val initializer: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > mutable val mutable: Boolean name val name: String receiverType val receiverType: TypeName ? setter val setter: FunSpec ? type val type: TypeName typeVariables val typeVariables: List < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / annotations annotations \u00b6 val annotations: List < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/annotations/#annotations","text":"val annotations: List < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / builder builder \u00b6 @JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/builder/#builder","text":"@JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder @JvmStatic fun builder(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: Type , modifiers: Iterable < KModifier >): Builder @JvmStatic fun builder(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/delegated/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / delegated delegated \u00b6 val delegated: Boolean","title":"Delegated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/delegated/#delegated","text":"val delegated: Boolean","title":"delegated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/getter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / getter getter \u00b6 val getter: FunSpec ?","title":"Getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/getter/#getter","text":"val getter: FunSpec ?","title":"getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/initializer/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / initializer initializer \u00b6 val initializer: CodeBlock ?","title":"Initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/initializer/#initializer","text":"val initializer: CodeBlock ?","title":"initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / kdoc kdoc \u00b6 val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / modifiers modifiers \u00b6 val modifiers: Set < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/modifiers/#modifiers","text":"val modifiers: Set < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/mutable/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / mutable mutable \u00b6 val mutable: Boolean","title":"Mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/mutable/#mutable","text":"val mutable: Boolean","title":"mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / name name \u00b6 val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/receiver-type/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / receiverType receiverType \u00b6 val receiverType: TypeName ?","title":"Receiver type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/receiver-type/#receivertype","text":"val receiverType: TypeName ?","title":"receiverType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/setter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / setter setter \u00b6 val setter: FunSpec ?","title":"Setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/setter/#setter","text":"val setter: FunSpec ?","title":"setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / toBuilder toBuilder \u00b6 @JvmOverloads fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-builder/#tobuilder","text":"@JvmOverloads fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / typeVariables typeVariables \u00b6 val typeVariables: List < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type-variables/#typevariables","text":"val typeVariables: List < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / type type \u00b6 val type: TypeName","title":"Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type/#type","text":"val type: TypeName","title":"type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder Builder \u00b6 class Builder : Builder<Builder>, Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: MutableList < AnnotationSpec > modifiers val modifiers: MutableList < KModifier > originatingElements Mutable map of the current originating elements this builder contains. val originatingElements: MutableList < Element > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeVariables val typeVariables: MutableList < TypeVariableName > Functions \u00b6 Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder build fun build(): PropertySpec delegate fun delegate(format: String , vararg args: Any ?): Builder fun delegate(codeBlock: CodeBlock ): Builder getter fun getter(getter: FunSpec ): Builder initializer fun initializer(format: String , vararg args: Any ?): Builder fun initializer(codeBlock: CodeBlock ): Builder mutable True to create a var instead of a val . fun mutable(mutable: Boolean = true): Builder receiver fun receiver(receiverType: TypeName ): Builder fun receiver(receiverType: Type ): Builder fun receiver(receiverType: KClass <*>): Builder setter fun setter(setter: FunSpec ): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#builder","text":"class Builder : Builder<Builder>, Builder<Builder>","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList < AnnotationSpec > modifiers val modifiers: MutableList < KModifier > originatingElements Mutable map of the current originating elements this builder contains. val originatingElements: MutableList < Element > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeVariables val typeVariables: MutableList < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder build fun build(): PropertySpec delegate fun delegate(format: String , vararg args: Any ?): Builder fun delegate(codeBlock: CodeBlock ): Builder getter fun getter(getter: FunSpec ): Builder initializer fun initializer(format: String , vararg args: Any ?): Builder fun initializer(codeBlock: CodeBlock ): Builder mutable True to create a var instead of a val . fun mutable(mutable: Boolean = true): Builder receiver fun receiver(receiverType: TypeName ): Builder fun receiver(receiverType: Type ): Builder fun receiver(receiverType: KClass <*>): Builder setter fun setter(setter: FunSpec ): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addAnnotation addAnnotation \u00b6 fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addAnnotations addAnnotations \u00b6 fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addKdoc addKdoc \u00b6 fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addModifiers addModifiers \u00b6 fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addTypeVariable addTypeVariable \u00b6 fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addTypeVariables addTypeVariables \u00b6 fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / annotations annotations \u00b6 val annotations: MutableList < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/annotations/#annotations","text":"val annotations: MutableList < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / build build \u00b6 fun build(): PropertySpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/build/#build","text":"fun build(): PropertySpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/delegate/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / delegate delegate \u00b6 fun delegate(format: String , vararg args: Any ?): Builder fun delegate(codeBlock: CodeBlock ): Builder","title":"Delegate"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/delegate/#delegate","text":"fun delegate(format: String , vararg args: Any ?): Builder fun delegate(codeBlock: CodeBlock ): Builder","title":"delegate"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/getter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / getter getter \u00b6 fun getter(getter: FunSpec ): Builder","title":"Getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/getter/#getter","text":"fun getter(getter: FunSpec ): Builder","title":"getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/initializer/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / initializer initializer \u00b6 fun initializer(format: String , vararg args: Any ?): Builder fun initializer(codeBlock: CodeBlock ): Builder","title":"Initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/initializer/#initializer","text":"fun initializer(format: String , vararg args: Any ?): Builder fun initializer(codeBlock: CodeBlock ): Builder","title":"initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / modifiers modifiers \u00b6 val modifiers: MutableList < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableList < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/mutable/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / mutable mutable \u00b6 fun mutable(mutable: Boolean = true): Builder True to create a var instead of a val .","title":"Mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/mutable/#mutable","text":"fun mutable(mutable: Boolean = true): Builder True to create a var instead of a val .","title":"mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / originatingElements originatingElements \u00b6 val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/originating-elements/#originatingelements","text":"val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/receiver/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / receiver receiver \u00b6 fun receiver(receiverType: TypeName ): Builder fun receiver(receiverType: Type ): Builder fun receiver(receiverType: KClass <*>): Builder","title":"Receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/receiver/#receiver","text":"fun receiver(receiverType: TypeName ): Builder fun receiver(receiverType: Type ): Builder fun receiver(receiverType: KClass <*>): Builder","title":"receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/setter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / setter setter \u00b6 fun setter(setter: FunSpec ): Builder","title":"Setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/setter/#setter","text":"fun setter(setter: FunSpec ): Builder","title":"setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / tags tags \u00b6 val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/tags/#tags","text":"val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / typeVariables typeVariables \u00b6 val typeVariables: MutableList < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableList < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable Taggable \u00b6 interface Taggable A type that can be tagged with extra metadata of the user\u2019s choice. Types \u00b6 Name Summary Builder The builder analogue to Taggable types. interface Builder<out T : Builder<T>> Properties \u00b6 Name Summary tags Returns all tags. open val tags: Map < KClass <*>, Any > Functions \u00b6 Name Summary tag Returns the tag attached with type as a key, or null if no tag is attached with that key. open fun <T : Any > tag(type: Class <T>): T? abstract fun <T : Any > tag(type: KClass <T>): T? Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T? Inheritors \u00b6 Name Summary AnnotationSpec A generated annotation on a declaration. class AnnotationSpec : Taggable FileSpec A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. class FileSpec : Taggable FunSpec A generated function declaration. class FunSpec : Taggable , OriginatingElementsHolder ParameterSpec A generated parameter declaration. class ParameterSpec : Taggable PropertySpec A generated property declaration. class PropertySpec : Taggable , OriginatingElementsHolder TypeAliasSpec A generated typealias declaration class TypeAliasSpec : Taggable TypeName Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . sealed class TypeName : Taggable TypeSpec A generated class, interface, or enum declaration. class TypeSpec : Taggable , OriginatingElementsHolder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#taggable","text":"interface Taggable A type that can be tagged with extra metadata of the user\u2019s choice.","title":"Taggable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#types","text":"Name Summary Builder The builder analogue to Taggable types. interface Builder<out T : Builder<T>>","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#properties","text":"Name Summary tags Returns all tags. open val tags: Map < KClass <*>, Any >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#functions","text":"Name Summary tag Returns the tag attached with type as a key, or null if no tag is attached with that key. open fun <T : Any > tag(type: Class <T>): T? abstract fun <T : Any > tag(type: KClass <T>): T?","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#inheritors","text":"Name Summary AnnotationSpec A generated annotation on a declaration. class AnnotationSpec : Taggable FileSpec A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. class FileSpec : Taggable FunSpec A generated function declaration. class FunSpec : Taggable , OriginatingElementsHolder ParameterSpec A generated parameter declaration. class ParameterSpec : Taggable PropertySpec A generated property declaration. class PropertySpec : Taggable , OriginatingElementsHolder TypeAliasSpec A generated typealias declaration class TypeAliasSpec : Taggable TypeName Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . sealed class TypeName : Taggable TypeSpec A generated class, interface, or enum declaration. class TypeSpec : Taggable , OriginatingElementsHolder","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/tag/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / tag tag \u00b6 open fun <T : Any > tag(type: Class <T>): T? abstract fun <T : Any > tag(type: KClass <T>): T? Returns the tag attached with type as a key, or null if no tag is attached with that key.","title":"Tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/tag/#tag","text":"open fun <T : Any > tag(type: Class <T>): T? abstract fun <T : Any > tag(type: KClass <T>): T? Returns the tag attached with type as a key, or null if no tag is attached with that key.","title":"tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / tags tags \u00b6 open val tags: Map < KClass <*>, Any > Returns all tags.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/tags/#tags","text":"open val tags: Map < KClass <*>, Any > Returns all tags.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / Builder Builder \u00b6 interface Builder<out T : Builder<T>> The builder analogue to Taggable types. Properties \u00b6 Name Summary tags Mutable map of the current tags this builder contains. abstract val tags: MutableMap < KClass <*>, Any > Functions \u00b6 Name Summary tag Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . open fun tag(type: Class <*>, tag: Any ?): T open fun tag(type: KClass <*>, tag: Any ?): T","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/#builder","text":"interface Builder<out T : Builder<T>> The builder analogue to Taggable types.","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/#properties","text":"Name Summary tags Mutable map of the current tags this builder contains. abstract val tags: MutableMap < KClass <*>, Any >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/#functions","text":"Name Summary tag Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . open fun tag(type: Class <*>, tag: Any ?): T open fun tag(type: KClass <*>, tag: Any ?): T","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tag/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / Builder / tag tag \u00b6 open fun tag(type: Class <*>, tag: Any ?): T open fun tag(type: KClass <*>, tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Use this API to attach originating elements, debugging, or other application data to a spec so that you may read it in other APIs or callbacks.","title":"Tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tag/#tag","text":"open fun tag(type: Class <*>, tag: Any ?): T open fun tag(type: KClass <*>, tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Use this API to attach originating elements, debugging, or other application data to a spec so that you may read it in other APIs or callbacks.","title":"tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / Builder / tags tags \u00b6 abstract val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tags/#tags","text":"abstract val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec TypeAliasSpec \u00b6 class TypeAliasSpec : Taggable A generated typealias declaration Types \u00b6 Name Summary Builder class Builder : Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: List < AnnotationSpec > kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > name val name: String type val type: TypeName typeVariables val typeVariables: List < TypeVariableName > Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder toString fun toString(): String Companion Object Functions \u00b6 Name Summary builder fun builder(name: String , type: TypeName ): Builder fun builder(name: String , type: Type ): Builder fun builder(name: String , type: KClass <*>): Builder Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#typealiasspec","text":"class TypeAliasSpec : Taggable A generated typealias declaration","title":"TypeAliasSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#types","text":"Name Summary Builder class Builder : Builder<Builder>","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#properties","text":"Name Summary annotations val annotations: List < AnnotationSpec > kdoc val kdoc: CodeBlock modifiers val modifiers: Set < KModifier > name val name: String type val type: TypeName typeVariables val typeVariables: List < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String , type: TypeName ): Builder fun builder(name: String , type: Type ): Builder fun builder(name: String , type: KClass <*>): Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / annotations annotations \u00b6 val annotations: List < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/annotations/#annotations","text":"val annotations: List < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / builder builder \u00b6 @JvmStatic fun builder(name: String , type: TypeName ): Builder @JvmStatic fun builder(name: String , type: Type ): Builder @JvmStatic fun builder(name: String , type: KClass <*>): Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/builder/#builder","text":"@JvmStatic fun builder(name: String , type: TypeName ): Builder @JvmStatic fun builder(name: String , type: Type ): Builder @JvmStatic fun builder(name: String , type: KClass <*>): Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / kdoc kdoc \u00b6 val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / modifiers modifiers \u00b6 val modifiers: Set < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/modifiers/#modifiers","text":"val modifiers: Set < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / name name \u00b6 val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / toBuilder toBuilder \u00b6 @JvmOverloads fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-builder/#tobuilder","text":"@JvmOverloads fun toBuilder(name: String = this.name, type: TypeName = this.type): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / typeVariables typeVariables \u00b6 val typeVariables: List < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type-variables/#typevariables","text":"val typeVariables: List < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / type type \u00b6 val type: TypeName","title":"Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type/#type","text":"val type: TypeName","title":"type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder Builder \u00b6 class Builder : Builder<Builder> Properties \u00b6 Name Summary annotations val annotations: MutableList < AnnotationSpec > modifiers val modifiers: MutableSet < KModifier > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeVariables val typeVariables: MutableSet < TypeVariableName > Functions \u00b6 Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder build fun build(): TypeAliasSpec","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#builder","text":"class Builder : Builder<Builder>","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList < AnnotationSpec > modifiers val modifiers: MutableSet < KModifier > tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeVariables val typeVariables: MutableSet < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder build fun build(): TypeAliasSpec","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addAnnotation addAnnotation \u00b6 fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addAnnotations addAnnotations \u00b6 fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addKdoc addKdoc \u00b6 fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addModifiers addModifiers \u00b6 fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addTypeVariable addTypeVariable \u00b6 fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addTypeVariables addTypeVariables \u00b6 fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / annotations annotations \u00b6 val annotations: MutableList < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/annotations/#annotations","text":"val annotations: MutableList < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / build build \u00b6 fun build(): TypeAliasSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/build/#build","text":"fun build(): TypeAliasSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / modifiers modifiers \u00b6 val modifiers: MutableSet < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableSet < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / tags tags \u00b6 val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/tags/#tags","text":"val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / typeVariables typeVariables \u00b6 val typeVariables: MutableSet < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableSet < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName TypeName \u00b6 sealed class TypeName : Taggable Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . Type names are dumb identifiers only and do not model the values they name. For example, the type name for kotlin.List doesn\u2019t know about the size() function, the fact that lists are collections, or even that it accepts a single type parameter. Instances of this class are immutable value objects that implement equals() and hashCode() properly. Referencing existing types In an annotation processor you can get a type name instance for a type mirror by calling asTypeName . In reflection code, you can use asTypeName . Defining new types Create new reference types like com.example.HelloWorld with ClassName.bestGuess . To build composite types like Set<Long> , use the factory methods on ParameterizedTypeName , TypeVariableName , and WildcardTypeName . Properties \u00b6 Name Summary annotations val annotations: List < AnnotationSpec > isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions \u00b6 Name Summary copy fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList()): TypeName abstract fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), tags: Map < KClass <*>, Any > = this.tags): TypeName equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Extension Functions \u00b6 Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T? Inheritors \u00b6 Name Summary ClassName A fully-qualified class name for top-level and member classes. class ClassName : TypeName , Comparable < ClassName > Dynamic object Dynamic : TypeName LambdaTypeName class LambdaTypeName : TypeName ParameterizedTypeName class ParameterizedTypeName : TypeName TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#typename","text":"sealed class TypeName : Taggable Any type in Kotlin\u2019s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array<String> and Set<String> , and unassignable types like Unit . Type names are dumb identifiers only and do not model the values they name. For example, the type name for kotlin.List doesn\u2019t know about the size() function, the fact that lists are collections, or even that it accepts a single type parameter. Instances of this class are immutable value objects that implement equals() and hashCode() properly. Referencing existing types In an annotation processor you can get a type name instance for a type mirror by calling asTypeName . In reflection code, you can use asTypeName . Defining new types Create new reference types like com.example.HelloWorld with ClassName.bestGuess . To build composite types like Set<Long> , use the factory methods on ParameterizedTypeName , TypeVariableName , and WildcardTypeName .","title":"TypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#properties","text":"Name Summary annotations val annotations: List < AnnotationSpec > isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList()): TypeName abstract fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), tags: Map < KClass <*>, Any > = this.tags): TypeName equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#inheritors","text":"Name Summary ClassName A fully-qualified class name for top-level and member classes. class ClassName : TypeName , Comparable < ClassName > Dynamic object Dynamic : TypeName LambdaTypeName class LambdaTypeName : TypeName ParameterizedTypeName class ParameterizedTypeName : TypeName TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / annotations annotations \u00b6 val annotations: List < AnnotationSpec >","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/annotations/#annotations","text":"val annotations: List < AnnotationSpec >","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / copy copy \u00b6 fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList()): TypeName abstract fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), tags: Map < KClass <*>, Any > = this.tags): TypeName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/copy/#copy","text":"fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList()): TypeName abstract fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), tags: Map < KClass <*>, Any > = this.tags): TypeName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / equals equals \u00b6 open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/equals/#equals","text":"open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / hashCode hashCode \u00b6 open fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/hash-code/#hashcode","text":"open fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-annotated/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / isAnnotated isAnnotated \u00b6 val isAnnotated: Boolean","title":"Is annotated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-annotated/#isannotated","text":"val isAnnotated: Boolean","title":"isAnnotated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-nullable/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / isNullable isNullable \u00b6 val isNullable: Boolean","title":"Is nullable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-nullable/#isnullable","text":"val isNullable: Boolean","title":"isNullable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / toString toString \u00b6 open fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec TypeSpec \u00b6 class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration. Types \u00b6 Name Summary Builder class Builder : Builder<Builder>, Builder<Builder> Kind enum class Kind Properties \u00b6 Name Summary annotationSpecs val annotationSpecs: List < AnnotationSpec > enumConstants val enumConstants: Map < String , TypeSpec > funSpecs val funSpecs: List < FunSpec > initializerBlock val initializerBlock: CodeBlock initializerIndex val initializerIndex: Int isAnnotation val isAnnotation: Boolean isAnonymousClass val isAnonymousClass: Boolean isCompanion val isCompanion: Boolean isEnum val isEnum: Boolean isFunctionalInterface val isFunctionalInterface: Boolean kdoc val kdoc: CodeBlock kind val kind: Kind modifiers val modifiers: Set < KModifier > name val name: String ? primaryConstructor val primaryConstructor: FunSpec ? propertySpecs val propertySpecs: List < PropertySpec > superclass val superclass: TypeName superclassConstructorParameters val superclassConstructorParameters: List < CodeBlock > superinterfaces Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value val superinterfaces: Map < TypeName , CodeBlock ?> typeSpecs val typeSpecs: List < TypeSpec > typeVariables val typeVariables: List < TypeVariableName > Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(kind: Kind = this.kind, name: String ? = this.name): Builder toString fun toString(): String Companion Object Functions \u00b6 Name Summary annotationBuilder fun annotationBuilder(name: String ): Builder fun annotationBuilder(className: ClassName ): Builder anonymousClassBuilder fun anonymousClassBuilder(): Builder classBuilder fun classBuilder(name: String ): Builder fun classBuilder(className: ClassName ): Builder companionObjectBuilder fun companionObjectBuilder(name: String ? = null): Builder enumBuilder fun enumBuilder(name: String ): Builder fun enumBuilder(className: ClassName ): Builder expectClassBuilder fun expectClassBuilder(name: String ): Builder fun expectClassBuilder(className: ClassName ): Builder funInterfaceBuilder fun funInterfaceBuilder(name: String ): Builder fun funInterfaceBuilder(className: ClassName ): Builder interfaceBuilder fun interfaceBuilder(name: String ): Builder fun interfaceBuilder(className: ClassName ): Builder objectBuilder fun objectBuilder(name: String ): Builder fun objectBuilder(className: ClassName ): Builder Extension Functions \u00b6 Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#typespec","text":"class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration.","title":"TypeSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#types","text":"Name Summary Builder class Builder : Builder<Builder>, Builder<Builder> Kind enum class Kind","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#properties","text":"Name Summary annotationSpecs val annotationSpecs: List < AnnotationSpec > enumConstants val enumConstants: Map < String , TypeSpec > funSpecs val funSpecs: List < FunSpec > initializerBlock val initializerBlock: CodeBlock initializerIndex val initializerIndex: Int isAnnotation val isAnnotation: Boolean isAnonymousClass val isAnonymousClass: Boolean isCompanion val isCompanion: Boolean isEnum val isEnum: Boolean isFunctionalInterface val isFunctionalInterface: Boolean kdoc val kdoc: CodeBlock kind val kind: Kind modifiers val modifiers: Set < KModifier > name val name: String ? primaryConstructor val primaryConstructor: FunSpec ? propertySpecs val propertySpecs: List < PropertySpec > superclass val superclass: TypeName superclassConstructorParameters val superclassConstructorParameters: List < CodeBlock > superinterfaces Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value val superinterfaces: Map < TypeName , CodeBlock ?> typeSpecs val typeSpecs: List < TypeSpec > typeVariables val typeVariables: List < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(kind: Kind = this.kind, name: String ? = this.name): Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#companion-object-functions","text":"Name Summary annotationBuilder fun annotationBuilder(name: String ): Builder fun annotationBuilder(className: ClassName ): Builder anonymousClassBuilder fun anonymousClassBuilder(): Builder classBuilder fun classBuilder(name: String ): Builder fun classBuilder(className: ClassName ): Builder companionObjectBuilder fun companionObjectBuilder(name: String ? = null): Builder enumBuilder fun enumBuilder(name: String ): Builder fun enumBuilder(className: ClassName ): Builder expectClassBuilder fun expectClassBuilder(name: String ): Builder fun expectClassBuilder(className: ClassName ): Builder funInterfaceBuilder fun funInterfaceBuilder(name: String ): Builder fun funInterfaceBuilder(className: ClassName ): Builder interfaceBuilder fun interfaceBuilder(name: String ): Builder fun interfaceBuilder(className: ClassName ): Builder objectBuilder fun objectBuilder(name: String ): Builder fun objectBuilder(className: ClassName ): Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#extension-functions","text":"Name Summary tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / annotationBuilder annotationBuilder \u00b6 @JvmStatic fun annotationBuilder(name: String ): Builder @JvmStatic fun annotationBuilder(className: ClassName ): Builder","title":"Annotation builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-builder/#annotationbuilder","text":"@JvmStatic fun annotationBuilder(name: String ): Builder @JvmStatic fun annotationBuilder(className: ClassName ): Builder","title":"annotationBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / annotationSpecs annotationSpecs \u00b6 val annotationSpecs: List < AnnotationSpec >","title":"Annotation specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-specs/#annotationspecs","text":"val annotationSpecs: List < AnnotationSpec >","title":"annotationSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/anonymous-class-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / anonymousClassBuilder anonymousClassBuilder \u00b6 @JvmStatic fun anonymousClassBuilder(): Builder","title":"Anonymous class builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/anonymous-class-builder/#anonymousclassbuilder","text":"@JvmStatic fun anonymousClassBuilder(): Builder","title":"anonymousClassBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/class-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / classBuilder classBuilder \u00b6 @JvmStatic fun classBuilder(name: String ): Builder @JvmStatic fun classBuilder(className: ClassName ): Builder","title":"Class builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/class-builder/#classbuilder","text":"@JvmStatic fun classBuilder(name: String ): Builder @JvmStatic fun classBuilder(className: ClassName ): Builder","title":"classBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/companion-object-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / companionObjectBuilder companionObjectBuilder \u00b6 @JvmStatic @JvmOverloads fun companionObjectBuilder(name: String ? = null): Builder","title":"Companion object builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/companion-object-builder/#companionobjectbuilder","text":"@JvmStatic @JvmOverloads fun companionObjectBuilder(name: String ? = null): Builder","title":"companionObjectBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / enumBuilder enumBuilder \u00b6 @JvmStatic fun enumBuilder(name: String ): Builder @JvmStatic fun enumBuilder(className: ClassName ): Builder","title":"Enum builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-builder/#enumbuilder","text":"@JvmStatic fun enumBuilder(name: String ): Builder @JvmStatic fun enumBuilder(className: ClassName ): Builder","title":"enumBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-constants/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / enumConstants enumConstants \u00b6 val enumConstants: Map < String , TypeSpec >","title":"Enum constants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-constants/#enumconstants","text":"val enumConstants: Map < String , TypeSpec >","title":"enumConstants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/expect-class-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / expectClassBuilder expectClassBuilder \u00b6 @JvmStatic fun expectClassBuilder(name: String ): Builder @JvmStatic fun expectClassBuilder(className: ClassName ): Builder","title":"Expect class builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/expect-class-builder/#expectclassbuilder","text":"@JvmStatic fun expectClassBuilder(name: String ): Builder @JvmStatic fun expectClassBuilder(className: ClassName ): Builder","title":"expectClassBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/fun-interface-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / funInterfaceBuilder funInterfaceBuilder \u00b6 @JvmStatic fun funInterfaceBuilder(name: String ): Builder @JvmStatic fun funInterfaceBuilder(className: ClassName ): Builder","title":"Fun interface builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/fun-interface-builder/#funinterfacebuilder","text":"@JvmStatic fun funInterfaceBuilder(name: String ): Builder @JvmStatic fun funInterfaceBuilder(className: ClassName ): Builder","title":"funInterfaceBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/fun-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / funSpecs funSpecs \u00b6 val funSpecs: List < FunSpec >","title":"Fun specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/fun-specs/#funspecs","text":"val funSpecs: List < FunSpec >","title":"funSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/initializer-block/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / initializerBlock initializerBlock \u00b6 val initializerBlock: CodeBlock","title":"Initializer block"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/initializer-block/#initializerblock","text":"val initializerBlock: CodeBlock","title":"initializerBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/initializer-index/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / initializerIndex initializerIndex \u00b6 val initializerIndex: Int","title":"Initializer index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/initializer-index/#initializerindex","text":"val initializerIndex: Int","title":"initializerIndex"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/interface-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / interfaceBuilder interfaceBuilder \u00b6 @JvmStatic fun interfaceBuilder(name: String ): Builder @JvmStatic fun interfaceBuilder(className: ClassName ): Builder","title":"Interface builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/interface-builder/#interfacebuilder","text":"@JvmStatic fun interfaceBuilder(name: String ): Builder @JvmStatic fun interfaceBuilder(className: ClassName ): Builder","title":"interfaceBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isAnnotation isAnnotation \u00b6 val isAnnotation: Boolean","title":"Is annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-annotation/#isannotation","text":"val isAnnotation: Boolean","title":"isAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-anonymous-class/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isAnonymousClass isAnonymousClass \u00b6 val isAnonymousClass: Boolean","title":"Is anonymous class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-anonymous-class/#isanonymousclass","text":"val isAnonymousClass: Boolean","title":"isAnonymousClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-companion/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isCompanion isCompanion \u00b6 val isCompanion: Boolean","title":"Is companion"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-companion/#iscompanion","text":"val isCompanion: Boolean","title":"isCompanion"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-enum/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isEnum isEnum \u00b6 val isEnum: Boolean","title":"Is enum"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-enum/#isenum","text":"val isEnum: Boolean","title":"isEnum"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-functional-interface/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isFunctionalInterface isFunctionalInterface \u00b6 val isFunctionalInterface: Boolean","title":"Is functional interface"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-functional-interface/#isfunctionalinterface","text":"val isFunctionalInterface: Boolean","title":"isFunctionalInterface"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / kdoc kdoc \u00b6 val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kind/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / kind kind \u00b6 val kind: Kind","title":"Kind"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kind/#kind","text":"val kind: Kind","title":"kind"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / modifiers modifiers \u00b6 val modifiers: Set < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/modifiers/#modifiers","text":"val modifiers: Set < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / name name \u00b6 val name: String ?","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/name/#name","text":"val name: String ?","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/object-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / objectBuilder objectBuilder \u00b6 @JvmStatic fun objectBuilder(name: String ): Builder @JvmStatic fun objectBuilder(className: ClassName ): Builder","title":"Object builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/object-builder/#objectbuilder","text":"@JvmStatic fun objectBuilder(name: String ): Builder @JvmStatic fun objectBuilder(className: ClassName ): Builder","title":"objectBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/primary-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / primaryConstructor primaryConstructor \u00b6 val primaryConstructor: FunSpec ?","title":"Primary constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/primary-constructor/#primaryconstructor","text":"val primaryConstructor: FunSpec ?","title":"primaryConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/property-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / propertySpecs propertySpecs \u00b6 val propertySpecs: List < PropertySpec >","title":"Property specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/property-specs/#propertyspecs","text":"val propertySpecs: List < PropertySpec >","title":"propertySpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass-constructor-parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / superclassConstructorParameters superclassConstructorParameters \u00b6 val superclassConstructorParameters: List < CodeBlock >","title":"Superclass constructor parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass-constructor-parameters/#superclassconstructorparameters","text":"val superclassConstructorParameters: List < CodeBlock >","title":"superclassConstructorParameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / superclass superclass \u00b6 val superclass: TypeName","title":"Superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass/#superclass","text":"val superclass: TypeName","title":"superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superinterfaces/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / superinterfaces superinterfaces \u00b6 val superinterfaces: Map < TypeName , CodeBlock ?> Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value","title":"Superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superinterfaces/#superinterfaces","text":"val superinterfaces: Map < TypeName , CodeBlock ?> Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value","title":"superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / toBuilder toBuilder \u00b6 @JvmOverloads fun toBuilder(kind: Kind = this.kind, name: String ? = this.name): Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-builder/#tobuilder","text":"@JvmOverloads fun toBuilder(kind: Kind = this.kind, name: String ? = this.name): Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / typeSpecs typeSpecs \u00b6 val typeSpecs: List < TypeSpec >","title":"Type specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-specs/#typespecs","text":"val typeSpecs: List < TypeSpec >","title":"typeSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / typeVariables typeVariables \u00b6 val typeVariables: List < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-variables/#typevariables","text":"val typeVariables: List < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder Builder \u00b6 class Builder : Builder<Builder>, Builder<Builder> Properties \u00b6 Name Summary annotationSpecs val annotationSpecs: MutableList < AnnotationSpec > enumConstants val enumConstants: MutableMap < String , TypeSpec > funSpecs val funSpecs: MutableList < FunSpec > initializerIndex var initializerIndex: Int modifiers val modifiers: MutableSet < KModifier > originatingElements Mutable map of the current originating elements this builder contains. val originatingElements: MutableList < Element > propertySpecs val propertySpecs: MutableList < PropertySpec > superclassConstructorParameters val superclassConstructorParameters: MutableList < CodeBlock > superinterfaces val superinterfaces: MutableMap < TypeName , CodeBlock ?> tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeSpecs val typeSpecs: MutableList < TypeSpec > typeVariables val typeVariables: MutableList < TypeVariableName > Functions \u00b6 Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addEnumConstant fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): Builder addFunction fun addFunction(funSpec: FunSpec ): Builder addFunctions fun addFunctions(funSpecs: Iterable < FunSpec >): Builder addInitializerBlock fun addInitializerBlock(block: CodeBlock ): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addProperties fun addProperties(propertySpecs: Iterable < PropertySpec >): Builder addProperty fun addProperty(propertySpec: PropertySpec ): Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder addSuperclassConstructorParameter fun addSuperclassConstructorParameter(format: String , vararg args: Any ): Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): Builder addSuperinterface fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, constructorParameterName: String ): Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): Builder addSuperinterfaces fun addSuperinterfaces(superinterfaces: Iterable < TypeName >): Builder addType fun addType(typeSpec: TypeSpec ): Builder addTypes fun addTypes(typeSpecs: Iterable < TypeSpec >): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder build fun build(): TypeSpec primaryConstructor fun primaryConstructor(primaryConstructor: FunSpec ?): Builder superclass fun superclass(superclass: TypeName ): Builder fun superclass(superclass: Type ): Builder fun superclass(superclass: KClass <*>): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#builder","text":"class Builder : Builder<Builder>, Builder<Builder>","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#properties","text":"Name Summary annotationSpecs val annotationSpecs: MutableList < AnnotationSpec > enumConstants val enumConstants: MutableMap < String , TypeSpec > funSpecs val funSpecs: MutableList < FunSpec > initializerIndex var initializerIndex: Int modifiers val modifiers: MutableSet < KModifier > originatingElements Mutable map of the current originating elements this builder contains. val originatingElements: MutableList < Element > propertySpecs val propertySpecs: MutableList < PropertySpec > superclassConstructorParameters val superclassConstructorParameters: MutableList < CodeBlock > superinterfaces val superinterfaces: MutableMap < TypeName , CodeBlock ?> tags Mutable map of the current tags this builder contains. val tags: MutableMap < KClass <*>, Any > typeSpecs val typeSpecs: MutableList < TypeSpec > typeVariables val typeVariables: MutableList < TypeVariableName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder addEnumConstant fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): Builder addFunction fun addFunction(funSpec: FunSpec ): Builder addFunctions fun addFunctions(funSpecs: Iterable < FunSpec >): Builder addInitializerBlock fun addInitializerBlock(block: CodeBlock ): Builder addKdoc fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder addProperties fun addProperties(propertySpecs: Iterable < PropertySpec >): Builder addProperty fun addProperty(propertySpec: PropertySpec ): Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder addSuperclassConstructorParameter fun addSuperclassConstructorParameter(format: String , vararg args: Any ): Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): Builder addSuperinterface fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, constructorParameterName: String ): Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): Builder addSuperinterfaces fun addSuperinterfaces(superinterfaces: Iterable < TypeName >): Builder addType fun addType(typeSpec: TypeSpec ): Builder addTypes fun addTypes(typeSpecs: Iterable < TypeSpec >): Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder build fun build(): TypeSpec primaryConstructor fun primaryConstructor(primaryConstructor: FunSpec ?): Builder superclass fun superclass(superclass: TypeName ): Builder fun superclass(superclass: Type ): Builder fun superclass(superclass: KClass <*>): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addAnnotation addAnnotation \u00b6 fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): Builder fun addAnnotation(annotation: ClassName ): Builder fun addAnnotation(annotation: Class <*>): Builder fun addAnnotation(annotation: KClass <*>): Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addAnnotations addAnnotations \u00b6 fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable < AnnotationSpec >): Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-enum-constant/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addEnumConstant addEnumConstant \u00b6 @JvmOverloads fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): Builder","title":"Add enum constant"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-enum-constant/#addenumconstant","text":"@JvmOverloads fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): Builder","title":"addEnumConstant"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-function/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addFunction addFunction \u00b6 fun addFunction(funSpec: FunSpec ): Builder","title":"Add function"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-function/#addfunction","text":"fun addFunction(funSpec: FunSpec ): Builder","title":"addFunction"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-functions/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addFunctions addFunctions \u00b6 fun addFunctions(funSpecs: Iterable < FunSpec >): Builder","title":"Add functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-functions/#addfunctions","text":"fun addFunctions(funSpecs: Iterable < FunSpec >): Builder","title":"addFunctions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-initializer-block/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addInitializerBlock addInitializerBlock \u00b6 fun addInitializerBlock(block: CodeBlock ): Builder","title":"Add initializer block"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-initializer-block/#addinitializerblock","text":"fun addInitializerBlock(block: CodeBlock ): Builder","title":"addInitializerBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addKdoc addKdoc \u00b6 fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): Builder fun addKdoc(block: CodeBlock ): Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addModifiers addModifiers \u00b6 fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): Builder fun addModifiers(modifiers: Iterable < KModifier >): Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-properties/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addProperties addProperties \u00b6 fun addProperties(propertySpecs: Iterable < PropertySpec >): Builder","title":"Add properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-properties/#addproperties","text":"fun addProperties(propertySpecs: Iterable < PropertySpec >): Builder","title":"addProperties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-property/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addProperty addProperty \u00b6 fun addProperty(propertySpec: PropertySpec ): Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"Add property"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-property/#addproperty","text":"fun addProperty(propertySpec: PropertySpec ): Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: KClass <*>, vararg modifiers: KModifier ): Builder fun addProperty(name: String , type: TypeName , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: Type , modifiers: Iterable < KModifier >): Builder fun addProperty(name: String , type: KClass <*>, modifiers: Iterable < KModifier >): Builder","title":"addProperty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superclass-constructor-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addSuperclassConstructorParameter addSuperclassConstructorParameter \u00b6 fun addSuperclassConstructorParameter(format: String , vararg args: Any ): Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): Builder","title":"Add superclass constructor parameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superclass-constructor-parameter/#addsuperclassconstructorparameter","text":"fun addSuperclassConstructorParameter(format: String , vararg args: Any ): Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): Builder","title":"addSuperclassConstructorParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterface/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addSuperinterface addSuperinterface \u00b6 fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, constructorParameterName: String ): Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): Builder","title":"Add superinterface"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterface/#addsuperinterface","text":"fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, delegate: CodeBlock = CodeBlock.EMPTY): Builder fun addSuperinterface(superinterface: KClass <*>, constructorParameterName: String ): Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): Builder","title":"addSuperinterface"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterfaces/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addSuperinterfaces addSuperinterfaces \u00b6 fun addSuperinterfaces(superinterfaces: Iterable < TypeName >): Builder","title":"Add superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterfaces/#addsuperinterfaces","text":"fun addSuperinterfaces(superinterfaces: Iterable < TypeName >): Builder","title":"addSuperinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addTypeVariable addTypeVariable \u00b6 fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addTypeVariables addTypeVariables \u00b6 fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable < TypeVariableName >): Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addType addType \u00b6 fun addType(typeSpec: TypeSpec ): Builder","title":"Add type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type/#addtype","text":"fun addType(typeSpec: TypeSpec ): Builder","title":"addType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-types/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addTypes addTypes \u00b6 fun addTypes(typeSpecs: Iterable < TypeSpec >): Builder","title":"Add types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-types/#addtypes","text":"fun addTypes(typeSpecs: Iterable < TypeSpec >): Builder","title":"addTypes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/annotation-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / annotationSpecs annotationSpecs \u00b6 val annotationSpecs: MutableList < AnnotationSpec >","title":"Annotation specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/annotation-specs/#annotationspecs","text":"val annotationSpecs: MutableList < AnnotationSpec >","title":"annotationSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / build build \u00b6 fun build(): TypeSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/build/#build","text":"fun build(): TypeSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/enum-constants/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / enumConstants enumConstants \u00b6 val enumConstants: MutableMap < String , TypeSpec >","title":"Enum constants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/enum-constants/#enumconstants","text":"val enumConstants: MutableMap < String , TypeSpec >","title":"enumConstants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/fun-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / funSpecs funSpecs \u00b6 val funSpecs: MutableList < FunSpec >","title":"Fun specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/fun-specs/#funspecs","text":"val funSpecs: MutableList < FunSpec >","title":"funSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/initializer-index/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / initializerIndex initializerIndex \u00b6 var initializerIndex: Int","title":"Initializer index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/initializer-index/#initializerindex","text":"var initializerIndex: Int","title":"initializerIndex"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / modifiers modifiers \u00b6 val modifiers: MutableSet < KModifier >","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableSet < KModifier >","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / originatingElements originatingElements \u00b6 val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/originating-elements/#originatingelements","text":"val originatingElements: MutableList < Element > Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/primary-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / primaryConstructor primaryConstructor \u00b6 fun primaryConstructor(primaryConstructor: FunSpec ?): Builder","title":"Primary constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/primary-constructor/#primaryconstructor","text":"fun primaryConstructor(primaryConstructor: FunSpec ?): Builder","title":"primaryConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/property-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / propertySpecs propertySpecs \u00b6 val propertySpecs: MutableList < PropertySpec >","title":"Property specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/property-specs/#propertyspecs","text":"val propertySpecs: MutableList < PropertySpec >","title":"propertySpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass-constructor-parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / superclassConstructorParameters superclassConstructorParameters \u00b6 val superclassConstructorParameters: MutableList < CodeBlock >","title":"Superclass constructor parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass-constructor-parameters/#superclassconstructorparameters","text":"val superclassConstructorParameters: MutableList < CodeBlock >","title":"superclassConstructorParameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / superclass superclass \u00b6 fun superclass(superclass: TypeName ): Builder fun superclass(superclass: Type ): Builder fun superclass(superclass: KClass <*>): Builder","title":"Superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass/#superclass","text":"fun superclass(superclass: TypeName ): Builder fun superclass(superclass: Type ): Builder fun superclass(superclass: KClass <*>): Builder","title":"superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superinterfaces/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / superinterfaces superinterfaces \u00b6 val superinterfaces: MutableMap < TypeName , CodeBlock ?>","title":"Superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superinterfaces/#superinterfaces","text":"val superinterfaces: MutableMap < TypeName , CodeBlock ?>","title":"superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / tags tags \u00b6 val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/tags/#tags","text":"val tags: MutableMap < KClass <*>, Any > Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / typeSpecs typeSpecs \u00b6 val typeSpecs: MutableList < TypeSpec >","title":"Type specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-specs/#typespecs","text":"val typeSpecs: MutableList < TypeSpec >","title":"typeSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / typeVariables typeVariables \u00b6 val typeVariables: MutableList < TypeVariableName >","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableList < TypeVariableName >","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind Kind \u00b6 enum class Kind Enum Values \u00b6 Name Summary CLASS OBJECT INTERFACE","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/#kind","text":"enum class Kind","title":"Kind"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/#enum-values","text":"Name Summary CLASS OBJECT INTERFACE","title":"Enum Values"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-c-l-a-s-s/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind / CLASS CLASS \u00b6 CLASS","title":" c l a s s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-c-l-a-s-s/#class","text":"CLASS","title":"CLASS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-i-n-t-e-r-f-a-c-e/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind / INTERFACE INTERFACE \u00b6 INTERFACE","title":" i n t e r f a c e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-i-n-t-e-r-f-a-c-e/#interface","text":"INTERFACE","title":"INTERFACE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-o-b-j-e-c-t/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind / OBJECT OBJECT \u00b6 OBJECT","title":" o b j e c t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-o-b-j-e-c-t/#object","text":"OBJECT","title":"OBJECT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName TypeVariableName \u00b6 class TypeVariableName : TypeName Properties \u00b6 Name Summary bounds val bounds: List < TypeName > isReified val isReified: Boolean name val name: String variance Either KModifier.IN , KModifier.OUT , or null. val variance: KModifier ? Functions \u00b6 Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): TypeVariableName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), bounds: List < TypeName > = this.bounds.toList(), reified: Boolean = this.isReified, tags: Map < KClass <*>, Any > = this.tagMap.tags): TypeVariableName Companion Object Functions \u00b6 Name Summary invoke Returns type variable named name with variance and without bounds. operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds . operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: KClass <*>, variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , bounds: List < TypeName >, variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , bounds: Iterable < KClass <*>>, variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , bounds: Iterable < Type >, variance: KModifier ? = null): TypeVariableName Extension Functions \u00b6 Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#typevariablename","text":"class TypeVariableName : TypeName","title":"TypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#properties","text":"Name Summary bounds val bounds: List < TypeName > isReified val isReified: Boolean name val name: String variance Either KModifier.IN , KModifier.OUT , or null. val variance: KModifier ?","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): TypeVariableName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), bounds: List < TypeName > = this.bounds.toList(), reified: Boolean = this.isReified, tags: Map < KClass <*>, Any > = this.tagMap.tags): TypeVariableName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#companion-object-functions","text":"Name Summary invoke Returns type variable named name with variance and without bounds. operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds . operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: KClass <*>, variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , bounds: List < TypeName >, variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , bounds: Iterable < KClass <*>>, variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , bounds: Iterable < Type >, variance: KModifier ? = null): TypeVariableName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/bounds/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / bounds bounds \u00b6 val bounds: List < TypeName >","title":"Bounds"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/bounds/#bounds","text":"val bounds: List < TypeName >","title":"bounds"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / copy copy \u00b6 fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): TypeVariableName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), bounds: List < TypeName > = this.bounds.toList(), reified: Boolean = this.isReified, tags: Map < KClass <*>, Any > = this.tagMap.tags): TypeVariableName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): TypeVariableName fun copy(nullable: Boolean = this.isNullable, annotations: List < AnnotationSpec > = this.annotations.toList(), bounds: List < TypeName > = this.bounds.toList(), reified: Boolean = this.isReified, tags: Map < KClass <*>, Any > = this.tagMap.tags): TypeVariableName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/invoke/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / invoke invoke \u00b6 @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and without bounds. @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: KClass <*>, variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , bounds: List < TypeName >, variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"getWithClasses\") @JvmOverloads operator fun invoke(name: String , bounds: Iterable < KClass <*>>, variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"getWithTypes\") @JvmOverloads operator fun invoke(name: String , bounds: Iterable < Type >, variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds .","title":"Invoke"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/invoke/#invoke","text":"@JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and without bounds. @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: KClass <*>, variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , bounds: List < TypeName >, variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"getWithClasses\") @JvmOverloads operator fun invoke(name: String , bounds: Iterable < KClass <*>>, variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"getWithTypes\") @JvmOverloads operator fun invoke(name: String , bounds: Iterable < Type >, variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds .","title":"invoke"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/is-reified/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / isReified isReified \u00b6 val isReified: Boolean","title":"Is reified"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/is-reified/#isreified","text":"val isReified: Boolean","title":"isReified"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / name name \u00b6 val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/variance/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / variance variance \u00b6 val variance: KModifier ? Either KModifier.IN , KModifier.OUT , or null.","title":"Variance"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/variance/#variance","text":"val variance: KModifier ? Either KModifier.IN , KModifier.OUT , or null.","title":"variance"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName WildcardTypeName \u00b6 class WildcardTypeName : TypeName Properties \u00b6 Name Summary inTypes val inTypes: List < TypeName > outTypes val outTypes: List < TypeName > Functions \u00b6 Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): WildcardTypeName Companion Object Functions \u00b6 Name Summary consumerOf Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . fun consumerOf(inType: TypeName ): WildcardTypeName fun consumerOf(inType: Type ): WildcardTypeName fun consumerOf(inType: KClass <*>): WildcardTypeName producerOf Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . fun producerOf(outType: TypeName ): WildcardTypeName fun producerOf(outType: Type ): WildcardTypeName fun producerOf(outType: KClass <*>): WildcardTypeName Extension Functions \u00b6 Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#wildcardtypename","text":"class WildcardTypeName : TypeName","title":"WildcardTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#properties","text":"Name Summary inTypes val inTypes: List < TypeName > outTypes val outTypes: List < TypeName >","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): WildcardTypeName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#companion-object-functions","text":"Name Summary consumerOf Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . fun consumerOf(inType: TypeName ): WildcardTypeName fun consumerOf(inType: Type ): WildcardTypeName fun consumerOf(inType: KClass <*>): WildcardTypeName producerOf Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . fun producerOf(outType: TypeName ): WildcardTypeName fun producerOf(outType: Type ): WildcardTypeName fun producerOf(outType: KClass <*>): WildcardTypeName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName tag Returns the tag attached with T as a key, or null if no tag is attached with that key. fun <T : Any > Taggable .tag(): T?","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/consumer-of/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / consumerOf consumerOf \u00b6 @JvmStatic fun consumerOf(inType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . @JvmStatic fun consumerOf(inType: Type ): WildcardTypeName @JvmStatic fun consumerOf(inType: KClass <*>): WildcardTypeName","title":"Consumer of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/consumer-of/#consumerof","text":"@JvmStatic fun consumerOf(inType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . @JvmStatic fun consumerOf(inType: Type ): WildcardTypeName @JvmStatic fun consumerOf(inType: KClass <*>): WildcardTypeName","title":"consumerOf"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / copy copy \u00b6 fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): WildcardTypeName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List < AnnotationSpec >, tags: Map < KClass <*>, Any >): WildcardTypeName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/in-types/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / inTypes inTypes \u00b6 val inTypes: List < TypeName >","title":"In types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/in-types/#intypes","text":"val inTypes: List < TypeName >","title":"inTypes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/out-types/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / outTypes outTypes \u00b6 val outTypes: List < TypeName >","title":"Out types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/out-types/#outtypes","text":"val outTypes: List < TypeName >","title":"outTypes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/producer-of/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / producerOf producerOf \u00b6 @JvmStatic fun producerOf(outType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . @JvmStatic fun producerOf(outType: Type ): WildcardTypeName @JvmStatic fun producerOf(outType: KClass <*>): WildcardTypeName","title":"Producer of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/producer-of/#producerof","text":"@JvmStatic fun producerOf(outType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . @JvmStatic fun producerOf(outType: Type ): WildcardTypeName @JvmStatic fun producerOf(outType: KClass <*>): WildcardTypeName","title":"producerOf"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.Class Extensions for java.lang.Class \u00b6 Name Summary asClassName fun Class <*>.asClassName(): ClassName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/#extensions-for-javalangclass","text":"Name Summary asClassName fun Class <*>.asClassName(): ClassName","title":"Extensions for java.lang.Class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/as-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.Class / asClassName asClassName \u00b6 @JvmName(\"get\") fun Class <*>.asClassName(): ClassName","title":"As class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/as-class-name/#asclassname","text":"@JvmName(\"get\") fun Class <*>.asClassName(): ClassName","title":"asClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.ParameterizedType Extensions for java.lang.reflect.ParameterizedType \u00b6 Name Summary asParameterizedTypeName Returns a parameterized type equivalent to type . fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/#extensions-for-javalangreflectparameterizedtype","text":"Name Summary asParameterizedTypeName Returns a parameterized type equivalent to type . fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName","title":"Extensions for java.lang.reflect.ParameterizedType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/as-parameterized-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.ParameterizedType / asParameterizedTypeName asParameterizedTypeName \u00b6 @JvmName(\"get\") fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName Returns a parameterized type equivalent to type .","title":"As parameterized type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/as-parameterized-type-name/#asparameterizedtypename","text":"@JvmName(\"get\") fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName Returns a parameterized type equivalent to type .","title":"asParameterizedTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.Type Extensions for java.lang.reflect.Type \u00b6 Name Summary asTypeName Returns a TypeName equivalent to this Type . fun Type .asTypeName(): TypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/#extensions-for-javalangreflecttype","text":"Name Summary asTypeName Returns a TypeName equivalent to this Type . fun Type .asTypeName(): TypeName","title":"Extensions for java.lang.reflect.Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.Type / asTypeName asTypeName \u00b6 @JvmName(\"get\") fun Type .asTypeName(): TypeName Returns a TypeName equivalent to this Type .","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/as-type-name/#astypename","text":"@JvmName(\"get\") fun Type .asTypeName(): TypeName Returns a TypeName equivalent to this Type .","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.WildcardType Extensions for java.lang.reflect.WildcardType \u00b6 Name Summary asWildcardTypeName fun WildcardType .asWildcardTypeName(): TypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/#extensions-for-javalangreflectwildcardtype","text":"Name Summary asWildcardTypeName fun WildcardType .asWildcardTypeName(): TypeName","title":"Extensions for java.lang.reflect.WildcardType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/as-wildcard-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.WildcardType / asWildcardTypeName asWildcardTypeName \u00b6 @JvmName(\"get\") fun WildcardType .asWildcardTypeName(): TypeName","title":"As wildcard type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/as-wildcard-type-name/#aswildcardtypename","text":"@JvmName(\"get\") fun WildcardType .asWildcardTypeName(): TypeName","title":"asWildcardTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeElement Extensions for javax.lang.model.element.TypeElement \u00b6 Name Summary asClassName Returns the class name for element . fun TypeElement .~~asClassName~~(): ClassName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/#extensions-for-javaxlangmodelelementtypeelement","text":"Name Summary asClassName Returns the class name for element . fun TypeElement .~~asClassName~~(): ClassName","title":"Extensions for javax.lang.model.element.TypeElement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/as-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeElement / asClassName asClassName \u00b6 @JvmName(\"get\") fun TypeElement .~~asClassName~~(): ClassName Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead. Returns the class name for element .","title":"As class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/as-class-name/#asclassname","text":"@JvmName(\"get\") fun TypeElement .~~asClassName~~(): ClassName Deprecated: Element APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead. Returns the class name for element .","title":"asClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeParameterElement Extensions for javax.lang.model.element.TypeParameterElement \u00b6 Name Summary asTypeVariableName Returns type variable equivalent to element . fun TypeParameterElement .asTypeVariableName(): TypeVariableName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/#extensions-for-javaxlangmodelelementtypeparameterelement","text":"Name Summary asTypeVariableName Returns type variable equivalent to element . fun TypeParameterElement .asTypeVariableName(): TypeVariableName","title":"Extensions for javax.lang.model.element.TypeParameterElement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/as-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeParameterElement / asTypeVariableName asTypeVariableName \u00b6 @JvmName(\"get\") fun TypeParameterElement .asTypeVariableName(): TypeVariableName Returns type variable equivalent to element .","title":"As type variable name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/as-type-variable-name/#astypevariablename","text":"@JvmName(\"get\") fun TypeParameterElement .asTypeVariableName(): TypeVariableName Returns type variable equivalent to element .","title":"asTypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeMirror Extensions for javax.lang.model.type.TypeMirror \u00b6 Name Summary asTypeName Returns a TypeName equivalent to this TypeMirror . fun TypeMirror .~~asTypeName~~(): TypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/#extensions-for-javaxlangmodeltypetypemirror","text":"Name Summary asTypeName Returns a TypeName equivalent to this TypeMirror . fun TypeMirror .~~asTypeName~~(): TypeName","title":"Extensions for javax.lang.model.type.TypeMirror"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeMirror / asTypeName asTypeName \u00b6 @JvmName(\"get\") fun TypeMirror .~~asTypeName~~(): TypeName Deprecated: Mirror APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead. Returns a TypeName equivalent to this TypeMirror .","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/as-type-name/#astypename","text":"@JvmName(\"get\") fun TypeMirror .~~asTypeName~~(): TypeName Deprecated: Mirror APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead. Returns a TypeName equivalent to this TypeMirror .","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeVariable Extensions for javax.lang.model.type.TypeVariable \u00b6 Name Summary asTypeVariableName Returns type variable equivalent to mirror . fun TypeVariable .asTypeVariableName(): TypeVariableName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/#extensions-for-javaxlangmodeltypetypevariable","text":"Name Summary asTypeVariableName Returns type variable equivalent to mirror . fun TypeVariable .asTypeVariableName(): TypeVariableName","title":"Extensions for javax.lang.model.type.TypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/as-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeVariable / asTypeVariableName asTypeVariableName \u00b6 @JvmName(\"get\") fun TypeVariable .asTypeVariableName(): TypeVariableName Returns type variable equivalent to mirror .","title":"As type variable name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/as-type-variable-name/#astypevariablename","text":"@JvmName(\"get\") fun TypeVariable .asTypeVariableName(): TypeVariableName Returns type variable equivalent to mirror .","title":"asTypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.WildcardType Extensions for javax.lang.model.type.WildcardType \u00b6 Name Summary asWildcardTypeName fun WildcardType .~~asWildcardTypeName~~(): TypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/#extensions-for-javaxlangmodeltypewildcardtype","text":"Name Summary asWildcardTypeName fun WildcardType .~~asWildcardTypeName~~(): TypeName","title":"Extensions for javax.lang.model.type.WildcardType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/as-wildcard-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.WildcardType / asWildcardTypeName asWildcardTypeName \u00b6 @JvmName(\"get\") fun WildcardType .~~asWildcardTypeName~~(): TypeName Deprecated: Mirror APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"As wildcard type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/as-wildcard-type-name/#aswildcardtypename","text":"@JvmName(\"get\") fun WildcardType .~~asWildcardTypeName~~(): TypeName Deprecated: Mirror APIs don\u2019t give complete information on Kotlin types. Consider using the kotlinpoet-metadata APIs instead.","title":"asWildcardTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.collections.Collection Extensions for kotlin.collections.Collection \u00b6 Name Summary joinToCode fun Collection < CodeBlock >.joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/#extensions-for-kotlincollectionscollection","text":"Name Summary joinToCode fun Collection < CodeBlock >.joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"Extensions for kotlin.collections.Collection"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/join-to-code/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.collections.Collection / joinToCode joinToCode \u00b6 @JvmOverloads fun Collection < CodeBlock >.joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"Join to code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/join-to-code/#jointocode","text":"@JvmOverloads fun Collection < CodeBlock >.joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"joinToCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KClass Extensions for kotlin.reflect.KClass \u00b6 Name Summary asClassName fun KClass <*>.asClassName(): ClassName asTypeName Returns a TypeName equivalent to this KClass . fun KClass <*>.asTypeName(): ClassName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/#extensions-for-kotlinreflectkclass","text":"Name Summary asClassName fun KClass <*>.asClassName(): ClassName asTypeName Returns a TypeName equivalent to this KClass . fun KClass <*>.asTypeName(): ClassName","title":"Extensions for kotlin.reflect.KClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KClass / asClassName asClassName \u00b6 @JvmName(\"get\") fun KClass <*>.asClassName(): ClassName","title":"As class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-class-name/#asclassname","text":"@JvmName(\"get\") fun KClass <*>.asClassName(): ClassName","title":"asClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KClass / asTypeName asTypeName \u00b6 @JvmName(\"get\") fun KClass <*>.asTypeName(): ClassName Returns a TypeName equivalent to this KClass .","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-type-name/#astypename","text":"@JvmName(\"get\") fun KClass <*>.asTypeName(): ClassName Returns a TypeName equivalent to this KClass .","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KType Extensions for kotlin.reflect.KType \u00b6 Name Summary asTypeName Returns a class name equivalent to given Kotlin KType. fun KType .asTypeName(): TypeName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/#extensions-for-kotlinreflectktype","text":"Name Summary asTypeName Returns a class name equivalent to given Kotlin KType. fun KType .asTypeName(): TypeName","title":"Extensions for kotlin.reflect.KType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KType / asTypeName asTypeName \u00b6 fun KType .asTypeName(): TypeName Returns a class name equivalent to given Kotlin KType.","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/as-type-name/#astypename","text":"fun KType .asTypeName(): TypeName Returns a class name equivalent to given Kotlin KType.","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KTypeParameter Extensions for kotlin.reflect.KTypeParameter \u00b6 Name Summary asTypeVariableName fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/#extensions-for-kotlinreflectktypeparameter","text":"Name Summary asTypeVariableName fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"Extensions for kotlin.reflect.KTypeParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/as-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KTypeParameter / asTypeVariableName asTypeVariableName \u00b6 fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"As type variable name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/as-type-variable-name/#astypevariablename","text":"fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"asTypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm Package com.squareup.kotlinpoet.jvm \u00b6 Functions \u00b6 Name Summary jvmDefault fun Builder.jvmDefault(): Builder jvmField fun Builder.jvmField(): Builder jvmMultifileClass fun Builder.jvmMultifileClass(): Builder jvmName fun Builder.jvmName(name: String ): Builder fun Builder.jvmName(name: String ): Builder jvmOverloads fun Builder.jvmOverloads(): Builder jvmStatic fun Builder.jvmStatic(): Builder jvmSuppressWildcards fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName strictfp fun Builder.strictfp(): Builder synchronized fun Builder.synchronized(): Builder throws fun Builder.throws(vararg exceptionClasses: KClass <out Throwable >): Builder fun Builder.throws(vararg exceptionClasses: Type ): Builder fun Builder.throws(vararg exceptionClasses: TypeName ): Builder fun Builder.throws(exceptionClasses: Iterable < TypeName >): Builder transient fun Builder.transient(): Builder volatile fun Builder.volatile(): Builder","title":"Index"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/#package-comsquareupkotlinpoetjvm","text":"","title":"Package com.squareup.kotlinpoet.jvm"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/#functions","text":"Name Summary jvmDefault fun Builder.jvmDefault(): Builder jvmField fun Builder.jvmField(): Builder jvmMultifileClass fun Builder.jvmMultifileClass(): Builder jvmName fun Builder.jvmName(name: String ): Builder fun Builder.jvmName(name: String ): Builder jvmOverloads fun Builder.jvmOverloads(): Builder jvmStatic fun Builder.jvmStatic(): Builder jvmSuppressWildcards fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName strictfp fun Builder.strictfp(): Builder synchronized fun Builder.synchronized(): Builder throws fun Builder.throws(vararg exceptionClasses: KClass <out Throwable >): Builder fun Builder.throws(vararg exceptionClasses: Type ): Builder fun Builder.throws(vararg exceptionClasses: TypeName ): Builder fun Builder.throws(exceptionClasses: Iterable < TypeName >): Builder transient fun Builder.transient(): Builder volatile fun Builder.volatile(): Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-default/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmDefault jvmDefault \u00b6 fun Builder.jvmDefault(): Builder fun Builder.jvmDefault(): Builder","title":"Jvm default"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-default/#jvmdefault","text":"fun Builder.jvmDefault(): Builder fun Builder.jvmDefault(): Builder","title":"jvmDefault"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-field/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmField jvmField \u00b6 fun Builder.jvmField(): Builder","title":"Jvm field"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-field/#jvmfield","text":"fun Builder.jvmField(): Builder","title":"jvmField"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-multifile-class/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmMultifileClass jvmMultifileClass \u00b6 fun Builder.jvmMultifileClass(): Builder","title":"Jvm multifile class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-multifile-class/#jvmmultifileclass","text":"fun Builder.jvmMultifileClass(): Builder","title":"jvmMultifileClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-name/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmName jvmName \u00b6 fun Builder.jvmName(name: String ): Builder fun Builder.jvmName(name: String ): Builder","title":"Jvm name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-name/#jvmname","text":"fun Builder.jvmName(name: String ): Builder fun Builder.jvmName(name: String ): Builder","title":"jvmName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-overloads/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmOverloads jvmOverloads \u00b6 fun Builder.jvmOverloads(): Builder","title":"Jvm overloads"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-overloads/#jvmoverloads","text":"fun Builder.jvmOverloads(): Builder","title":"jvmOverloads"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-static/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmStatic jvmStatic \u00b6 fun Builder.jvmStatic(): Builder fun Builder.jvmStatic(): Builder","title":"Jvm static"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-static/#jvmstatic","text":"fun Builder.jvmStatic(): Builder fun Builder.jvmStatic(): Builder","title":"jvmStatic"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-suppress-wildcards/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmSuppressWildcards jvmSuppressWildcards \u00b6 fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName","title":"Jvm suppress wildcards"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-suppress-wildcards/#jvmsuppresswildcards","text":"fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun Builder.jvmSuppressWildcards(suppress: Boolean = true): Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName","title":"jvmSuppressWildcards"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-wildcard/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmWildcard jvmWildcard \u00b6 fun TypeName .jvmWildcard(): TypeName","title":"Jvm wildcard"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-wildcard/#jvmwildcard","text":"fun TypeName .jvmWildcard(): TypeName","title":"jvmWildcard"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/strictfp/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / strictfp strictfp \u00b6 fun Builder.strictfp(): Builder","title":"Strictfp"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/strictfp/#strictfp","text":"fun Builder.strictfp(): Builder","title":"strictfp"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/synchronized/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / synchronized synchronized \u00b6 fun Builder.synchronized(): Builder","title":"Synchronized"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/synchronized/#synchronized","text":"fun Builder.synchronized(): Builder","title":"synchronized"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/throws/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / throws throws \u00b6 fun Builder.throws(vararg exceptionClasses: KClass <out Throwable >): Builder fun Builder.throws(vararg exceptionClasses: Type ): Builder fun Builder.throws(vararg exceptionClasses: TypeName ): Builder fun Builder.throws(exceptionClasses: Iterable < TypeName >): Builder","title":"Throws"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/throws/#throws","text":"fun Builder.throws(vararg exceptionClasses: KClass <out Throwable >): Builder fun Builder.throws(vararg exceptionClasses: Type ): Builder fun Builder.throws(vararg exceptionClasses: TypeName ): Builder fun Builder.throws(exceptionClasses: Iterable < TypeName >): Builder","title":"throws"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/transient/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / transient transient \u00b6 fun Builder.transient(): Builder","title":"Transient"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/transient/#transient","text":"fun Builder.transient(): Builder","title":"transient"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/volatile/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / volatile volatile \u00b6 fun Builder.volatile(): Builder","title":"Volatile"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/volatile/#volatile","text":"fun Builder.volatile(): Builder","title":"volatile"},{"location":"1.x/kotlinpoet-classinspector-elements/","text":"kotlinpoet-classinspector-elements Packages \u00b6 Name Summary com.squareup.kotlinpoet.classinspector.elements Index \u00b6 All Types","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-elements/#packages","text":"Name Summary com.squareup.kotlinpoet.classinspector.elements","title":"Packages"},{"location":"1.x/kotlinpoet-classinspector-elements/#index","text":"All Types","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-elements/alltypes/","text":"All Types \u00b6 Name Summary com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector \u00b6 An Elements -based implementation of ClassInspector .","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-elements/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"1.x/kotlinpoet-classinspector-elements/alltypes/#comsquareupkotlinpoetclassinspectorelementselementsclassinspector","text":"An Elements -based implementation of ClassInspector .","title":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements Package com.squareup.kotlinpoet.classinspector.elements \u00b6 Types \u00b6 Name Summary ElementsClassInspector An Elements -based implementation of ClassInspector . class ElementsClassInspector : ClassInspector","title":"kotlinpoet-classinspector-elements"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/#package-comsquareupkotlinpoetclassinspectorelements","text":"","title":"Package com.squareup.kotlinpoet.classinspector.elements"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/#types","text":"Name Summary ElementsClassInspector An Elements -based implementation of ClassInspector . class ElementsClassInspector : ClassInspector","title":"Types"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector ElementsClassInspector \u00b6 class ElementsClassInspector : ClassInspector An Elements -based implementation of ClassInspector . Properties \u00b6 Name Summary supportsNonRuntimeRetainedAnnotations val supportsNonRuntimeRetainedAnnotations: Boolean Functions \u00b6 Name Summary containerData fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData declarationContainerFor fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer enumEntry fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData isInterface fun isInterface(className: ClassName): Boolean methodExists fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean Companion Object Functions \u00b6 Name Summary create fun create(elements: Elements , types: Types ): ClassInspector","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/#elementsclassinspector","text":"class ElementsClassInspector : ClassInspector An Elements -based implementation of ClassInspector .","title":"ElementsClassInspector"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/#properties","text":"Name Summary supportsNonRuntimeRetainedAnnotations val supportsNonRuntimeRetainedAnnotations: Boolean","title":"Properties"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/#functions","text":"Name Summary containerData fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData declarationContainerFor fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer enumEntry fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData isInterface fun isInterface(className: ClassName): Boolean methodExists fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","title":"Functions"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/#companion-object-functions","text":"Name Summary create fun create(elements: Elements , types: Types ): ClassInspector","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/container-data/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector / containerData containerData \u00b6 fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData","title":"Container data"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/container-data/#containerdata","text":"fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData","title":"containerData"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/create/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector / create create \u00b6 @JvmStatic fun create(elements: Elements , types: Types ): ClassInspector Return an Elements -based implementation of ClassInspector .","title":"Create"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/create/#create","text":"@JvmStatic fun create(elements: Elements , types: Types ): ClassInspector Return an Elements -based implementation of ClassInspector .","title":"create"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/declaration-container-for/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector / declarationContainerFor declarationContainerFor \u00b6 fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer","title":"Declaration container for"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/declaration-container-for/#declarationcontainerfor","text":"fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer","title":"declarationContainerFor"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/enum-entry/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector / enumEntry enumEntry \u00b6 fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData","title":"Enum entry"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/enum-entry/#enumentry","text":"fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData","title":"enumEntry"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/is-interface/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector / isInterface isInterface \u00b6 fun isInterface(className: ClassName): Boolean","title":"Is interface"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/is-interface/#isinterface","text":"fun isInterface(className: ClassName): Boolean","title":"isInterface"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/method-exists/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector / methodExists methodExists \u00b6 fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","title":"Method exists"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/method-exists/#methodexists","text":"fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","title":"methodExists"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/supports-non-runtime-retained-annotations/","text":"kotlinpoet-classinspector-elements / com.squareup.kotlinpoet.classinspector.elements / ElementsClassInspector / supportsNonRuntimeRetainedAnnotations supportsNonRuntimeRetainedAnnotations \u00b6 val supportsNonRuntimeRetainedAnnotations: Boolean","title":"Supports non runtime retained annotations"},{"location":"1.x/kotlinpoet-classinspector-elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/supports-non-runtime-retained-annotations/#supportsnonruntimeretainedannotations","text":"val supportsNonRuntimeRetainedAnnotations: Boolean","title":"supportsNonRuntimeRetainedAnnotations"},{"location":"1.x/kotlinpoet-classinspector-reflective/","text":"kotlinpoet-classinspector-reflective Packages \u00b6 Name Summary com.squareup.kotlinpoet.classinspector.reflective Index \u00b6 All Types","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-reflective/#packages","text":"Name Summary com.squareup.kotlinpoet.classinspector.reflective","title":"Packages"},{"location":"1.x/kotlinpoet-classinspector-reflective/#index","text":"All Types","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-reflective/alltypes/","text":"All Types \u00b6 Name Summary com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector \u00b6","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-reflective/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"1.x/kotlinpoet-classinspector-reflective/alltypes/#comsquareupkotlinpoetclassinspectorreflectivereflectiveclassinspector","text":"","title":"com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective Package com.squareup.kotlinpoet.classinspector.reflective \u00b6 Types \u00b6 Name Summary ReflectiveClassInspector class ReflectiveClassInspector : ClassInspector","title":"kotlinpoet-classinspector-reflective"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/#package-comsquareupkotlinpoetclassinspectorreflective","text":"","title":"Package com.squareup.kotlinpoet.classinspector.reflective"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/#types","text":"Name Summary ReflectiveClassInspector class ReflectiveClassInspector : ClassInspector","title":"Types"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector ReflectiveClassInspector \u00b6 class ReflectiveClassInspector : ClassInspector Properties \u00b6 Name Summary supportsNonRuntimeRetainedAnnotations val supportsNonRuntimeRetainedAnnotations: Boolean Functions \u00b6 Name Summary containerData fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData declarationContainerFor fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer enumEntry fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData isInterface fun isInterface(className: ClassName): Boolean methodExists fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean Companion Object Functions \u00b6 Name Summary create fun create(): ClassInspector","title":"Index"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/#reflectiveclassinspector","text":"class ReflectiveClassInspector : ClassInspector","title":"ReflectiveClassInspector"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/#properties","text":"Name Summary supportsNonRuntimeRetainedAnnotations val supportsNonRuntimeRetainedAnnotations: Boolean","title":"Properties"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/#functions","text":"Name Summary containerData fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData declarationContainerFor fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer enumEntry fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData isInterface fun isInterface(className: ClassName): Boolean methodExists fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","title":"Functions"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/#companion-object-functions","text":"Name Summary create fun create(): ClassInspector","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/container-data/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector / containerData containerData \u00b6 fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData","title":"Container data"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/container-data/#containerdata","text":"fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData","title":"containerData"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/create/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector / create create \u00b6 @JvmStatic fun create(): ClassInspector","title":"Create"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/create/#create","text":"@JvmStatic fun create(): ClassInspector","title":"create"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/declaration-container-for/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector / declarationContainerFor declarationContainerFor \u00b6 fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer","title":"Declaration container for"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/declaration-container-for/#declarationcontainerfor","text":"fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer","title":"declarationContainerFor"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/enum-entry/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector / enumEntry enumEntry \u00b6 fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData","title":"Enum entry"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/enum-entry/#enumentry","text":"fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData","title":"enumEntry"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/is-interface/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector / isInterface isInterface \u00b6 fun isInterface(className: ClassName): Boolean","title":"Is interface"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/is-interface/#isinterface","text":"fun isInterface(className: ClassName): Boolean","title":"isInterface"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/method-exists/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector / methodExists methodExists \u00b6 fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","title":"Method exists"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/method-exists/#methodexists","text":"fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","title":"methodExists"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/supports-non-runtime-retained-annotations/","text":"kotlinpoet-classinspector-reflective / com.squareup.kotlinpoet.classinspector.reflective / ReflectiveClassInspector / supportsNonRuntimeRetainedAnnotations supportsNonRuntimeRetainedAnnotations \u00b6 val supportsNonRuntimeRetainedAnnotations: Boolean","title":"Supports non runtime retained annotations"},{"location":"1.x/kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/supports-non-runtime-retained-annotations/#supportsnonruntimeretainedannotations","text":"val supportsNonRuntimeRetainedAnnotations: Boolean","title":"supportsNonRuntimeRetainedAnnotations"},{"location":"1.x/kotlinpoet-metadata/","text":"kotlinpoet-metadata Packages \u00b6 Name Summary com.squareup.kotlinpoet.metadata Index \u00b6 All Types","title":"Index"},{"location":"1.x/kotlinpoet-metadata/#packages","text":"Name Summary com.squareup.kotlinpoet.metadata","title":"Packages"},{"location":"1.x/kotlinpoet-metadata/#index","text":"All Types","title":"Index"},{"location":"1.x/kotlinpoet-metadata/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package com.squareup.kotlinpoet.metadata) java.lang.Class \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.jvm.KotlinClassMetadata.Class \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade \u00b6 | com.squareup.kotlinpoet.metadata.ImmutableKmClass \u00b6 Immutable representation of KmClass . | com.squareup.kotlinpoet.metadata.ImmutableKmConstructor \u00b6 Immutable representation of KmConstructor . | com.squareup.kotlinpoet.metadata.ImmutableKmContract \u00b6 Immutable representation of KmContract . | com.squareup.kotlinpoet.metadata.ImmutableKmDeclarationContainer \u00b6 Immutable representation of KmDeclarationContainer . | com.squareup.kotlinpoet.metadata.ImmutableKmEffect \u00b6 Immutable representation of KmEffect . | com.squareup.kotlinpoet.metadata.ImmutableKmEffectExpression \u00b6 Immutable representation of KmEffectExpression . | com.squareup.kotlinpoet.metadata.ImmutableKmFlexibleTypeUpperBound \u00b6 Immutable representation of KmFlexibleTypeUpperBound . | com.squareup.kotlinpoet.metadata.ImmutableKmFunction \u00b6 Immutable representation of KmFunction . | com.squareup.kotlinpoet.metadata.ImmutableKmLambda \u00b6 Immutable representation of KmLambda . | com.squareup.kotlinpoet.metadata.ImmutableKmPackage \u00b6 Immutable representation of KmPackage . | com.squareup.kotlinpoet.metadata.ImmutableKmProperty \u00b6 Immutable representation of KmProperty . | com.squareup.kotlinpoet.metadata.ImmutableKmType \u00b6 Immutable representation of KmType . | com.squareup.kotlinpoet.metadata.ImmutableKmTypeAlias \u00b6 Immutable representation of KmTypeAlias . | com.squareup.kotlinpoet.metadata.ImmutableKmTypeParameter \u00b6 Immutable representation of KmTypeParameter . | com.squareup.kotlinpoet.metadata.ImmutableKmTypeProjection \u00b6 Immutable representation of KmTypeProjection . | com.squareup.kotlinpoet.metadata.ImmutableKmValueParameter \u00b6 Immutable representation of KmValueParameter . | com.squareup.kotlinpoet.metadata.ImmutableKmVersionRequirement \u00b6 Immutable representation of KmVersionRequirement . | com.squareup.kotlinpoet.metadata.ImmutableKmWithFlags \u00b6 Represents an immutable kotlinx-metadata type with a common Flags property. | (extensions in package com.squareup.kotlinpoet.metadata) kotlin.Int \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlin.reflect.KClass \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmClass \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmConstructor \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmContract \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmEffect \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmEffectExpression \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmFlexibleTypeUpperBound \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmFunction \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmLambda \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmPackage \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmProperty \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmType \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmTypeAlias \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmTypeParameter \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmTypeProjection \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmValueParameter \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) kotlinx.metadata.KmVersionRequirement \u00b6 | com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview \u00b6 Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is. | (extensions in package com.squareup.kotlinpoet.metadata) kotlin.Metadata \u00b6 | com.squareup.kotlinpoet.metadata.PropertyAccessorFlag \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata) javax.lang.model.element.TypeElement \u00b6","title":"Index"},{"location":"1.x/kotlinpoet-metadata/alltypes/#all-types","text":"Name Summary (extensions in package com.squareup.kotlinpoet.metadata)","title":"All Types"},{"location":"1.x/kotlinpoet-metadata/alltypes/#javalangclass","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"java.lang.Class"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatajvmkotlinclassmetadataclass","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.jvm.KotlinClassMetadata.Class"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatajvmkotlinclassmetadatafilefacade","text":"|","title":"kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmclass","text":"Immutable representation of KmClass . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmconstructor","text":"Immutable representation of KmConstructor . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmConstructor"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmcontract","text":"Immutable representation of KmContract . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmContract"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmdeclarationcontainer","text":"Immutable representation of KmDeclarationContainer . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmDeclarationContainer"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmeffect","text":"Immutable representation of KmEffect . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmEffect"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmeffectexpression","text":"Immutable representation of KmEffectExpression . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmEffectExpression"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmflexibletypeupperbound","text":"Immutable representation of KmFlexibleTypeUpperBound . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmFlexibleTypeUpperBound"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmfunction","text":"Immutable representation of KmFunction . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmFunction"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmlambda","text":"Immutable representation of KmLambda . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmLambda"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmpackage","text":"Immutable representation of KmPackage . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmPackage"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmproperty","text":"Immutable representation of KmProperty . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmProperty"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmtype","text":"Immutable representation of KmType . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmType"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmtypealias","text":"Immutable representation of KmTypeAlias . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmTypeAlias"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmtypeparameter","text":"Immutable representation of KmTypeParameter . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmTypeParameter"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmtypeprojection","text":"Immutable representation of KmTypeProjection . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmTypeProjection"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmvalueparameter","text":"Immutable representation of KmValueParameter . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmValueParameter"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmversionrequirement","text":"Immutable representation of KmVersionRequirement . |","title":"com.squareup.kotlinpoet.metadata.ImmutableKmVersionRequirement"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadataimmutablekmwithflags","text":"Represents an immutable kotlinx-metadata type with a common Flags property. | (extensions in package com.squareup.kotlinpoet.metadata)","title":"com.squareup.kotlinpoet.metadata.ImmutableKmWithFlags"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinint","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlin.Int"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinreflectkclass","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlin.reflect.KClass"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmclass","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmClass"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmconstructor","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmConstructor"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmcontract","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmContract"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmeffect","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmEffect"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmeffectexpression","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmEffectExpression"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmflexibletypeupperbound","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmFlexibleTypeUpperBound"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmfunction","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmFunction"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmlambda","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmLambda"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmpackage","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmPackage"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmproperty","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmProperty"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmtype","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmType"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmtypealias","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmTypeAlias"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmtypeparameter","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmTypeParameter"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmtypeprojection","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmTypeProjection"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmvalueparameter","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"kotlinx.metadata.KmValueParameter"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinxmetadatakmversionrequirement","text":"|","title":"kotlinx.metadata.KmVersionRequirement"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadatakotlinpoetmetadatapreview","text":"Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is. | (extensions in package com.squareup.kotlinpoet.metadata)","title":"com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview"},{"location":"1.x/kotlinpoet-metadata/alltypes/#kotlinmetadata","text":"|","title":"kotlin.Metadata"},{"location":"1.x/kotlinpoet-metadata/alltypes/#comsquareupkotlinpoetmetadatapropertyaccessorflag","text":"| (extensions in package com.squareup.kotlinpoet.metadata)","title":"com.squareup.kotlinpoet.metadata.PropertyAccessorFlag"},{"location":"1.x/kotlinpoet-metadata/alltypes/#javaxlangmodelelementtypeelement","text":"","title":"javax.lang.model.element.TypeElement"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata Package com.squareup.kotlinpoet.metadata \u00b6 Types \u00b6 Name Summary ImmutableKmClass Immutable representation of KmClass . data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags ImmutableKmConstructor Immutable representation of KmConstructor . data class ImmutableKmConstructor : ImmutableKmWithFlags ImmutableKmContract Immutable representation of KmContract . data class ImmutableKmContract ImmutableKmDeclarationContainer Immutable representation of KmDeclarationContainer . interface ImmutableKmDeclarationContainer ImmutableKmEffect Immutable representation of KmEffect . data class ImmutableKmEffect ImmutableKmEffectExpression Immutable representation of KmEffectExpression . data class ImmutableKmEffectExpression : ImmutableKmWithFlags ImmutableKmFlexibleTypeUpperBound Immutable representation of KmFlexibleTypeUpperBound . data class ImmutableKmFlexibleTypeUpperBound ImmutableKmFunction Immutable representation of KmFunction . data class ImmutableKmFunction : ImmutableKmWithFlags ImmutableKmLambda Immutable representation of KmLambda . data class ImmutableKmLambda ImmutableKmPackage Immutable representation of KmPackage . data class ImmutableKmPackage : ImmutableKmDeclarationContainer ImmutableKmProperty Immutable representation of KmProperty . data class ImmutableKmProperty : ImmutableKmWithFlags ImmutableKmType Immutable representation of KmType . data class ImmutableKmType : ImmutableKmWithFlags ImmutableKmTypeAlias Immutable representation of KmTypeAlias . data class ImmutableKmTypeAlias : ImmutableKmWithFlags ImmutableKmTypeParameter Immutable representation of KmTypeParameter . data class ImmutableKmTypeParameter : ImmutableKmWithFlags ImmutableKmTypeProjection Immutable representation of KmTypeProjection . data class ImmutableKmTypeProjection ImmutableKmValueParameter Immutable representation of KmValueParameter . data class ImmutableKmValueParameter : ImmutableKmWithFlags ImmutableKmVersionRequirement Immutable representation of KmVersionRequirement . data class ImmutableKmVersionRequirement : KmVersionRequirementVisitor ImmutableKmWithFlags Represents an immutable kotlinx-metadata type with a common Flags property. interface ImmutableKmWithFlags PropertyAccessorFlag enum class PropertyAccessorFlag Annotations \u00b6 Name Summary KotlinPoetMetadataPreview Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is. annotation class KotlinPoetMetadataPreview Extensions for External Classes \u00b6 Name Summary java.lang.Class javax.lang.model.element.TypeElement kotlin.Int kotlin.Metadata kotlin.reflect.KClass kotlinx.metadata.jvm.KotlinClassMetadata.Class kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade kotlinx.metadata.KmClass kotlinx.metadata.KmConstructor kotlinx.metadata.KmContract kotlinx.metadata.KmEffect kotlinx.metadata.KmEffectExpression kotlinx.metadata.KmFlexibleTypeUpperBound kotlinx.metadata.KmFunction kotlinx.metadata.KmLambda kotlinx.metadata.KmPackage kotlinx.metadata.KmProperty kotlinx.metadata.KmType kotlinx.metadata.KmTypeAlias kotlinx.metadata.KmTypeParameter kotlinx.metadata.KmTypeProjection kotlinx.metadata.KmValueParameter kotlinx.metadata.KmVersionRequirement Properties \u00b6 Name Summary declaresDefaultValue val ImmutableKmValueParameter .declaresDefaultValue: Boolean getterPropertyAccessorFlags val ImmutableKmProperty .getterPropertyAccessorFlags: Set < PropertyAccessorFlag > hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean hasConstant val ImmutableKmProperty .hasConstant: Boolean hasGetter val ImmutableKmProperty .hasGetter: Boolean hasSetter val ImmutableKmProperty .hasSetter: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isAnnotation val ImmutableKmClass .isAnnotation: Boolean isClass val ImmutableKmClass .isClass: Boolean isCompanionObject val ImmutableKmClass .isCompanionObject: Boolean isConst val ImmutableKmProperty .isConst: Boolean isCrossInline val ImmutableKmValueParameter .isCrossInline: Boolean isData val ImmutableKmClass .isData: Boolean isDeclaration val ImmutableKmFunction .isDeclaration: Boolean val ImmutableKmProperty .isDeclaration: Boolean isDelegated val ImmutableKmProperty .isDelegated: Boolean isDelegation val ImmutableKmFunction .isDelegation: Boolean val ImmutableKmProperty .isDelegation: Boolean isEnum val ImmutableKmClass .isEnum: Boolean isEnumEntry val ImmutableKmClass .isEnumEntry: Boolean isExpect val ImmutableKmClass .isExpect: Boolean val ImmutableKmFunction .isExpect: Boolean val ImmutableKmProperty .isExpect: Boolean isExternal val ImmutableKmClass .isExternal: Boolean val ImmutableKmFunction .isExternal: Boolean val ImmutableKmProperty .isExternal: Boolean isFakeOverride val ImmutableKmFunction .isFakeOverride: Boolean val ImmutableKmProperty .isFakeOverride: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInfix val ImmutableKmFunction .isInfix: Boolean isInline val ImmutableKmClass .isInline: Boolean val ImmutableKmFunction .isInline: Boolean isInner val ImmutableKmClass .isInner: Boolean isInterface val ImmutableKmClass .isInterface: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLateinit val ImmutableKmProperty .isLateinit: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isNoInline val ImmutableKmValueParameter .isNoInline: Boolean isNullable val ImmutableKmType .isNullable: Boolean isObject val ImmutableKmClass .isObject: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isOperator val ImmutableKmFunction .isOperator: Boolean isPrimary val ImmutableKmConstructor .isPrimary: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isReified val ImmutableKmTypeParameter .isReified: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSecondary val ImmutableKmConstructor .isSecondary: Boolean isSuspend val ImmutableKmType .isSuspend: Boolean val ImmutableKmFunction .isSuspend: Boolean isSynthesized val ImmutableKmFunction .isSynthesized: Boolean val ImmutableKmProperty .isSynthesized: Boolean isTailRec val ImmutableKmFunction .isTailRec: Boolean isVal val ImmutableKmProperty .isVal: Boolean isVar val ImmutableKmProperty .isVar: Boolean setterPropertyAccessorFlags val ImmutableKmProperty .setterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"kotlinpoet-metadata"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/#package-comsquareupkotlinpoetmetadata","text":"","title":"Package com.squareup.kotlinpoet.metadata"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/#types","text":"Name Summary ImmutableKmClass Immutable representation of KmClass . data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags ImmutableKmConstructor Immutable representation of KmConstructor . data class ImmutableKmConstructor : ImmutableKmWithFlags ImmutableKmContract Immutable representation of KmContract . data class ImmutableKmContract ImmutableKmDeclarationContainer Immutable representation of KmDeclarationContainer . interface ImmutableKmDeclarationContainer ImmutableKmEffect Immutable representation of KmEffect . data class ImmutableKmEffect ImmutableKmEffectExpression Immutable representation of KmEffectExpression . data class ImmutableKmEffectExpression : ImmutableKmWithFlags ImmutableKmFlexibleTypeUpperBound Immutable representation of KmFlexibleTypeUpperBound . data class ImmutableKmFlexibleTypeUpperBound ImmutableKmFunction Immutable representation of KmFunction . data class ImmutableKmFunction : ImmutableKmWithFlags ImmutableKmLambda Immutable representation of KmLambda . data class ImmutableKmLambda ImmutableKmPackage Immutable representation of KmPackage . data class ImmutableKmPackage : ImmutableKmDeclarationContainer ImmutableKmProperty Immutable representation of KmProperty . data class ImmutableKmProperty : ImmutableKmWithFlags ImmutableKmType Immutable representation of KmType . data class ImmutableKmType : ImmutableKmWithFlags ImmutableKmTypeAlias Immutable representation of KmTypeAlias . data class ImmutableKmTypeAlias : ImmutableKmWithFlags ImmutableKmTypeParameter Immutable representation of KmTypeParameter . data class ImmutableKmTypeParameter : ImmutableKmWithFlags ImmutableKmTypeProjection Immutable representation of KmTypeProjection . data class ImmutableKmTypeProjection ImmutableKmValueParameter Immutable representation of KmValueParameter . data class ImmutableKmValueParameter : ImmutableKmWithFlags ImmutableKmVersionRequirement Immutable representation of KmVersionRequirement . data class ImmutableKmVersionRequirement : KmVersionRequirementVisitor ImmutableKmWithFlags Represents an immutable kotlinx-metadata type with a common Flags property. interface ImmutableKmWithFlags PropertyAccessorFlag enum class PropertyAccessorFlag","title":"Types"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/#annotations","text":"Name Summary KotlinPoetMetadataPreview Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is. annotation class KotlinPoetMetadataPreview","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/#extensions-for-external-classes","text":"Name Summary java.lang.Class javax.lang.model.element.TypeElement kotlin.Int kotlin.Metadata kotlin.reflect.KClass kotlinx.metadata.jvm.KotlinClassMetadata.Class kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade kotlinx.metadata.KmClass kotlinx.metadata.KmConstructor kotlinx.metadata.KmContract kotlinx.metadata.KmEffect kotlinx.metadata.KmEffectExpression kotlinx.metadata.KmFlexibleTypeUpperBound kotlinx.metadata.KmFunction kotlinx.metadata.KmLambda kotlinx.metadata.KmPackage kotlinx.metadata.KmProperty kotlinx.metadata.KmType kotlinx.metadata.KmTypeAlias kotlinx.metadata.KmTypeParameter kotlinx.metadata.KmTypeProjection kotlinx.metadata.KmValueParameter kotlinx.metadata.KmVersionRequirement","title":"Extensions for External Classes"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/#properties","text":"Name Summary declaresDefaultValue val ImmutableKmValueParameter .declaresDefaultValue: Boolean getterPropertyAccessorFlags val ImmutableKmProperty .getterPropertyAccessorFlags: Set < PropertyAccessorFlag > hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean hasConstant val ImmutableKmProperty .hasConstant: Boolean hasGetter val ImmutableKmProperty .hasGetter: Boolean hasSetter val ImmutableKmProperty .hasSetter: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isAnnotation val ImmutableKmClass .isAnnotation: Boolean isClass val ImmutableKmClass .isClass: Boolean isCompanionObject val ImmutableKmClass .isCompanionObject: Boolean isConst val ImmutableKmProperty .isConst: Boolean isCrossInline val ImmutableKmValueParameter .isCrossInline: Boolean isData val ImmutableKmClass .isData: Boolean isDeclaration val ImmutableKmFunction .isDeclaration: Boolean val ImmutableKmProperty .isDeclaration: Boolean isDelegated val ImmutableKmProperty .isDelegated: Boolean isDelegation val ImmutableKmFunction .isDelegation: Boolean val ImmutableKmProperty .isDelegation: Boolean isEnum val ImmutableKmClass .isEnum: Boolean isEnumEntry val ImmutableKmClass .isEnumEntry: Boolean isExpect val ImmutableKmClass .isExpect: Boolean val ImmutableKmFunction .isExpect: Boolean val ImmutableKmProperty .isExpect: Boolean isExternal val ImmutableKmClass .isExternal: Boolean val ImmutableKmFunction .isExternal: Boolean val ImmutableKmProperty .isExternal: Boolean isFakeOverride val ImmutableKmFunction .isFakeOverride: Boolean val ImmutableKmProperty .isFakeOverride: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInfix val ImmutableKmFunction .isInfix: Boolean isInline val ImmutableKmClass .isInline: Boolean val ImmutableKmFunction .isInline: Boolean isInner val ImmutableKmClass .isInner: Boolean isInterface val ImmutableKmClass .isInterface: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLateinit val ImmutableKmProperty .isLateinit: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isNoInline val ImmutableKmValueParameter .isNoInline: Boolean isNullable val ImmutableKmType .isNullable: Boolean isObject val ImmutableKmClass .isObject: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isOperator val ImmutableKmFunction .isOperator: Boolean isPrimary val ImmutableKmConstructor .isPrimary: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isReified val ImmutableKmTypeParameter .isReified: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSecondary val ImmutableKmConstructor .isSecondary: Boolean isSuspend val ImmutableKmType .isSuspend: Boolean val ImmutableKmFunction .isSuspend: Boolean isSynthesized val ImmutableKmFunction .isSynthesized: Boolean val ImmutableKmProperty .isSynthesized: Boolean isTailRec val ImmutableKmFunction .isTailRec: Boolean isVal val ImmutableKmProperty .isVal: Boolean isVar val ImmutableKmProperty .isVar: Boolean setterPropertyAccessorFlags val ImmutableKmProperty .setterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/declares-default-value/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / declaresDefaultValue declaresDefaultValue \u00b6 val ImmutableKmValueParameter .declaresDefaultValue: Boolean","title":"Declares default value"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/declares-default-value/#declaresdefaultvalue","text":"val ImmutableKmValueParameter .declaresDefaultValue: Boolean","title":"declaresDefaultValue"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/getter-property-accessor-flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / getterPropertyAccessorFlags getterPropertyAccessorFlags \u00b6 val ImmutableKmProperty .getterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Getter property accessor flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/getter-property-accessor-flags/#getterpropertyaccessorflags","text":"val ImmutableKmProperty .getterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"getterPropertyAccessorFlags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-annotations/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / hasAnnotations hasAnnotations \u00b6 val ImmutableKmWithFlags .hasAnnotations: Boolean","title":"Has annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-annotations/#hasannotations","text":"val ImmutableKmWithFlags .hasAnnotations: Boolean","title":"hasAnnotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-constant/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / hasConstant hasConstant \u00b6 val ImmutableKmProperty .hasConstant: Boolean","title":"Has constant"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-constant/#hasconstant","text":"val ImmutableKmProperty .hasConstant: Boolean","title":"hasConstant"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-getter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / hasGetter hasGetter \u00b6 val ImmutableKmProperty .hasGetter: Boolean","title":"Has getter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-getter/#hasgetter","text":"val ImmutableKmProperty .hasGetter: Boolean","title":"hasGetter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-setter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / hasSetter hasSetter \u00b6 val ImmutableKmProperty .hasSetter: Boolean","title":"Has setter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/has-setter/#hassetter","text":"val ImmutableKmProperty .hasSetter: Boolean","title":"hasSetter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-abstract/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isAbstract isAbstract \u00b6 val ImmutableKmWithFlags .isAbstract: Boolean","title":"Is abstract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-abstract/#isabstract","text":"val ImmutableKmWithFlags .isAbstract: Boolean","title":"isAbstract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-annotation/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isAnnotation isAnnotation \u00b6 val ImmutableKmClass .isAnnotation: Boolean","title":"Is annotation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-annotation/#isannotation","text":"val ImmutableKmClass .isAnnotation: Boolean","title":"isAnnotation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isClass isClass \u00b6 val ImmutableKmClass .isClass: Boolean","title":"Is class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-class/#isclass","text":"val ImmutableKmClass .isClass: Boolean","title":"isClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-companion-object/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isCompanionObject isCompanionObject \u00b6 val ImmutableKmClass .isCompanionObject: Boolean","title":"Is companion object"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-companion-object/#iscompanionobject","text":"val ImmutableKmClass .isCompanionObject: Boolean","title":"isCompanionObject"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-const/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isConst isConst \u00b6 val ImmutableKmProperty .isConst: Boolean","title":"Is const"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-const/#isconst","text":"val ImmutableKmProperty .isConst: Boolean","title":"isConst"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-cross-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isCrossInline isCrossInline \u00b6 val ImmutableKmValueParameter .isCrossInline: Boolean","title":"Is cross inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-cross-inline/#iscrossinline","text":"val ImmutableKmValueParameter .isCrossInline: Boolean","title":"isCrossInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-data/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isData isData \u00b6 val ImmutableKmClass .isData: Boolean","title":"Is data"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-data/#isdata","text":"val ImmutableKmClass .isData: Boolean","title":"isData"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-declaration/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isDeclaration isDeclaration \u00b6 val ImmutableKmFunction .isDeclaration: Boolean val ImmutableKmProperty .isDeclaration: Boolean","title":"Is declaration"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-declaration/#isdeclaration","text":"val ImmutableKmFunction .isDeclaration: Boolean val ImmutableKmProperty .isDeclaration: Boolean","title":"isDeclaration"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-delegated/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isDelegated isDelegated \u00b6 val ImmutableKmProperty .isDelegated: Boolean","title":"Is delegated"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-delegated/#isdelegated","text":"val ImmutableKmProperty .isDelegated: Boolean","title":"isDelegated"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-delegation/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isDelegation isDelegation \u00b6 val ImmutableKmFunction .isDelegation: Boolean val ImmutableKmProperty .isDelegation: Boolean","title":"Is delegation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-delegation/#isdelegation","text":"val ImmutableKmFunction .isDelegation: Boolean val ImmutableKmProperty .isDelegation: Boolean","title":"isDelegation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-enum-entry/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isEnumEntry isEnumEntry \u00b6 val ImmutableKmClass .isEnumEntry: Boolean","title":"Is enum entry"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-enum-entry/#isenumentry","text":"val ImmutableKmClass .isEnumEntry: Boolean","title":"isEnumEntry"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-enum/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isEnum isEnum \u00b6 val ImmutableKmClass .isEnum: Boolean","title":"Is enum"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-enum/#isenum","text":"val ImmutableKmClass .isEnum: Boolean","title":"isEnum"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-expect/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isExpect isExpect \u00b6 val ImmutableKmClass .isExpect: Boolean val ImmutableKmFunction .isExpect: Boolean val ImmutableKmProperty .isExpect: Boolean","title":"Is expect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-expect/#isexpect","text":"val ImmutableKmClass .isExpect: Boolean val ImmutableKmFunction .isExpect: Boolean val ImmutableKmProperty .isExpect: Boolean","title":"isExpect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-external/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isExternal isExternal \u00b6 val ImmutableKmClass .isExternal: Boolean val ImmutableKmFunction .isExternal: Boolean val ImmutableKmProperty .isExternal: Boolean","title":"Is external"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-external/#isexternal","text":"val ImmutableKmClass .isExternal: Boolean val ImmutableKmFunction .isExternal: Boolean val ImmutableKmProperty .isExternal: Boolean","title":"isExternal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-fake-override/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isFakeOverride isFakeOverride \u00b6 val ImmutableKmFunction .isFakeOverride: Boolean val ImmutableKmProperty .isFakeOverride: Boolean","title":"Is fake override"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-fake-override/#isfakeoverride","text":"val ImmutableKmFunction .isFakeOverride: Boolean val ImmutableKmProperty .isFakeOverride: Boolean","title":"isFakeOverride"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-final/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isFinal isFinal \u00b6 val ImmutableKmWithFlags .isFinal: Boolean","title":"Is final"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-final/#isfinal","text":"val ImmutableKmWithFlags .isFinal: Boolean","title":"isFinal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-infix/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isInfix isInfix \u00b6 val ImmutableKmFunction .isInfix: Boolean","title":"Is infix"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-infix/#isinfix","text":"val ImmutableKmFunction .isInfix: Boolean","title":"isInfix"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isInline isInline \u00b6 val ImmutableKmClass .isInline: Boolean val ImmutableKmFunction .isInline: Boolean","title":"Is inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-inline/#isinline","text":"val ImmutableKmClass .isInline: Boolean val ImmutableKmFunction .isInline: Boolean","title":"isInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-inner/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isInner isInner \u00b6 val ImmutableKmClass .isInner: Boolean","title":"Is inner"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-inner/#isinner","text":"val ImmutableKmClass .isInner: Boolean","title":"isInner"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-interface/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isInterface isInterface \u00b6 val ImmutableKmClass .isInterface: Boolean","title":"Is interface"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-interface/#isinterface","text":"val ImmutableKmClass .isInterface: Boolean","title":"isInterface"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-internal/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isInternal isInternal \u00b6 val ImmutableKmWithFlags .isInternal: Boolean","title":"Is internal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-internal/#isinternal","text":"val ImmutableKmWithFlags .isInternal: Boolean","title":"isInternal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-lateinit/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isLateinit isLateinit \u00b6 val ImmutableKmProperty .isLateinit: Boolean","title":"Is lateinit"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-lateinit/#islateinit","text":"val ImmutableKmProperty .isLateinit: Boolean","title":"isLateinit"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-local/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isLocal isLocal \u00b6 val ImmutableKmWithFlags .isLocal: Boolean","title":"Is local"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-local/#islocal","text":"val ImmutableKmWithFlags .isLocal: Boolean","title":"isLocal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-no-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isNoInline isNoInline \u00b6 val ImmutableKmValueParameter .isNoInline: Boolean","title":"Is no inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-no-inline/#isnoinline","text":"val ImmutableKmValueParameter .isNoInline: Boolean","title":"isNoInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-nullable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isNullable isNullable \u00b6 val ImmutableKmType .isNullable: Boolean","title":"Is nullable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-nullable/#isnullable","text":"val ImmutableKmType .isNullable: Boolean","title":"isNullable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-object/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isObject isObject \u00b6 val ImmutableKmClass .isObject: Boolean","title":"Is object"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-object/#isobject","text":"val ImmutableKmClass .isObject: Boolean","title":"isObject"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-open/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isOpen isOpen \u00b6 val ImmutableKmWithFlags .isOpen: Boolean","title":"Is open"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-open/#isopen","text":"val ImmutableKmWithFlags .isOpen: Boolean","title":"isOpen"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-operator/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isOperator isOperator \u00b6 val ImmutableKmFunction .isOperator: Boolean","title":"Is operator"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-operator/#isoperator","text":"val ImmutableKmFunction .isOperator: Boolean","title":"isOperator"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-primary/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isPrimary isPrimary \u00b6 val ImmutableKmConstructor .isPrimary: Boolean","title":"Is primary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-primary/#isprimary","text":"val ImmutableKmConstructor .isPrimary: Boolean","title":"isPrimary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-private/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isPrivate isPrivate \u00b6 val ImmutableKmWithFlags .isPrivate: Boolean","title":"Is private"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-private/#isprivate","text":"val ImmutableKmWithFlags .isPrivate: Boolean","title":"isPrivate"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-private_to_this/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isPrivate_to_this isPrivate_to_this \u00b6 val ImmutableKmWithFlags .isPrivate_to_this: Boolean","title":"Is private to this"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-private_to_this/#isprivate_to_this","text":"val ImmutableKmWithFlags .isPrivate_to_this: Boolean","title":"isPrivate_to_this"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-protected/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isProtected isProtected \u00b6 val ImmutableKmWithFlags .isProtected: Boolean","title":"Is protected"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-protected/#isprotected","text":"val ImmutableKmWithFlags .isProtected: Boolean","title":"isProtected"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-public/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isPublic isPublic \u00b6 val ImmutableKmWithFlags .isPublic: Boolean","title":"Is public"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-public/#ispublic","text":"val ImmutableKmWithFlags .isPublic: Boolean","title":"isPublic"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-reified/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isReified isReified \u00b6 val ImmutableKmTypeParameter .isReified: Boolean","title":"Is reified"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-reified/#isreified","text":"val ImmutableKmTypeParameter .isReified: Boolean","title":"isReified"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-sealed/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isSealed isSealed \u00b6 val ImmutableKmWithFlags .isSealed: Boolean","title":"Is sealed"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-sealed/#issealed","text":"val ImmutableKmWithFlags .isSealed: Boolean","title":"isSealed"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-secondary/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isSecondary isSecondary \u00b6 val ImmutableKmConstructor .isSecondary: Boolean","title":"Is secondary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-secondary/#issecondary","text":"val ImmutableKmConstructor .isSecondary: Boolean","title":"isSecondary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-suspend/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isSuspend isSuspend \u00b6 val ImmutableKmType .isSuspend: Boolean val ImmutableKmFunction .isSuspend: Boolean","title":"Is suspend"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-suspend/#issuspend","text":"val ImmutableKmType .isSuspend: Boolean val ImmutableKmFunction .isSuspend: Boolean","title":"isSuspend"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-synthesized/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isSynthesized isSynthesized \u00b6 val ImmutableKmFunction .isSynthesized: Boolean val ImmutableKmProperty .isSynthesized: Boolean","title":"Is synthesized"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-synthesized/#issynthesized","text":"val ImmutableKmFunction .isSynthesized: Boolean val ImmutableKmProperty .isSynthesized: Boolean","title":"isSynthesized"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-tail-rec/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isTailRec isTailRec \u00b6 val ImmutableKmFunction .isTailRec: Boolean","title":"Is tail rec"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-tail-rec/#istailrec","text":"val ImmutableKmFunction .isTailRec: Boolean","title":"isTailRec"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-val/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isVal isVal \u00b6 val ImmutableKmProperty .isVal: Boolean","title":"Is val"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-val/#isval","text":"val ImmutableKmProperty .isVal: Boolean","title":"isVal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-var/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / isVar isVar \u00b6 val ImmutableKmProperty .isVar: Boolean","title":"Is var"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/is-var/#isvar","text":"val ImmutableKmProperty .isVar: Boolean","title":"isVar"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/setter-property-accessor-flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / setterPropertyAccessorFlags setterPropertyAccessorFlags \u00b6 val ImmutableKmProperty .setterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Setter property accessor flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/setter-property-accessor-flags/#setterpropertyaccessorflags","text":"val ImmutableKmProperty .setterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"setterPropertyAccessorFlags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass ImmutableKmClass \u00b6 data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags Immutable representation of KmClass . Represents a Kotlin class. Properties \u00b6 Name Summary anonymousObjectOriginName JVM internal name of the original class this anonymous object is copied from. This value is set for anonymous objects copied from bodies of inline functions to the use site by the Kotlin compiler. val anonymousObjectOriginName: String ? companionObject Name of the companion object of this class, if it has one. val companionObject: String ? constructors Constructors of the class. val constructors: List < ImmutableKmConstructor > enumEntries Names of enum entries, if this class is an enum class. val enumEntries: List < String > flags Class flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Class flags. val flags: Flags functions Functions in the class. val functions: List < ImmutableKmFunction > localDelegatedProperties Metadata of local delegated properties used somewhere inside this class (but not in a nested class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. val localDelegatedProperties: List < ImmutableKmProperty > moduleName Name of the module where this class is declared. val moduleName: String ? name Name of the class. val name: ClassName nestedClasses Names of nested classes of this class. val nestedClasses: List < String > properties Properties in the class. val properties: List < ImmutableKmProperty > sealedSubclasses Names of direct subclasses of this class, if this class is sealed . val sealedSubclasses: List <ClassName> supertypes Supertypes of the class. The first element is the superclass (or Any ). val supertypes: List < ImmutableKmType > typeAliases Type aliases in the class. val typeAliases: List < ImmutableKmTypeAlias > typeParameters Type parameters of the class. val typeParameters: List < ImmutableKmTypeParameter > versionRequirements Version requirements on this class. val versionRequirements: List < ImmutableKmVersionRequirement > Functions \u00b6 Name Summary toMutable fun toMutable(): KmClass Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isAnnotation val ImmutableKmClass .isAnnotation: Boolean isClass val ImmutableKmClass .isClass: Boolean isCompanionObject val ImmutableKmClass .isCompanionObject: Boolean isData val ImmutableKmClass .isData: Boolean isEnum val ImmutableKmClass .isEnum: Boolean isEnumEntry val ImmutableKmClass .isEnumEntry: Boolean isExpect val ImmutableKmClass .isExpect: Boolean isExternal val ImmutableKmClass .isExternal: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInline val ImmutableKmClass .isInline: Boolean isInner val ImmutableKmClass .isInner: Boolean isInterface val ImmutableKmClass .isInterface: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isObject val ImmutableKmClass .isObject: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/#immutablekmclass","text":"data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags Immutable representation of KmClass . Represents a Kotlin class.","title":"ImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/#properties","text":"Name Summary anonymousObjectOriginName JVM internal name of the original class this anonymous object is copied from. This value is set for anonymous objects copied from bodies of inline functions to the use site by the Kotlin compiler. val anonymousObjectOriginName: String ? companionObject Name of the companion object of this class, if it has one. val companionObject: String ? constructors Constructors of the class. val constructors: List < ImmutableKmConstructor > enumEntries Names of enum entries, if this class is an enum class. val enumEntries: List < String > flags Class flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Class flags. val flags: Flags functions Functions in the class. val functions: List < ImmutableKmFunction > localDelegatedProperties Metadata of local delegated properties used somewhere inside this class (but not in a nested class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. val localDelegatedProperties: List < ImmutableKmProperty > moduleName Name of the module where this class is declared. val moduleName: String ? name Name of the class. val name: ClassName nestedClasses Names of nested classes of this class. val nestedClasses: List < String > properties Properties in the class. val properties: List < ImmutableKmProperty > sealedSubclasses Names of direct subclasses of this class, if this class is sealed . val sealedSubclasses: List <ClassName> supertypes Supertypes of the class. The first element is the superclass (or Any ). val supertypes: List < ImmutableKmType > typeAliases Type aliases in the class. val typeAliases: List < ImmutableKmTypeAlias > typeParameters Type parameters of the class. val typeParameters: List < ImmutableKmTypeParameter > versionRequirements Version requirements on this class. val versionRequirements: List < ImmutableKmVersionRequirement >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/#functions","text":"Name Summary toMutable fun toMutable(): KmClass","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isAnnotation val ImmutableKmClass .isAnnotation: Boolean isClass val ImmutableKmClass .isClass: Boolean isCompanionObject val ImmutableKmClass .isCompanionObject: Boolean isData val ImmutableKmClass .isData: Boolean isEnum val ImmutableKmClass .isEnum: Boolean isEnumEntry val ImmutableKmClass .isEnumEntry: Boolean isExpect val ImmutableKmClass .isExpect: Boolean isExternal val ImmutableKmClass .isExternal: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInline val ImmutableKmClass .isInline: Boolean isInner val ImmutableKmClass .isInner: Boolean isInterface val ImmutableKmClass .isInterface: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isObject val ImmutableKmClass .isObject: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/anonymous-object-origin-name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / anonymousObjectOriginName anonymousObjectOriginName \u00b6 val anonymousObjectOriginName: String ? JVM internal name of the original class this anonymous object is copied from. This value is set for anonymous objects copied from bodies of inline functions to the use site by the Kotlin compiler.","title":"Anonymous object origin name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/anonymous-object-origin-name/#anonymousobjectoriginname","text":"val anonymousObjectOriginName: String ? JVM internal name of the original class this anonymous object is copied from. This value is set for anonymous objects copied from bodies of inline functions to the use site by the Kotlin compiler.","title":"anonymousObjectOriginName"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/companion-object/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / companionObject companionObject \u00b6 val companionObject: String ? Name of the companion object of this class, if it has one. Property \u00b6 companionObject - Name of the companion object of this class, if it has one.","title":"Companion object"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/companion-object/#companionobject","text":"val companionObject: String ? Name of the companion object of this class, if it has one.","title":"companionObject"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/companion-object/#property","text":"companionObject - Name of the companion object of this class, if it has one.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/constructors/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / constructors constructors \u00b6 val constructors: List < ImmutableKmConstructor > Constructors of the class. Property \u00b6 constructors - Constructors of the class.","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/constructors/#constructors","text":"val constructors: List < ImmutableKmConstructor > Constructors of the class.","title":"constructors"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/constructors/#property","text":"constructors - Constructors of the class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/enum-entries/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / enumEntries enumEntries \u00b6 val enumEntries: List < String > Names of enum entries, if this class is an enum class. Property \u00b6 enumEntries - Names of enum entries, if this class is an enum class.","title":"Enum entries"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/enum-entries/#enumentries","text":"val enumEntries: List < String > Names of enum entries, if this class is an enum class.","title":"enumEntries"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/enum-entries/#property","text":"enumEntries - Names of enum entries, if this class is an enum class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / flags flags \u00b6 val flags: Flags Class flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Class flags. Property \u00b6 flags - Class flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Class flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/flags/#flags","text":"val flags: Flags Class flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Class flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/flags/#property","text":"flags - Class flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Class flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/functions/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / functions functions \u00b6 val functions: List < ImmutableKmFunction > Functions in the class. Property \u00b6 functions - Functions in the class.","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/functions/#functions","text":"val functions: List < ImmutableKmFunction > Functions in the class.","title":"functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/functions/#property","text":"functions - Functions in the class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/local-delegated-properties/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / localDelegatedProperties localDelegatedProperties \u00b6 val localDelegatedProperties: List < ImmutableKmProperty > Metadata of local delegated properties used somewhere inside this class (but not in a nested class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. The order of local delegated properties in this list is important. The Kotlin compiler generates the corresponding property\u2019s index at the call site, so that reflection would be able to load the metadata of the property with that index at runtime. If an incorrect index is used, either the KProperty<*> object passed to delegate methods will point to the wrong property at runtime, or an exception will be thrown.","title":"Local delegated properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/local-delegated-properties/#localdelegatedproperties","text":"val localDelegatedProperties: List < ImmutableKmProperty > Metadata of local delegated properties used somewhere inside this class (but not in a nested class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. The order of local delegated properties in this list is important. The Kotlin compiler generates the corresponding property\u2019s index at the call site, so that reflection would be able to load the metadata of the property with that index at runtime. If an incorrect index is used, either the KProperty<*> object passed to delegate methods will point to the wrong property at runtime, or an exception will be thrown.","title":"localDelegatedProperties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/module-name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / moduleName moduleName \u00b6 val moduleName: String ? Name of the module where this class is declared. Property \u00b6 moduleName - Name of the module where this class is declared.","title":"Module name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/module-name/#modulename","text":"val moduleName: String ? Name of the module where this class is declared.","title":"moduleName"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/module-name/#property","text":"moduleName - Name of the module where this class is declared.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / name name \u00b6 val name: ClassName Name of the class. Property \u00b6 name - Name of the class.","title":"Name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/name/#name","text":"val name: ClassName Name of the class.","title":"name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/name/#property","text":"name - Name of the class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/nested-classes/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / nestedClasses nestedClasses \u00b6 val nestedClasses: List < String > Names of nested classes of this class. Property \u00b6 nestedClasses - Names of nested classes of this class.","title":"Nested classes"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/nested-classes/#nestedclasses","text":"val nestedClasses: List < String > Names of nested classes of this class.","title":"nestedClasses"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/nested-classes/#property","text":"nestedClasses - Names of nested classes of this class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/properties/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / properties properties \u00b6 val properties: List < ImmutableKmProperty > Properties in the class. Property \u00b6 properties - Properties in the class.","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/properties/#properties","text":"val properties: List < ImmutableKmProperty > Properties in the class.","title":"properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/properties/#property","text":"properties - Properties in the class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/sealed-subclasses/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / sealedSubclasses sealedSubclasses \u00b6 val sealedSubclasses: List <ClassName> Names of direct subclasses of this class, if this class is sealed . Property \u00b6 sealedSubclasses - Names of direct subclasses of this class, if this class is sealed .","title":"Sealed subclasses"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/sealed-subclasses/#sealedsubclasses","text":"val sealedSubclasses: List <ClassName> Names of direct subclasses of this class, if this class is sealed .","title":"sealedSubclasses"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/sealed-subclasses/#property","text":"sealedSubclasses - Names of direct subclasses of this class, if this class is sealed .","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/supertypes/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / supertypes supertypes \u00b6 val supertypes: List < ImmutableKmType > Supertypes of the class. The first element is the superclass (or Any ). Property \u00b6 supertypes - Supertypes of the class. The first element is the superclass (or Any ).","title":"Supertypes"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/supertypes/#supertypes","text":"val supertypes: List < ImmutableKmType > Supertypes of the class. The first element is the superclass (or Any ).","title":"supertypes"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/supertypes/#property","text":"supertypes - Supertypes of the class. The first element is the superclass (or Any ).","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / toMutable toMutable \u00b6 fun toMutable(): KmClass","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/to-mutable/#tomutable","text":"fun toMutable(): KmClass","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/type-aliases/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / typeAliases typeAliases \u00b6 val typeAliases: List < ImmutableKmTypeAlias > Type aliases in the class. Property \u00b6 typeAliases - Type aliases in the class.","title":"Type aliases"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/type-aliases/#typealiases","text":"val typeAliases: List < ImmutableKmTypeAlias > Type aliases in the class.","title":"typeAliases"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/type-aliases/#property","text":"typeAliases - Type aliases in the class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/type-parameters/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / typeParameters typeParameters \u00b6 val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the class. Property \u00b6 typeParameters - Type parameters of the class.","title":"Type parameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/type-parameters/#typeparameters","text":"val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the class.","title":"typeParameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/type-parameters/#property","text":"typeParameters - Type parameters of the class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/version-requirements/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmClass / versionRequirements versionRequirements \u00b6 val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on this class. Property \u00b6 versionRequirements - Version requirements on this class.","title":"Version requirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/version-requirements/#versionrequirements","text":"val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on this class.","title":"versionRequirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-class/version-requirements/#property","text":"versionRequirements - Version requirements on this class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmConstructor ImmutableKmConstructor \u00b6 data class ImmutableKmConstructor : ImmutableKmWithFlags Immutable representation of KmConstructor . Represents a constructor of a Kotlin class. Properties \u00b6 Name Summary flags Constructor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag and Flag.Constructor flags. val flags: Flags signature JVM signature of the constructor, or null if the JVM signature of this constructor is unknown. val signature: JvmMethodSignature? valueParameters Value parameters of the constructor. val valueParameters: List < ImmutableKmValueParameter > versionRequirements Version requirements on the constructor. val versionRequirements: List < ImmutableKmVersionRequirement > Functions \u00b6 Name Summary toMutable fun toMutable(): KmConstructor Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrimary val ImmutableKmConstructor .isPrimary: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSecondary val ImmutableKmConstructor .isSecondary: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/#immutablekmconstructor","text":"data class ImmutableKmConstructor : ImmutableKmWithFlags Immutable representation of KmConstructor . Represents a constructor of a Kotlin class.","title":"ImmutableKmConstructor"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/#properties","text":"Name Summary flags Constructor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag and Flag.Constructor flags. val flags: Flags signature JVM signature of the constructor, or null if the JVM signature of this constructor is unknown. val signature: JvmMethodSignature? valueParameters Value parameters of the constructor. val valueParameters: List < ImmutableKmValueParameter > versionRequirements Version requirements on the constructor. val versionRequirements: List < ImmutableKmVersionRequirement >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/#functions","text":"Name Summary toMutable fun toMutable(): KmConstructor","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrimary val ImmutableKmConstructor .isPrimary: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSecondary val ImmutableKmConstructor .isSecondary: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmConstructor / flags flags \u00b6 val flags: Flags Constructor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag and Flag.Constructor flags. Property \u00b6 flags - Constructor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag and Flag.Constructor flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/flags/#flags","text":"val flags: Flags Constructor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag and Flag.Constructor flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/flags/#property","text":"flags - Constructor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag and Flag.Constructor flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/signature/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmConstructor / signature signature \u00b6 val signature: JvmMethodSignature? JVM signature of the constructor, or null if the JVM signature of this constructor is unknown. Example: JvmMethodSignature(\"<init>\", \"(Ljava/lang/Object;)V\") .","title":"Signature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/signature/#signature","text":"val signature: JvmMethodSignature? JVM signature of the constructor, or null if the JVM signature of this constructor is unknown. Example: JvmMethodSignature(\"<init>\", \"(Ljava/lang/Object;)V\") .","title":"signature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmConstructor / toMutable toMutable \u00b6 fun toMutable(): KmConstructor","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/to-mutable/#tomutable","text":"fun toMutable(): KmConstructor","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/value-parameters/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmConstructor / valueParameters valueParameters \u00b6 val valueParameters: List < ImmutableKmValueParameter > Value parameters of the constructor. Property \u00b6 valueParameters - Value parameters of the constructor.","title":"Value parameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/value-parameters/#valueparameters","text":"val valueParameters: List < ImmutableKmValueParameter > Value parameters of the constructor.","title":"valueParameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/value-parameters/#property","text":"valueParameters - Value parameters of the constructor.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/version-requirements/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmConstructor / versionRequirements versionRequirements \u00b6 val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the constructor. Property \u00b6 versionRequirements - Version requirements on the constructor.","title":"Version requirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/version-requirements/#versionrequirements","text":"val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the constructor.","title":"versionRequirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-constructor/version-requirements/#property","text":"versionRequirements - Version requirements on the constructor.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmContract ImmutableKmContract \u00b6 data class ImmutableKmContract Immutable representation of KmContract . Represents a contract of a Kotlin function. Contracts are an internal feature of the standard Kotlin library, and their behavior and/or binary format may change in a subsequent release. Properties \u00b6 Name Summary effects Effects of this contract. val effects: List < ImmutableKmEffect > Functions \u00b6 Name Summary toMutable fun toMutable(): KmContract","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/#immutablekmcontract","text":"data class ImmutableKmContract Immutable representation of KmContract . Represents a contract of a Kotlin function. Contracts are an internal feature of the standard Kotlin library, and their behavior and/or binary format may change in a subsequent release.","title":"ImmutableKmContract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/#properties","text":"Name Summary effects Effects of this contract. val effects: List < ImmutableKmEffect >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/#functions","text":"Name Summary toMutable fun toMutable(): KmContract","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/effects/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmContract / effects effects \u00b6 val effects: List < ImmutableKmEffect > Effects of this contract. Property \u00b6 effects - Effects of this contract.","title":"Effects"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/effects/#effects","text":"val effects: List < ImmutableKmEffect > Effects of this contract.","title":"effects"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/effects/#property","text":"effects - Effects of this contract.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmContract / toMutable toMutable \u00b6 fun toMutable(): KmContract","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-contract/to-mutable/#tomutable","text":"fun toMutable(): KmContract","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmDeclarationContainer ImmutableKmDeclarationContainer \u00b6 interface ImmutableKmDeclarationContainer Immutable representation of KmDeclarationContainer . Represents a Kotlin declaration container, such as a class or a package fragment. Properties \u00b6 Name Summary functions Functions in the container. abstract val functions: List < ImmutableKmFunction > properties Properties in the container. abstract val properties: List < ImmutableKmProperty > typeAliases Type aliases in the container. abstract val typeAliases: List < ImmutableKmTypeAlias > Inheritors \u00b6 Name Summary ImmutableKmClass Immutable representation of KmClass . data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags ImmutableKmPackage Immutable representation of KmPackage . data class ImmutableKmPackage : ImmutableKmDeclarationContainer","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/#immutablekmdeclarationcontainer","text":"interface ImmutableKmDeclarationContainer Immutable representation of KmDeclarationContainer . Represents a Kotlin declaration container, such as a class or a package fragment.","title":"ImmutableKmDeclarationContainer"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/#properties","text":"Name Summary functions Functions in the container. abstract val functions: List < ImmutableKmFunction > properties Properties in the container. abstract val properties: List < ImmutableKmProperty > typeAliases Type aliases in the container. abstract val typeAliases: List < ImmutableKmTypeAlias >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/#inheritors","text":"Name Summary ImmutableKmClass Immutable representation of KmClass . data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags ImmutableKmPackage Immutable representation of KmPackage . data class ImmutableKmPackage : ImmutableKmDeclarationContainer","title":"Inheritors"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/functions/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmDeclarationContainer / functions functions \u00b6 abstract val functions: List < ImmutableKmFunction > Functions in the container.","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/functions/#functions","text":"abstract val functions: List < ImmutableKmFunction > Functions in the container.","title":"functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/properties/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmDeclarationContainer / properties properties \u00b6 abstract val properties: List < ImmutableKmProperty > Properties in the container.","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/properties/#properties","text":"abstract val properties: List < ImmutableKmProperty > Properties in the container.","title":"properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/type-aliases/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmDeclarationContainer / typeAliases typeAliases \u00b6 abstract val typeAliases: List < ImmutableKmTypeAlias > Type aliases in the container.","title":"Type aliases"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-declaration-container/type-aliases/#typealiases","text":"abstract val typeAliases: List < ImmutableKmTypeAlias > Type aliases in the container.","title":"typeAliases"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffect ImmutableKmEffect \u00b6 data class ImmutableKmEffect Immutable representation of KmEffect . Represents an effect (a part of the contract of a Kotlin function). Contracts are an internal feature of the standard Kotlin library, and their behavior and/or binary format may change in a subsequent release. Properties \u00b6 Name Summary conclusion Conclusion of the effect. If this value is set, the effect represents an implication with this value as the right-hand side. val conclusion: ImmutableKmEffectExpression ? constructorArguments Arguments of the effect constructor, i.e. the constant value for the KmEffectType.RETURNS_CONSTANT effect, or the parameter reference for the KmEffectType.CALLS effect. val constructorArguments: List < ImmutableKmEffectExpression > invocationKind Optional number of invocations of the lambda parameter of this function, specified further in the effect expression. val invocationKind: KmEffectInvocationKind? type Type of the effect val type: KmEffectType Functions \u00b6 Name Summary toMutable fun toMutable(): KmEffect","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/#immutablekmeffect","text":"data class ImmutableKmEffect Immutable representation of KmEffect . Represents an effect (a part of the contract of a Kotlin function). Contracts are an internal feature of the standard Kotlin library, and their behavior and/or binary format may change in a subsequent release.","title":"ImmutableKmEffect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/#properties","text":"Name Summary conclusion Conclusion of the effect. If this value is set, the effect represents an implication with this value as the right-hand side. val conclusion: ImmutableKmEffectExpression ? constructorArguments Arguments of the effect constructor, i.e. the constant value for the KmEffectType.RETURNS_CONSTANT effect, or the parameter reference for the KmEffectType.CALLS effect. val constructorArguments: List < ImmutableKmEffectExpression > invocationKind Optional number of invocations of the lambda parameter of this function, specified further in the effect expression. val invocationKind: KmEffectInvocationKind? type Type of the effect val type: KmEffectType","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/#functions","text":"Name Summary toMutable fun toMutable(): KmEffect","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/conclusion/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffect / conclusion conclusion \u00b6 val conclusion: ImmutableKmEffectExpression ? Conclusion of the effect. If this value is set, the effect represents an implication with this value as the right-hand side. Property \u00b6 conclusion - Conclusion of the effect. If this value is set, the effect represents an implication with this value as the right-hand side.","title":"Conclusion"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/conclusion/#conclusion","text":"val conclusion: ImmutableKmEffectExpression ? Conclusion of the effect. If this value is set, the effect represents an implication with this value as the right-hand side.","title":"conclusion"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/conclusion/#property","text":"conclusion - Conclusion of the effect. If this value is set, the effect represents an implication with this value as the right-hand side.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/constructor-arguments/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffect / constructorArguments constructorArguments \u00b6 val constructorArguments: List < ImmutableKmEffectExpression > Arguments of the effect constructor, i.e. the constant value for the KmEffectType.RETURNS_CONSTANT effect, or the parameter reference for the KmEffectType.CALLS effect. Property \u00b6 constructorArguments - Arguments of the effect constructor, i.e. the constant value for the KmEffectType.RETURNS_CONSTANT effect, or the parameter reference for the KmEffectType.CALLS effect.","title":"Constructor arguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/constructor-arguments/#constructorarguments","text":"val constructorArguments: List < ImmutableKmEffectExpression > Arguments of the effect constructor, i.e. the constant value for the KmEffectType.RETURNS_CONSTANT effect, or the parameter reference for the KmEffectType.CALLS effect.","title":"constructorArguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/constructor-arguments/#property","text":"constructorArguments - Arguments of the effect constructor, i.e. the constant value for the KmEffectType.RETURNS_CONSTANT effect, or the parameter reference for the KmEffectType.CALLS effect.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/invocation-kind/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffect / invocationKind invocationKind \u00b6 val invocationKind: KmEffectInvocationKind? Optional number of invocations of the lambda parameter of this function, specified further in the effect expression. Property \u00b6 invocationKind - Optional number of invocations of the lambda parameter of this function, specified further in the effect expression.","title":"Invocation kind"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/invocation-kind/#invocationkind","text":"val invocationKind: KmEffectInvocationKind? Optional number of invocations of the lambda parameter of this function, specified further in the effect expression.","title":"invocationKind"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/invocation-kind/#property","text":"invocationKind - Optional number of invocations of the lambda parameter of this function, specified further in the effect expression.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffect / toMutable toMutable \u00b6 fun toMutable(): KmEffect","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/to-mutable/#tomutable","text":"fun toMutable(): KmEffect","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffect / type type \u00b6 val type: KmEffectType Type of the effect Property \u00b6 type - Type of the effect","title":"Type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/type/#type","text":"val type: KmEffectType Type of the effect","title":"type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect/type/#property","text":"type - Type of the effect","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression ImmutableKmEffectExpression \u00b6 data class ImmutableKmEffectExpression : ImmutableKmWithFlags Immutable representation of KmEffectExpression . Represents an effect expression, the contents of an effect (a part of the contract of a Kotlin function). Contracts are an internal feature of the standard Kotlin library, and their behavior and/or binary format may change in a subsequent release. Properties \u00b6 Name Summary andArguments Arguments of an && -expression. If this list is non-empty, the resulting effect expression is a conjunction of this expression and elements of the list. val andArguments: List < ImmutableKmEffectExpression > constantValue Constant value used in the effect expression. val constantValue: KmConstantValue? flags Effect expression flags, consisting of Flag.EffectExpression flags. val flags: Flags isInstanceType Type used as the target of an is -expression in the effect expression. val isInstanceType: ImmutableKmType ? orArguments Arguments of an || -expression. If this list is non-empty, the resulting effect expression is a disjunction of this expression and elements of the list. val orArguments: List < ImmutableKmEffectExpression > parameterIndex Optional 1-based index of the value parameter of the function, for effects which assert something about the function parameters. The index 0 means the extension receiver parameter. val parameterIndex: Int ? Functions \u00b6 Name Summary toMutable fun toMutable(): KmEffectExpression Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/#immutablekmeffectexpression","text":"data class ImmutableKmEffectExpression : ImmutableKmWithFlags Immutable representation of KmEffectExpression . Represents an effect expression, the contents of an effect (a part of the contract of a Kotlin function). Contracts are an internal feature of the standard Kotlin library, and their behavior and/or binary format may change in a subsequent release.","title":"ImmutableKmEffectExpression"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/#properties","text":"Name Summary andArguments Arguments of an && -expression. If this list is non-empty, the resulting effect expression is a conjunction of this expression and elements of the list. val andArguments: List < ImmutableKmEffectExpression > constantValue Constant value used in the effect expression. val constantValue: KmConstantValue? flags Effect expression flags, consisting of Flag.EffectExpression flags. val flags: Flags isInstanceType Type used as the target of an is -expression in the effect expression. val isInstanceType: ImmutableKmType ? orArguments Arguments of an || -expression. If this list is non-empty, the resulting effect expression is a disjunction of this expression and elements of the list. val orArguments: List < ImmutableKmEffectExpression > parameterIndex Optional 1-based index of the value parameter of the function, for effects which assert something about the function parameters. The index 0 means the extension receiver parameter. val parameterIndex: Int ?","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/#functions","text":"Name Summary toMutable fun toMutable(): KmEffectExpression","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/and-arguments/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression / andArguments andArguments \u00b6 val andArguments: List < ImmutableKmEffectExpression > Arguments of an && -expression. If this list is non-empty, the resulting effect expression is a conjunction of this expression and elements of the list. Property \u00b6 andArguments - Arguments of an && -expression. If this list is non-empty, the resulting effect expression is a conjunction of this expression and elements of the list.","title":"And arguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/and-arguments/#andarguments","text":"val andArguments: List < ImmutableKmEffectExpression > Arguments of an && -expression. If this list is non-empty, the resulting effect expression is a conjunction of this expression and elements of the list.","title":"andArguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/and-arguments/#property","text":"andArguments - Arguments of an && -expression. If this list is non-empty, the resulting effect expression is a conjunction of this expression and elements of the list.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/constant-value/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression / constantValue constantValue \u00b6 val constantValue: KmConstantValue? Constant value used in the effect expression. Property \u00b6 constantValue - Constant value used in the effect expression.","title":"Constant value"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/constant-value/#constantvalue","text":"val constantValue: KmConstantValue? Constant value used in the effect expression.","title":"constantValue"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/constant-value/#property","text":"constantValue - Constant value used in the effect expression.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression / flags flags \u00b6 val flags: Flags Effect expression flags, consisting of Flag.EffectExpression flags. Property \u00b6 flags - Effect expression flags, consisting of Flag.EffectExpression flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/flags/#flags","text":"val flags: Flags Effect expression flags, consisting of Flag.EffectExpression flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/flags/#property","text":"flags - Effect expression flags, consisting of Flag.EffectExpression flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/is-instance-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression / isInstanceType isInstanceType \u00b6 val isInstanceType: ImmutableKmType ? Type used as the target of an is -expression in the effect expression. Property \u00b6 isInstanceType - Type used as the target of an is -expression in the effect expression.","title":"Is instance type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/is-instance-type/#isinstancetype","text":"val isInstanceType: ImmutableKmType ? Type used as the target of an is -expression in the effect expression.","title":"isInstanceType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/is-instance-type/#property","text":"isInstanceType - Type used as the target of an is -expression in the effect expression.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/or-arguments/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression / orArguments orArguments \u00b6 val orArguments: List < ImmutableKmEffectExpression > Arguments of an || -expression. If this list is non-empty, the resulting effect expression is a disjunction of this expression and elements of the list. Property \u00b6 orArguments - Arguments of an || -expression. If this list is non-empty, the resulting effect expression is a disjunction of this expression and elements of the list.","title":"Or arguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/or-arguments/#orarguments","text":"val orArguments: List < ImmutableKmEffectExpression > Arguments of an || -expression. If this list is non-empty, the resulting effect expression is a disjunction of this expression and elements of the list.","title":"orArguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/or-arguments/#property","text":"orArguments - Arguments of an || -expression. If this list is non-empty, the resulting effect expression is a disjunction of this expression and elements of the list.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/parameter-index/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression / parameterIndex parameterIndex \u00b6 val parameterIndex: Int ? Optional 1-based index of the value parameter of the function, for effects which assert something about the function parameters. The index 0 means the extension receiver parameter. Property \u00b6 parameterIndex - Optional 1-based index of the value parameter of the function, for effects which assert something about the function parameters. The index 0 means the extension receiver parameter.","title":"Parameter index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/parameter-index/#parameterindex","text":"val parameterIndex: Int ? Optional 1-based index of the value parameter of the function, for effects which assert something about the function parameters. The index 0 means the extension receiver parameter.","title":"parameterIndex"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/parameter-index/#property","text":"parameterIndex - Optional 1-based index of the value parameter of the function, for effects which assert something about the function parameters. The index 0 means the extension receiver parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmEffectExpression / toMutable toMutable \u00b6 fun toMutable(): KmEffectExpression","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-effect-expression/to-mutable/#tomutable","text":"fun toMutable(): KmEffectExpression","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFlexibleTypeUpperBound ImmutableKmFlexibleTypeUpperBound \u00b6 data class ImmutableKmFlexibleTypeUpperBound Immutable representation of KmFlexibleTypeUpperBound . Represents an upper bound of a flexible Kotlin type. Properties \u00b6 Name Summary type Upper bound of the flexible type. val type: ImmutableKmType typeFlexibilityId Id of the kind of flexibility this type has. For example, \u201ckotlin.jvm.PlatformType\u201d for JVM platform types, or \u201ckotlin.DynamicType\u201d for JS dynamic type. val typeFlexibilityId: String ? Functions \u00b6 Name Summary toMutable fun toMutable(): KmFlexibleTypeUpperBound","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/#immutablekmflexibletypeupperbound","text":"data class ImmutableKmFlexibleTypeUpperBound Immutable representation of KmFlexibleTypeUpperBound . Represents an upper bound of a flexible Kotlin type.","title":"ImmutableKmFlexibleTypeUpperBound"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/#properties","text":"Name Summary type Upper bound of the flexible type. val type: ImmutableKmType typeFlexibilityId Id of the kind of flexibility this type has. For example, \u201ckotlin.jvm.PlatformType\u201d for JVM platform types, or \u201ckotlin.DynamicType\u201d for JS dynamic type. val typeFlexibilityId: String ?","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/#functions","text":"Name Summary toMutable fun toMutable(): KmFlexibleTypeUpperBound","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFlexibleTypeUpperBound / toMutable toMutable \u00b6 fun toMutable(): KmFlexibleTypeUpperBound","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/to-mutable/#tomutable","text":"fun toMutable(): KmFlexibleTypeUpperBound","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/type-flexibility-id/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFlexibleTypeUpperBound / typeFlexibilityId typeFlexibilityId \u00b6 val typeFlexibilityId: String ? Id of the kind of flexibility this type has. For example, \u201ckotlin.jvm.PlatformType\u201d for JVM platform types, or \u201ckotlin.DynamicType\u201d for JS dynamic type. Property \u00b6 typeFlexibilityId - Id of the kind of flexibility this type has. For example, \u201ckotlin.jvm.PlatformType\u201d for JVM platform types, or \u201ckotlin.DynamicType\u201d for JS dynamic type.","title":"Type flexibility id"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/type-flexibility-id/#typeflexibilityid","text":"val typeFlexibilityId: String ? Id of the kind of flexibility this type has. For example, \u201ckotlin.jvm.PlatformType\u201d for JVM platform types, or \u201ckotlin.DynamicType\u201d for JS dynamic type.","title":"typeFlexibilityId"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/type-flexibility-id/#property","text":"typeFlexibilityId - Id of the kind of flexibility this type has. For example, \u201ckotlin.jvm.PlatformType\u201d for JVM platform types, or \u201ckotlin.DynamicType\u201d for JS dynamic type.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFlexibleTypeUpperBound / type type \u00b6 val type: ImmutableKmType Upper bound of the flexible type. Property \u00b6 type - Upper bound of the flexible type.","title":"Type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/type/#type","text":"val type: ImmutableKmType Upper bound of the flexible type.","title":"type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-flexible-type-upper-bound/type/#property","text":"type - Upper bound of the flexible type.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction ImmutableKmFunction \u00b6 data class ImmutableKmFunction : ImmutableKmWithFlags Immutable representation of KmFunction . Represents a Kotlin function declaration. Properties \u00b6 Name Summary contract Contract of the function. val contract: ImmutableKmContract ? flags Function flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Function flags. val flags: Flags lambdaClassOriginName JVM internal name of the original class the lambda class for this function is copied from. This value is set for lambdas copied from bodies of inline functions to the use site by the Kotlin compiler. val lambdaClassOriginName: String ? name The name of the function val name: String receiverParameterType Type of the receiver of the function, if this is an extension function. val receiverParameterType: ImmutableKmType ? returnType Return type of the function. val returnType: ImmutableKmType signature JVM signature of the function, or null if the JVM signature of this function is unknown. val signature: JvmMethodSignature? typeParameters Type parameters of the function. val typeParameters: List < ImmutableKmTypeParameter > valueParameters Value parameters of the function. val valueParameters: List < ImmutableKmValueParameter > versionRequirements Version requirements on the function. val versionRequirements: List < ImmutableKmVersionRequirement > Functions \u00b6 Name Summary toMutable fun toMutable(): KmFunction Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isDeclaration val ImmutableKmFunction .isDeclaration: Boolean isDelegation val ImmutableKmFunction .isDelegation: Boolean isExpect val ImmutableKmFunction .isExpect: Boolean isExternal val ImmutableKmFunction .isExternal: Boolean isFakeOverride val ImmutableKmFunction .isFakeOverride: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInfix val ImmutableKmFunction .isInfix: Boolean isInline val ImmutableKmFunction .isInline: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isOperator val ImmutableKmFunction .isOperator: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSuspend val ImmutableKmFunction .isSuspend: Boolean isSynthesized val ImmutableKmFunction .isSynthesized: Boolean isTailRec val ImmutableKmFunction .isTailRec: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/#immutablekmfunction","text":"data class ImmutableKmFunction : ImmutableKmWithFlags Immutable representation of KmFunction . Represents a Kotlin function declaration.","title":"ImmutableKmFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/#properties","text":"Name Summary contract Contract of the function. val contract: ImmutableKmContract ? flags Function flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Function flags. val flags: Flags lambdaClassOriginName JVM internal name of the original class the lambda class for this function is copied from. This value is set for lambdas copied from bodies of inline functions to the use site by the Kotlin compiler. val lambdaClassOriginName: String ? name The name of the function val name: String receiverParameterType Type of the receiver of the function, if this is an extension function. val receiverParameterType: ImmutableKmType ? returnType Return type of the function. val returnType: ImmutableKmType signature JVM signature of the function, or null if the JVM signature of this function is unknown. val signature: JvmMethodSignature? typeParameters Type parameters of the function. val typeParameters: List < ImmutableKmTypeParameter > valueParameters Value parameters of the function. val valueParameters: List < ImmutableKmValueParameter > versionRequirements Version requirements on the function. val versionRequirements: List < ImmutableKmVersionRequirement >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/#functions","text":"Name Summary toMutable fun toMutable(): KmFunction","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isDeclaration val ImmutableKmFunction .isDeclaration: Boolean isDelegation val ImmutableKmFunction .isDelegation: Boolean isExpect val ImmutableKmFunction .isExpect: Boolean isExternal val ImmutableKmFunction .isExternal: Boolean isFakeOverride val ImmutableKmFunction .isFakeOverride: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInfix val ImmutableKmFunction .isInfix: Boolean isInline val ImmutableKmFunction .isInline: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isOperator val ImmutableKmFunction .isOperator: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSuspend val ImmutableKmFunction .isSuspend: Boolean isSynthesized val ImmutableKmFunction .isSynthesized: Boolean isTailRec val ImmutableKmFunction .isTailRec: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/contract/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / contract contract \u00b6 val contract: ImmutableKmContract ? Contract of the function. Property \u00b6 contract - Contract of the function.","title":"Contract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/contract/#contract","text":"val contract: ImmutableKmContract ? Contract of the function.","title":"contract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/contract/#property","text":"contract - Contract of the function.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / flags flags \u00b6 val flags: Flags Function flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Function flags. Property \u00b6 flags - Function flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Function flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/flags/#flags","text":"val flags: Flags Function flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Function flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/flags/#property","text":"flags - Function flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Function flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/lambda-class-origin-name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / lambdaClassOriginName lambdaClassOriginName \u00b6 val lambdaClassOriginName: String ? JVM internal name of the original class the lambda class for this function is copied from. This value is set for lambdas copied from bodies of inline functions to the use site by the Kotlin compiler.","title":"Lambda class origin name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/lambda-class-origin-name/#lambdaclassoriginname","text":"val lambdaClassOriginName: String ? JVM internal name of the original class the lambda class for this function is copied from. This value is set for lambdas copied from bodies of inline functions to the use site by the Kotlin compiler.","title":"lambdaClassOriginName"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / name name \u00b6 val name: String The name of the function Property \u00b6 name - The name of the function","title":"Name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/name/#name","text":"val name: String The name of the function","title":"name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/name/#property","text":"name - The name of the function","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/receiver-parameter-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / receiverParameterType receiverParameterType \u00b6 val receiverParameterType: ImmutableKmType ? Type of the receiver of the function, if this is an extension function. Property \u00b6 receiverParameterType - Type of the receiver of the function, if this is an extension function.","title":"Receiver parameter type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/receiver-parameter-type/#receiverparametertype","text":"val receiverParameterType: ImmutableKmType ? Type of the receiver of the function, if this is an extension function.","title":"receiverParameterType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/receiver-parameter-type/#property","text":"receiverParameterType - Type of the receiver of the function, if this is an extension function.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/return-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / returnType returnType \u00b6 val returnType: ImmutableKmType Return type of the function. Property \u00b6 returnType - Return type of the function.","title":"Return type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/return-type/#returntype","text":"val returnType: ImmutableKmType Return type of the function.","title":"returnType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/return-type/#property","text":"returnType - Return type of the function.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/signature/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / signature signature \u00b6 val signature: JvmMethodSignature? JVM signature of the function, or null if the JVM signature of this function is unknown. Example: JvmMethodSignature(\"equals\", \"(Ljava/lang/Object;)Z\") .","title":"Signature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/signature/#signature","text":"val signature: JvmMethodSignature? JVM signature of the function, or null if the JVM signature of this function is unknown. Example: JvmMethodSignature(\"equals\", \"(Ljava/lang/Object;)Z\") .","title":"signature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / toMutable toMutable \u00b6 fun toMutable(): KmFunction","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/to-mutable/#tomutable","text":"fun toMutable(): KmFunction","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/type-parameters/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / typeParameters typeParameters \u00b6 val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the function. Property \u00b6 typeParameters - Type parameters of the function.","title":"Type parameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/type-parameters/#typeparameters","text":"val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the function.","title":"typeParameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/type-parameters/#property","text":"typeParameters - Type parameters of the function.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/value-parameters/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / valueParameters valueParameters \u00b6 val valueParameters: List < ImmutableKmValueParameter > Value parameters of the function. Property \u00b6 valueParameters - Value parameters of the function.","title":"Value parameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/value-parameters/#valueparameters","text":"val valueParameters: List < ImmutableKmValueParameter > Value parameters of the function.","title":"valueParameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/value-parameters/#property","text":"valueParameters - Value parameters of the function.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/version-requirements/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmFunction / versionRequirements versionRequirements \u00b6 val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the function. Property \u00b6 versionRequirements - Version requirements on the function.","title":"Version requirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/version-requirements/#versionrequirements","text":"val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the function.","title":"versionRequirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-function/version-requirements/#property","text":"versionRequirements - Version requirements on the function.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmLambda ImmutableKmLambda \u00b6 data class ImmutableKmLambda Immutable representation of KmLambda . Represents a synthetic class generated for a Kotlin lambda. Properties \u00b6 Name Summary function Signature of the synthetic anonymous function, representing the lambda. val function: ImmutableKmFunction Functions \u00b6 Name Summary toMutable fun toMutable(): KmLambda","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/#immutablekmlambda","text":"data class ImmutableKmLambda Immutable representation of KmLambda . Represents a synthetic class generated for a Kotlin lambda.","title":"ImmutableKmLambda"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/#properties","text":"Name Summary function Signature of the synthetic anonymous function, representing the lambda. val function: ImmutableKmFunction","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/#functions","text":"Name Summary toMutable fun toMutable(): KmLambda","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmLambda / function function \u00b6 val function: ImmutableKmFunction Signature of the synthetic anonymous function, representing the lambda. Property \u00b6 function - Signature of the synthetic anonymous function, representing the lambda.","title":"Function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/function/#function","text":"val function: ImmutableKmFunction Signature of the synthetic anonymous function, representing the lambda.","title":"function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/function/#property","text":"function - Signature of the synthetic anonymous function, representing the lambda.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmLambda / toMutable toMutable \u00b6 fun toMutable(): KmLambda","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-lambda/to-mutable/#tomutable","text":"fun toMutable(): KmLambda","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmPackage ImmutableKmPackage \u00b6 data class ImmutableKmPackage : ImmutableKmDeclarationContainer Immutable representation of KmPackage . Represents a Kotlin package fragment, including single file facades and multi-file class parts. Properties \u00b6 Name Summary functions Functions in the package fragment. val functions: List < ImmutableKmFunction > localDelegatedProperties Metadata of local delegated properties used somewhere inside this package fragment (but not in any class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. val localDelegatedProperties: List < ImmutableKmProperty > moduleName Name of the module where this class is declared. val moduleName: String ? properties Properties in the package fragment. val properties: List < ImmutableKmProperty > typeAliases TypeAliases in the package fragment. val typeAliases: List < ImmutableKmTypeAlias > Functions \u00b6 Name Summary toMutable fun toMutable(): KmPackage","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/#immutablekmpackage","text":"data class ImmutableKmPackage : ImmutableKmDeclarationContainer Immutable representation of KmPackage . Represents a Kotlin package fragment, including single file facades and multi-file class parts.","title":"ImmutableKmPackage"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/#properties","text":"Name Summary functions Functions in the package fragment. val functions: List < ImmutableKmFunction > localDelegatedProperties Metadata of local delegated properties used somewhere inside this package fragment (but not in any class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. val localDelegatedProperties: List < ImmutableKmProperty > moduleName Name of the module where this class is declared. val moduleName: String ? properties Properties in the package fragment. val properties: List < ImmutableKmProperty > typeAliases TypeAliases in the package fragment. val typeAliases: List < ImmutableKmTypeAlias >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/#functions","text":"Name Summary toMutable fun toMutable(): KmPackage","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/functions/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmPackage / functions functions \u00b6 val functions: List < ImmutableKmFunction > Functions in the package fragment. Property \u00b6 functions - Functions in the package fragment.","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/functions/#functions","text":"val functions: List < ImmutableKmFunction > Functions in the package fragment.","title":"functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/functions/#property","text":"functions - Functions in the package fragment.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/local-delegated-properties/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmPackage / localDelegatedProperties localDelegatedProperties \u00b6 val localDelegatedProperties: List < ImmutableKmProperty > Metadata of local delegated properties used somewhere inside this package fragment (but not in any class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. The order of local delegated properties in this list is important. The Kotlin compiler generates the corresponding property\u2019s index at the call site, so that reflection would be able to load the metadata of the property with that index at runtime. If an incorrect index is used, either the KProperty<*> object passed to delegate methods will point to the wrong property at runtime, or an exception will be thrown.","title":"Local delegated properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/local-delegated-properties/#localdelegatedproperties","text":"val localDelegatedProperties: List < ImmutableKmProperty > Metadata of local delegated properties used somewhere inside this package fragment (but not in any class). Note that for classes produced by the Kotlin compiler, such properties will have default accessors. The order of local delegated properties in this list is important. The Kotlin compiler generates the corresponding property\u2019s index at the call site, so that reflection would be able to load the metadata of the property with that index at runtime. If an incorrect index is used, either the KProperty<*> object passed to delegate methods will point to the wrong property at runtime, or an exception will be thrown.","title":"localDelegatedProperties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/module-name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmPackage / moduleName moduleName \u00b6 val moduleName: String ? Name of the module where this class is declared. Property \u00b6 moduleName - Name of the module where this class is declared.","title":"Module name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/module-name/#modulename","text":"val moduleName: String ? Name of the module where this class is declared.","title":"moduleName"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/module-name/#property","text":"moduleName - Name of the module where this class is declared.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/properties/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmPackage / properties properties \u00b6 val properties: List < ImmutableKmProperty > Properties in the package fragment. Property \u00b6 properties - Properties in the package fragment.","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/properties/#properties","text":"val properties: List < ImmutableKmProperty > Properties in the package fragment.","title":"properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/properties/#property","text":"properties - Properties in the package fragment.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmPackage / toMutable toMutable \u00b6 fun toMutable(): KmPackage","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/to-mutable/#tomutable","text":"fun toMutable(): KmPackage","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/type-aliases/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmPackage / typeAliases typeAliases \u00b6 val typeAliases: List < ImmutableKmTypeAlias > TypeAliases in the package fragment. Property \u00b6 typeAliases - TypeAliases in the package fragment.","title":"Type aliases"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/type-aliases/#typealiases","text":"val typeAliases: List < ImmutableKmTypeAlias > TypeAliases in the package fragment.","title":"typeAliases"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-package/type-aliases/#property","text":"typeAliases - TypeAliases in the package fragment.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty ImmutableKmProperty \u00b6 data class ImmutableKmProperty : ImmutableKmWithFlags Immutable representation of KmProperty . Represents a Kotlin property declaration. Properties \u00b6 Name Summary fieldSignature JVM signature of the backing field of the property, or null if this property has no backing field. val fieldSignature: JvmFieldSignature? flags Property flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Property flags. val flags: Flags getterFlags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags. val getterFlags: Flags getterSignature JVM signature of the property getter, or null if this property has no getter or its signature is unknown. val getterSignature: JvmMethodSignature? jvmFlags JVM-specific flags of the property, consisting of JvmFlag.Property flags. val jvmFlags: Flags name The name of the property. val name: String receiverParameterType Type of the receiver of the property, if this is an extension property. val receiverParameterType: ImmutableKmType ? returnType Type of the property. val returnType: ImmutableKmType setterFlags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags. val setterFlags: Flags setterParameter Value parameter of the setter of this property, if this is a var property. val setterParameter: ImmutableKmValueParameter ? setterSignature JVM signature of the property setter, or null if this property has no setter or its signature is unknown. val setterSignature: JvmMethodSignature? syntheticMethodForAnnotations JVM signature of a synthetic method which is generated to store annotations on a property in the bytecode. val syntheticMethodForAnnotations: JvmMethodSignature? typeParameters Type parameters of the property. val typeParameters: List < ImmutableKmTypeParameter > versionRequirements Version requirements on the property. val versionRequirements: List < ImmutableKmVersionRequirement > Functions \u00b6 Name Summary toMutable fun toMutable(): KmProperty Extension Properties \u00b6 Name Summary getterPropertyAccessorFlags val ImmutableKmProperty .getterPropertyAccessorFlags: Set < PropertyAccessorFlag > hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean hasConstant val ImmutableKmProperty .hasConstant: Boolean hasGetter val ImmutableKmProperty .hasGetter: Boolean hasSetter val ImmutableKmProperty .hasSetter: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isConst val ImmutableKmProperty .isConst: Boolean isDeclaration val ImmutableKmProperty .isDeclaration: Boolean isDelegated val ImmutableKmProperty .isDelegated: Boolean isDelegation val ImmutableKmProperty .isDelegation: Boolean isExpect val ImmutableKmProperty .isExpect: Boolean isExternal val ImmutableKmProperty .isExternal: Boolean isFakeOverride val ImmutableKmProperty .isFakeOverride: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLateinit val ImmutableKmProperty .isLateinit: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSynthesized val ImmutableKmProperty .isSynthesized: Boolean isVal val ImmutableKmProperty .isVal: Boolean isVar val ImmutableKmProperty .isVar: Boolean setterPropertyAccessorFlags val ImmutableKmProperty .setterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/#immutablekmproperty","text":"data class ImmutableKmProperty : ImmutableKmWithFlags Immutable representation of KmProperty . Represents a Kotlin property declaration.","title":"ImmutableKmProperty"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/#properties","text":"Name Summary fieldSignature JVM signature of the backing field of the property, or null if this property has no backing field. val fieldSignature: JvmFieldSignature? flags Property flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Property flags. val flags: Flags getterFlags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags. val getterFlags: Flags getterSignature JVM signature of the property getter, or null if this property has no getter or its signature is unknown. val getterSignature: JvmMethodSignature? jvmFlags JVM-specific flags of the property, consisting of JvmFlag.Property flags. val jvmFlags: Flags name The name of the property. val name: String receiverParameterType Type of the receiver of the property, if this is an extension property. val receiverParameterType: ImmutableKmType ? returnType Type of the property. val returnType: ImmutableKmType setterFlags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags. val setterFlags: Flags setterParameter Value parameter of the setter of this property, if this is a var property. val setterParameter: ImmutableKmValueParameter ? setterSignature JVM signature of the property setter, or null if this property has no setter or its signature is unknown. val setterSignature: JvmMethodSignature? syntheticMethodForAnnotations JVM signature of a synthetic method which is generated to store annotations on a property in the bytecode. val syntheticMethodForAnnotations: JvmMethodSignature? typeParameters Type parameters of the property. val typeParameters: List < ImmutableKmTypeParameter > versionRequirements Version requirements on the property. val versionRequirements: List < ImmutableKmVersionRequirement >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/#functions","text":"Name Summary toMutable fun toMutable(): KmProperty","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/#extension-properties","text":"Name Summary getterPropertyAccessorFlags val ImmutableKmProperty .getterPropertyAccessorFlags: Set < PropertyAccessorFlag > hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean hasConstant val ImmutableKmProperty .hasConstant: Boolean hasGetter val ImmutableKmProperty .hasGetter: Boolean hasSetter val ImmutableKmProperty .hasSetter: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isConst val ImmutableKmProperty .isConst: Boolean isDeclaration val ImmutableKmProperty .isDeclaration: Boolean isDelegated val ImmutableKmProperty .isDelegated: Boolean isDelegation val ImmutableKmProperty .isDelegation: Boolean isExpect val ImmutableKmProperty .isExpect: Boolean isExternal val ImmutableKmProperty .isExternal: Boolean isFakeOverride val ImmutableKmProperty .isFakeOverride: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLateinit val ImmutableKmProperty .isLateinit: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSynthesized val ImmutableKmProperty .isSynthesized: Boolean isVal val ImmutableKmProperty .isVal: Boolean isVar val ImmutableKmProperty .isVar: Boolean setterPropertyAccessorFlags val ImmutableKmProperty .setterPropertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/field-signature/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / fieldSignature fieldSignature \u00b6 val fieldSignature: JvmFieldSignature? JVM signature of the backing field of the property, or null if this property has no backing field. Example: JvmFieldSignature(\"X\", \"Ljava/lang/Object;\") .","title":"Field signature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/field-signature/#fieldsignature","text":"val fieldSignature: JvmFieldSignature? JVM signature of the backing field of the property, or null if this property has no backing field. Example: JvmFieldSignature(\"X\", \"Ljava/lang/Object;\") .","title":"fieldSignature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / flags flags \u00b6 val flags: Flags Property flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Property flags. Property \u00b6 flags - Property flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Property flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/flags/#flags","text":"val flags: Flags Property flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Property flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/flags/#property","text":"flags - Property flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.Property flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/getter-flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / getterFlags getterFlags \u00b6 val getterFlags: Flags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags. Property \u00b6 getterFlags - Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags.","title":"Getter flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/getter-flags/#getterflags","text":"val getterFlags: Flags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags.","title":"getterFlags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/getter-flags/#property","text":"getterFlags - Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/getter-signature/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / getterSignature getterSignature \u00b6 val getterSignature: JvmMethodSignature? JVM signature of the property getter, or null if this property has no getter or its signature is unknown. Example: JvmMethodSignature(\"getX\", \"()Ljava/lang/Object;\") .","title":"Getter signature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/getter-signature/#gettersignature","text":"val getterSignature: JvmMethodSignature? JVM signature of the property getter, or null if this property has no getter or its signature is unknown. Example: JvmMethodSignature(\"getX\", \"()Ljava/lang/Object;\") .","title":"getterSignature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/jvm-flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / jvmFlags jvmFlags \u00b6 val jvmFlags: Flags JVM-specific flags of the property, consisting of JvmFlag.Property flags. Property \u00b6 jvmFlags - JVM-specific flags of the property, consisting of JvmFlag.Property flags.","title":"Jvm flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/jvm-flags/#jvmflags","text":"val jvmFlags: Flags JVM-specific flags of the property, consisting of JvmFlag.Property flags.","title":"jvmFlags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/jvm-flags/#property","text":"jvmFlags - JVM-specific flags of the property, consisting of JvmFlag.Property flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / name name \u00b6 val name: String The name of the property. Property \u00b6 name - The name of the property.","title":"Name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/name/#name","text":"val name: String The name of the property.","title":"name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/name/#property","text":"name - The name of the property.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/receiver-parameter-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / receiverParameterType receiverParameterType \u00b6 val receiverParameterType: ImmutableKmType ? Type of the receiver of the property, if this is an extension property. Property \u00b6 receiverParameterType - Type of the receiver of the property, if this is an extension property.","title":"Receiver parameter type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/receiver-parameter-type/#receiverparametertype","text":"val receiverParameterType: ImmutableKmType ? Type of the receiver of the property, if this is an extension property.","title":"receiverParameterType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/receiver-parameter-type/#property","text":"receiverParameterType - Type of the receiver of the property, if this is an extension property.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/return-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / returnType returnType \u00b6 val returnType: ImmutableKmType Type of the property. Property \u00b6 returnType - Type of the property.","title":"Return type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/return-type/#returntype","text":"val returnType: ImmutableKmType Type of the property.","title":"returnType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/return-type/#property","text":"returnType - Type of the property.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / setterFlags setterFlags \u00b6 val setterFlags: Flags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags. Property \u00b6 setterFlags - Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags.","title":"Setter flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-flags/#setterflags","text":"val setterFlags: Flags Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags.","title":"setterFlags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-flags/#property","text":"setterFlags - Property accessor flags, consisting of Flag.HAS_ANNOTATIONS , visibility flag, modality flag and Flag.PropertyAccessor flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-parameter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / setterParameter setterParameter \u00b6 val setterParameter: ImmutableKmValueParameter ? Value parameter of the setter of this property, if this is a var property. Property \u00b6 setterParameter - Value parameter of the setter of this property, if this is a var property.","title":"Setter parameter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-parameter/#setterparameter","text":"val setterParameter: ImmutableKmValueParameter ? Value parameter of the setter of this property, if this is a var property.","title":"setterParameter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-parameter/#property","text":"setterParameter - Value parameter of the setter of this property, if this is a var property.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-signature/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / setterSignature setterSignature \u00b6 val setterSignature: JvmMethodSignature? JVM signature of the property setter, or null if this property has no setter or its signature is unknown. Example: JvmMethodSignature(\"setX\", \"(Ljava/lang/Object;)V\") .","title":"Setter signature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/setter-signature/#settersignature","text":"val setterSignature: JvmMethodSignature? JVM signature of the property setter, or null if this property has no setter or its signature is unknown. Example: JvmMethodSignature(\"setX\", \"(Ljava/lang/Object;)V\") .","title":"setterSignature"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/synthetic-method-for-annotations/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / syntheticMethodForAnnotations syntheticMethodForAnnotations \u00b6 val syntheticMethodForAnnotations: JvmMethodSignature? JVM signature of a synthetic method which is generated to store annotations on a property in the bytecode. Example: JvmMethodSignature(\"getX$annotations\", \"()V\") .","title":"Synthetic method for annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/synthetic-method-for-annotations/#syntheticmethodforannotations","text":"val syntheticMethodForAnnotations: JvmMethodSignature? JVM signature of a synthetic method which is generated to store annotations on a property in the bytecode. Example: JvmMethodSignature(\"getX$annotations\", \"()V\") .","title":"syntheticMethodForAnnotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / toMutable toMutable \u00b6 fun toMutable(): KmProperty","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/to-mutable/#tomutable","text":"fun toMutable(): KmProperty","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/type-parameters/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / typeParameters typeParameters \u00b6 val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the property. Property \u00b6 typeParameters - Type parameters of the property.","title":"Type parameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/type-parameters/#typeparameters","text":"val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the property.","title":"typeParameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/type-parameters/#property","text":"typeParameters - Type parameters of the property.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/version-requirements/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmProperty / versionRequirements versionRequirements \u00b6 val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the property. Property \u00b6 versionRequirements - Version requirements on the property.","title":"Version requirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/version-requirements/#versionrequirements","text":"val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the property.","title":"versionRequirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-property/version-requirements/#property","text":"versionRequirements - Version requirements on the property.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType ImmutableKmType \u00b6 data class ImmutableKmType : ImmutableKmWithFlags Immutable representation of KmType . Represents a type. Properties \u00b6 Name Summary abbreviatedType Abbreviation of this type. Note that all types are expanded for metadata produced by the Kotlin compiler. For example: val abbreviatedType: ImmutableKmType ? annotations Annotations on the type. val annotations: List <KmAnnotation> arguments Arguments of the type, if the type\u2019s classifier is a class or a type alias. val arguments: List < ImmutableKmTypeProjection > classifier Classifier of the type. val classifier: KmClassifier flags Type flags, consisting of Flag.Type flags. val flags: Flags flexibleTypeUpperBound Upper bound of this type, if this type is flexible. In that case, all other data refers to the lower bound of the type. val flexibleTypeUpperBound: ImmutableKmFlexibleTypeUpperBound ? isExtensionType true if this is an extension type (i.e. String.() -> Unit vs (String) -> Unit). val isExtensionType: Boolean isRaw true if the type is seen as a raw type in Java. val isRaw: Boolean outerType Outer type of this type, if this type\u2019s classifier is an inner class. For example: val outerType: ImmutableKmType ? Functions \u00b6 Name Summary toMutable fun toMutable(): KmType Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isNullable val ImmutableKmType .isNullable: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSuspend val ImmutableKmType .isSuspend: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/#immutablekmtype","text":"data class ImmutableKmType : ImmutableKmWithFlags Immutable representation of KmType . Represents a type.","title":"ImmutableKmType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/#properties","text":"Name Summary abbreviatedType Abbreviation of this type. Note that all types are expanded for metadata produced by the Kotlin compiler. For example: val abbreviatedType: ImmutableKmType ? annotations Annotations on the type. val annotations: List <KmAnnotation> arguments Arguments of the type, if the type\u2019s classifier is a class or a type alias. val arguments: List < ImmutableKmTypeProjection > classifier Classifier of the type. val classifier: KmClassifier flags Type flags, consisting of Flag.Type flags. val flags: Flags flexibleTypeUpperBound Upper bound of this type, if this type is flexible. In that case, all other data refers to the lower bound of the type. val flexibleTypeUpperBound: ImmutableKmFlexibleTypeUpperBound ? isExtensionType true if this is an extension type (i.e. String.() -> Unit vs (String) -> Unit). val isExtensionType: Boolean isRaw true if the type is seen as a raw type in Java. val isRaw: Boolean outerType Outer type of this type, if this type\u2019s classifier is an inner class. For example: val outerType: ImmutableKmType ?","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/#functions","text":"Name Summary toMutable fun toMutable(): KmType","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isNullable val ImmutableKmType .isNullable: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean isSuspend val ImmutableKmType .isSuspend: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/abbreviated-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / abbreviatedType abbreviatedType \u00b6 val abbreviatedType: ImmutableKmType ? Abbreviation of this type. Note that all types are expanded for metadata produced by the Kotlin compiler. For example: typealias A<T> = MutableList<T> fun foo(a: A<Any>) {} The type of the foo \u2018s parameter in the metadata is actually MutableList<Any> , and its abbreviation is A<Any> .","title":"Abbreviated type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/abbreviated-type/#abbreviatedtype","text":"val abbreviatedType: ImmutableKmType ? Abbreviation of this type. Note that all types are expanded for metadata produced by the Kotlin compiler. For example: typealias A<T> = MutableList<T> fun foo(a: A<Any>) {} The type of the foo \u2018s parameter in the metadata is actually MutableList<Any> , and its abbreviation is A<Any> .","title":"abbreviatedType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/annotations/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / annotations annotations \u00b6 val annotations: List <KmAnnotation> Annotations on the type. Property \u00b6 annotations - Annotations on the type.","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/annotations/#annotations","text":"val annotations: List <KmAnnotation> Annotations on the type.","title":"annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/annotations/#property","text":"annotations - Annotations on the type.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/arguments/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / arguments arguments \u00b6 val arguments: List < ImmutableKmTypeProjection > Arguments of the type, if the type\u2019s classifier is a class or a type alias. Property \u00b6 arguments - Arguments of the type, if the type\u2019s classifier is a class or a type alias.","title":"Arguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/arguments/#arguments","text":"val arguments: List < ImmutableKmTypeProjection > Arguments of the type, if the type\u2019s classifier is a class or a type alias.","title":"arguments"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/arguments/#property","text":"arguments - Arguments of the type, if the type\u2019s classifier is a class or a type alias.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/classifier/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / classifier classifier \u00b6 val classifier: KmClassifier Classifier of the type. Property \u00b6 classifier - Classifier of the type.","title":"Classifier"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/classifier/#classifier","text":"val classifier: KmClassifier Classifier of the type.","title":"classifier"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/classifier/#property","text":"classifier - Classifier of the type.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / flags flags \u00b6 val flags: Flags Type flags, consisting of Flag.Type flags. Property \u00b6 flags - Type flags, consisting of Flag.Type flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/flags/#flags","text":"val flags: Flags Type flags, consisting of Flag.Type flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/flags/#property","text":"flags - Type flags, consisting of Flag.Type flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/flexible-type-upper-bound/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / flexibleTypeUpperBound flexibleTypeUpperBound \u00b6 val flexibleTypeUpperBound: ImmutableKmFlexibleTypeUpperBound ? Upper bound of this type, if this type is flexible. In that case, all other data refers to the lower bound of the type. Flexible types in Kotlin include platform types in Kotlin/JVM and dynamic type in Kotlin/JS.","title":"Flexible type upper bound"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/flexible-type-upper-bound/#flexibletypeupperbound","text":"val flexibleTypeUpperBound: ImmutableKmFlexibleTypeUpperBound ? Upper bound of this type, if this type is flexible. In that case, all other data refers to the lower bound of the type. Flexible types in Kotlin include platform types in Kotlin/JVM and dynamic type in Kotlin/JS.","title":"flexibleTypeUpperBound"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/is-extension-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / isExtensionType isExtensionType \u00b6 val isExtensionType: Boolean true if this is an extension type (i.e. String.() -> Unit vs (String) -> Unit). See details: https://discuss.kotlinlang.org/t/announcing-kotlinx-metadata-jvm-library-for-reading-modifying-metadata-of-kotlin-jvm-class-files/7980/27 Getter true if this is an extension type (i.e. String.() -> Unit vs (String) -> Unit). See details: https://discuss.kotlinlang.org/t/announcing-kotlinx-metadata-jvm-library-for-reading-modifying-metadata-of-kotlin-jvm-class-files/7980/27","title":"Is extension type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/is-extension-type/#isextensiontype","text":"val isExtensionType: Boolean true if this is an extension type (i.e. String.() -> Unit vs (String) -> Unit). See details: https://discuss.kotlinlang.org/t/announcing-kotlinx-metadata-jvm-library-for-reading-modifying-metadata-of-kotlin-jvm-class-files/7980/27 Getter true if this is an extension type (i.e. String.() -> Unit vs (String) -> Unit). See details: https://discuss.kotlinlang.org/t/announcing-kotlinx-metadata-jvm-library-for-reading-modifying-metadata-of-kotlin-jvm-class-files/7980/27","title":"isExtensionType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/is-raw/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / isRaw isRaw \u00b6 val isRaw: Boolean true if the type is seen as a raw type in Java. Property \u00b6 isRaw - true if the type is seen as a raw type in Java.","title":"Is raw"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/is-raw/#israw","text":"val isRaw: Boolean true if the type is seen as a raw type in Java.","title":"isRaw"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/is-raw/#property","text":"isRaw - true if the type is seen as a raw type in Java.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/outer-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / outerType outerType \u00b6 val outerType: ImmutableKmType ? Outer type of this type, if this type\u2019s classifier is an inner class. For example: class A<T> { inner class B<U> } fun foo(a: A<*>.B<Byte?>) {} The type of the foo \u2018s parameter in the metadata is B<Byte> (a type whose classifier is class B , and it has one type argument, type Byte? ), and its outer type is A<*> (a type whose classifier is class A , and it has one type argument, star projection).","title":"Outer type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/outer-type/#outertype","text":"val outerType: ImmutableKmType ? Outer type of this type, if this type\u2019s classifier is an inner class. For example: class A<T> { inner class B<U> } fun foo(a: A<*>.B<Byte?>) {} The type of the foo \u2018s parameter in the metadata is B<Byte> (a type whose classifier is class B , and it has one type argument, type Byte? ), and its outer type is A<*> (a type whose classifier is class A , and it has one type argument, star projection).","title":"outerType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmType / toMutable toMutable \u00b6 fun toMutable(): KmType","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type/to-mutable/#tomutable","text":"fun toMutable(): KmType","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias ImmutableKmTypeAlias \u00b6 data class ImmutableKmTypeAlias : ImmutableKmWithFlags Immutable representation of KmTypeAlias . Represents a Kotlin type alias declaration. Properties \u00b6 Name Summary annotations Annotations on the type alias. val annotations: List <KmAnnotation> expandedType Expanded type of the type alias, i.e. the full expansion of the underlying type, where all type aliases are substituted with their expanded types. If no type aliases are used in the underlying type, expanded type is equal to the underlying type. val expandedType: ImmutableKmType flags TypeAlias flags, consisting of Flag.HAS_ANNOTATIONS and visibility flag. val flags: Flags name The name of the type alias. val name: String typeParameters Type parameters of the type alias. val typeParameters: List < ImmutableKmTypeParameter > underlyingType Underlying type of the type alias, i.e. the type in the right-hand side of the type alias declaration. val underlyingType: ImmutableKmType versionRequirements Version requirements on the type alias. val versionRequirements: List < ImmutableKmVersionRequirement > Functions \u00b6 Name Summary toMutable fun toMutable(): KmTypeAlias Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/#immutablekmtypealias","text":"data class ImmutableKmTypeAlias : ImmutableKmWithFlags Immutable representation of KmTypeAlias . Represents a Kotlin type alias declaration.","title":"ImmutableKmTypeAlias"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/#properties","text":"Name Summary annotations Annotations on the type alias. val annotations: List <KmAnnotation> expandedType Expanded type of the type alias, i.e. the full expansion of the underlying type, where all type aliases are substituted with their expanded types. If no type aliases are used in the underlying type, expanded type is equal to the underlying type. val expandedType: ImmutableKmType flags TypeAlias flags, consisting of Flag.HAS_ANNOTATIONS and visibility flag. val flags: Flags name The name of the type alias. val name: String typeParameters Type parameters of the type alias. val typeParameters: List < ImmutableKmTypeParameter > underlyingType Underlying type of the type alias, i.e. the type in the right-hand side of the type alias declaration. val underlyingType: ImmutableKmType versionRequirements Version requirements on the type alias. val versionRequirements: List < ImmutableKmVersionRequirement >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/#functions","text":"Name Summary toMutable fun toMutable(): KmTypeAlias","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/annotations/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / annotations annotations \u00b6 val annotations: List <KmAnnotation> Annotations on the type alias. Property \u00b6 annotations - Annotations on the type alias.","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/annotations/#annotations","text":"val annotations: List <KmAnnotation> Annotations on the type alias.","title":"annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/annotations/#property","text":"annotations - Annotations on the type alias.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/expanded-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / expandedType expandedType \u00b6 val expandedType: ImmutableKmType Expanded type of the type alias, i.e. the full expansion of the underlying type, where all type aliases are substituted with their expanded types. If no type aliases are used in the underlying type, expanded type is equal to the underlying type. Property \u00b6 expandedType - Expanded type of the type alias, i.e. the full expansion of the underlying type, where all type aliases are substituted with their expanded types. If no type aliases are used in the underlying type, expanded type is equal to the underlying type.","title":"Expanded type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/expanded-type/#expandedtype","text":"val expandedType: ImmutableKmType Expanded type of the type alias, i.e. the full expansion of the underlying type, where all type aliases are substituted with their expanded types. If no type aliases are used in the underlying type, expanded type is equal to the underlying type.","title":"expandedType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/expanded-type/#property","text":"expandedType - Expanded type of the type alias, i.e. the full expansion of the underlying type, where all type aliases are substituted with their expanded types. If no type aliases are used in the underlying type, expanded type is equal to the underlying type.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / flags flags \u00b6 val flags: Flags TypeAlias flags, consisting of Flag.HAS_ANNOTATIONS and visibility flag. Property \u00b6 flags - TypeAlias flags, consisting of Flag.HAS_ANNOTATIONS and visibility flag.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/flags/#flags","text":"val flags: Flags TypeAlias flags, consisting of Flag.HAS_ANNOTATIONS and visibility flag.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/flags/#property","text":"flags - TypeAlias flags, consisting of Flag.HAS_ANNOTATIONS and visibility flag.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / name name \u00b6 val name: String The name of the type alias. Property \u00b6 name - The name of the type alias.","title":"Name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/name/#name","text":"val name: String The name of the type alias.","title":"name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/name/#property","text":"name - The name of the type alias.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / toMutable toMutable \u00b6 fun toMutable(): KmTypeAlias","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/to-mutable/#tomutable","text":"fun toMutable(): KmTypeAlias","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/type-parameters/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / typeParameters typeParameters \u00b6 val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the type alias. Property \u00b6 typeParameters - Type parameters of the type alias.","title":"Type parameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/type-parameters/#typeparameters","text":"val typeParameters: List < ImmutableKmTypeParameter > Type parameters of the type alias.","title":"typeParameters"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/type-parameters/#property","text":"typeParameters - Type parameters of the type alias.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/underlying-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / underlyingType underlyingType \u00b6 val underlyingType: ImmutableKmType Underlying type of the type alias, i.e. the type in the right-hand side of the type alias declaration. Property \u00b6 underlyingType - Underlying type of the type alias, i.e. the type in the right-hand side of the type alias declaration.","title":"Underlying type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/underlying-type/#underlyingtype","text":"val underlyingType: ImmutableKmType Underlying type of the type alias, i.e. the type in the right-hand side of the type alias declaration.","title":"underlyingType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/underlying-type/#property","text":"underlyingType - Underlying type of the type alias, i.e. the type in the right-hand side of the type alias declaration.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/version-requirements/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeAlias / versionRequirements versionRequirements \u00b6 val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the type alias. Property \u00b6 versionRequirements - Version requirements on the type alias.","title":"Version requirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/version-requirements/#versionrequirements","text":"val versionRequirements: List < ImmutableKmVersionRequirement > Version requirements on the type alias.","title":"versionRequirements"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-alias/version-requirements/#property","text":"versionRequirements - Version requirements on the type alias.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter ImmutableKmTypeParameter \u00b6 data class ImmutableKmTypeParameter : ImmutableKmWithFlags Immutable representation of KmTypeParameter . Represents a type parameter of a Kotlin class, function, property or type alias. Properties \u00b6 Name Summary annotations Annotations on the type parameter. val annotations: List <KmAnnotation> flags Type parameter flags, consisting of Flag.TypeParameter flags. val flags: Flags id The id of the type parameter, useful to be able to uniquely identify the type parameter in different contexts where the name isn\u2019t enough (e.g. class A<T> { fun <T> foo(t: T) } ). val id: Int name The name of the type parameter. val name: String upperBounds Upper bounds of the type parameter. val upperBounds: List < ImmutableKmType > variance The declaration-site variance of the type parameter. val variance: KmVariance Functions \u00b6 Name Summary toMutable fun toMutable(): KmTypeParameter Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isReified val ImmutableKmTypeParameter .isReified: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/#immutablekmtypeparameter","text":"data class ImmutableKmTypeParameter : ImmutableKmWithFlags Immutable representation of KmTypeParameter . Represents a type parameter of a Kotlin class, function, property or type alias.","title":"ImmutableKmTypeParameter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/#properties","text":"Name Summary annotations Annotations on the type parameter. val annotations: List <KmAnnotation> flags Type parameter flags, consisting of Flag.TypeParameter flags. val flags: Flags id The id of the type parameter, useful to be able to uniquely identify the type parameter in different contexts where the name isn\u2019t enough (e.g. class A<T> { fun <T> foo(t: T) } ). val id: Int name The name of the type parameter. val name: String upperBounds Upper bounds of the type parameter. val upperBounds: List < ImmutableKmType > variance The declaration-site variance of the type parameter. val variance: KmVariance","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/#functions","text":"Name Summary toMutable fun toMutable(): KmTypeParameter","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isReified val ImmutableKmTypeParameter .isReified: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/annotations/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter / annotations annotations \u00b6 val annotations: List <KmAnnotation> Annotations on the type parameter. Property \u00b6 annotations - Annotations on the type parameter.","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/annotations/#annotations","text":"val annotations: List <KmAnnotation> Annotations on the type parameter.","title":"annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/annotations/#property","text":"annotations - Annotations on the type parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter / flags flags \u00b6 val flags: Flags Type parameter flags, consisting of Flag.TypeParameter flags. Property \u00b6 flags - Type parameter flags, consisting of Flag.TypeParameter flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/flags/#flags","text":"val flags: Flags Type parameter flags, consisting of Flag.TypeParameter flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/flags/#property","text":"flags - Type parameter flags, consisting of Flag.TypeParameter flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/id/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter / id id \u00b6 val id: Int The id of the type parameter, useful to be able to uniquely identify the type parameter in different contexts where the name isn\u2019t enough (e.g. class A<T> { fun <T> foo(t: T) } ). Property \u00b6 id - The id of the type parameter, useful to be able to uniquely identify the type parameter in different contexts where the name isn\u2019t enough (e.g. class A<T> { fun <T> foo(t: T) } ).","title":"Id"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/id/#id","text":"val id: Int The id of the type parameter, useful to be able to uniquely identify the type parameter in different contexts where the name isn\u2019t enough (e.g. class A<T> { fun <T> foo(t: T) } ).","title":"id"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/id/#property","text":"id - The id of the type parameter, useful to be able to uniquely identify the type parameter in different contexts where the name isn\u2019t enough (e.g. class A<T> { fun <T> foo(t: T) } ).","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter / name name \u00b6 val name: String The name of the type parameter. Property \u00b6 name - The name of the type parameter.","title":"Name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/name/#name","text":"val name: String The name of the type parameter.","title":"name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/name/#property","text":"name - The name of the type parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter / toMutable toMutable \u00b6 fun toMutable(): KmTypeParameter","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/to-mutable/#tomutable","text":"fun toMutable(): KmTypeParameter","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/upper-bounds/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter / upperBounds upperBounds \u00b6 val upperBounds: List < ImmutableKmType > Upper bounds of the type parameter. Property \u00b6 upperBounds - Upper bounds of the type parameter.","title":"Upper bounds"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/upper-bounds/#upperbounds","text":"val upperBounds: List < ImmutableKmType > Upper bounds of the type parameter.","title":"upperBounds"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/upper-bounds/#property","text":"upperBounds - Upper bounds of the type parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/variance/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeParameter / variance variance \u00b6 val variance: KmVariance The declaration-site variance of the type parameter. Property \u00b6 variance - The declaration-site variance of the type parameter.","title":"Variance"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/variance/#variance","text":"val variance: KmVariance The declaration-site variance of the type parameter.","title":"variance"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-parameter/variance/#property","text":"variance - The declaration-site variance of the type parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeProjection ImmutableKmTypeProjection \u00b6 data class ImmutableKmTypeProjection Immutable representation of KmTypeProjection . Represents type projection used in a type argument of the type based on a class or on a type alias. For example, in MutableMap<in String?, *> , in String? is the type projection which is the first type argument of the type. Properties \u00b6 Name Summary type The projected type, or null if this is a star projection. val type: ImmutableKmType ? variance The variance of the type projection, or null if this is a star projection. val variance: KmVariance? Functions \u00b6 Name Summary toMutable fun toMutable(): KmTypeProjection Companion Object Properties \u00b6 Name Summary STAR Star projection ( * ). For example, in MutableMap<in String?, *> , * is the star projection which is the second type argument of the type. val STAR: KmTypeProjection","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/#immutablekmtypeprojection","text":"data class ImmutableKmTypeProjection Immutable representation of KmTypeProjection . Represents type projection used in a type argument of the type based on a class or on a type alias. For example, in MutableMap<in String?, *> , in String? is the type projection which is the first type argument of the type.","title":"ImmutableKmTypeProjection"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/#properties","text":"Name Summary type The projected type, or null if this is a star projection. val type: ImmutableKmType ? variance The variance of the type projection, or null if this is a star projection. val variance: KmVariance?","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/#functions","text":"Name Summary toMutable fun toMutable(): KmTypeProjection","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/#companion-object-properties","text":"Name Summary STAR Star projection ( * ). For example, in MutableMap<in String?, *> , * is the star projection which is the second type argument of the type. val STAR: KmTypeProjection","title":"Companion Object Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/-s-t-a-r/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeProjection / STAR STAR \u00b6 val STAR: KmTypeProjection Star projection ( * ). For example, in MutableMap<in String?, *> , * is the star projection which is the second type argument of the type.","title":" s t a r"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/-s-t-a-r/#star","text":"val STAR: KmTypeProjection Star projection ( * ). For example, in MutableMap<in String?, *> , * is the star projection which is the second type argument of the type.","title":"STAR"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeProjection / toMutable toMutable \u00b6 fun toMutable(): KmTypeProjection","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/to-mutable/#tomutable","text":"fun toMutable(): KmTypeProjection","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeProjection / type type \u00b6 val type: ImmutableKmType ? The projected type, or null if this is a star projection. Property \u00b6 type - The projected type, or null if this is a star projection.","title":"Type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/type/#type","text":"val type: ImmutableKmType ? The projected type, or null if this is a star projection.","title":"type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/type/#property","text":"type - The projected type, or null if this is a star projection.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/variance/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmTypeProjection / variance variance \u00b6 val variance: KmVariance? The variance of the type projection, or null if this is a star projection. Property \u00b6 variance - The variance of the type projection, or null if this is a star projection.","title":"Variance"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/variance/#variance","text":"val variance: KmVariance? The variance of the type projection, or null if this is a star projection.","title":"variance"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-type-projection/variance/#property","text":"variance - The variance of the type projection, or null if this is a star projection.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmValueParameter ImmutableKmValueParameter \u00b6 data class ImmutableKmValueParameter : ImmutableKmWithFlags Immutable representation of KmValueParameter . Represents a value parameter of a Kotlin constructor, function or property setter. Properties \u00b6 Name Summary flags Value parameter flags, consisting of Flag.ValueParameter flags. val flags: Flags name The name of the value parameter. val name: String type Type of the value parameter, if this is not a vararg parameter. val type: ImmutableKmType ? varargElementType Type of the value parameter, if this is a vararg parameter. val varargElementType: ImmutableKmType ? Functions \u00b6 Name Summary toMutable fun toMutable(): KmValueParameter Extension Properties \u00b6 Name Summary declaresDefaultValue val ImmutableKmValueParameter .declaresDefaultValue: Boolean hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isCrossInline val ImmutableKmValueParameter .isCrossInline: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isNoInline val ImmutableKmValueParameter .isNoInline: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/#immutablekmvalueparameter","text":"data class ImmutableKmValueParameter : ImmutableKmWithFlags Immutable representation of KmValueParameter . Represents a value parameter of a Kotlin constructor, function or property setter.","title":"ImmutableKmValueParameter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/#properties","text":"Name Summary flags Value parameter flags, consisting of Flag.ValueParameter flags. val flags: Flags name The name of the value parameter. val name: String type Type of the value parameter, if this is not a vararg parameter. val type: ImmutableKmType ? varargElementType Type of the value parameter, if this is a vararg parameter. val varargElementType: ImmutableKmType ?","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/#functions","text":"Name Summary toMutable fun toMutable(): KmValueParameter","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/#extension-properties","text":"Name Summary declaresDefaultValue val ImmutableKmValueParameter .declaresDefaultValue: Boolean hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isCrossInline val ImmutableKmValueParameter .isCrossInline: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isNoInline val ImmutableKmValueParameter .isNoInline: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmValueParameter / flags flags \u00b6 val flags: Flags Value parameter flags, consisting of Flag.ValueParameter flags. Property \u00b6 flags - Value parameter flags, consisting of Flag.ValueParameter flags.","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/flags/#flags","text":"val flags: Flags Value parameter flags, consisting of Flag.ValueParameter flags.","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/flags/#property","text":"flags - Value parameter flags, consisting of Flag.ValueParameter flags.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/name/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmValueParameter / name name \u00b6 val name: String The name of the value parameter. Property \u00b6 name - The name of the value parameter.","title":"Name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/name/#name","text":"val name: String The name of the value parameter.","title":"name"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/name/#property","text":"name - The name of the value parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmValueParameter / toMutable toMutable \u00b6 fun toMutable(): KmValueParameter","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/to-mutable/#tomutable","text":"fun toMutable(): KmValueParameter","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmValueParameter / type type \u00b6 val type: ImmutableKmType ? Type of the value parameter, if this is not a vararg parameter. Property \u00b6 type - Type of the value parameter, if this is not a vararg parameter.","title":"Type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/type/#type","text":"val type: ImmutableKmType ? Type of the value parameter, if this is not a vararg parameter.","title":"type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/type/#property","text":"type - Type of the value parameter, if this is not a vararg parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/vararg-element-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmValueParameter / varargElementType varargElementType \u00b6 val varargElementType: ImmutableKmType ? Type of the value parameter, if this is a vararg parameter. Property \u00b6 varargElementType - Type of the value parameter, if this is a vararg parameter.","title":"Vararg element type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/vararg-element-type/#varargelementtype","text":"val varargElementType: ImmutableKmType ? Type of the value parameter, if this is a vararg parameter.","title":"varargElementType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-value-parameter/vararg-element-type/#property","text":"varargElementType - Type of the value parameter, if this is a vararg parameter.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmVersionRequirement ImmutableKmVersionRequirement \u00b6 data class ImmutableKmVersionRequirement : KmVersionRequirementVisitor Immutable representation of KmVersionRequirement . Represents a version requirement on a Kotlin declaration. Version requirement is an internal feature of the Kotlin compiler and the standard Kotlin library, enabled for example with the internal kotlin.internal.RequireKotlin annotation. Properties \u00b6 Name Summary errorCode Optional error code to be displayed in the diagnostic. val errorCode: Int ? kind Kind of the version that this declaration requires. val kind: KmVersionRequirementVersionKind level Level of the diagnostic that must be reported on the usages of the declaration in case the version requirement is not satisfied. val level: KmVersionRequirementLevel message Optional message to be displayed in the diagnostic. val message: String ? version Version required by this requirement. val version: KmVersion Functions \u00b6 Name Summary toMutable fun toMutable(): KmVersionRequirement","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/#immutablekmversionrequirement","text":"data class ImmutableKmVersionRequirement : KmVersionRequirementVisitor Immutable representation of KmVersionRequirement . Represents a version requirement on a Kotlin declaration. Version requirement is an internal feature of the Kotlin compiler and the standard Kotlin library, enabled for example with the internal kotlin.internal.RequireKotlin annotation.","title":"ImmutableKmVersionRequirement"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/#properties","text":"Name Summary errorCode Optional error code to be displayed in the diagnostic. val errorCode: Int ? kind Kind of the version that this declaration requires. val kind: KmVersionRequirementVersionKind level Level of the diagnostic that must be reported on the usages of the declaration in case the version requirement is not satisfied. val level: KmVersionRequirementLevel message Optional message to be displayed in the diagnostic. val message: String ? version Version required by this requirement. val version: KmVersion","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/#functions","text":"Name Summary toMutable fun toMutable(): KmVersionRequirement","title":"Functions"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/error-code/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmVersionRequirement / errorCode errorCode \u00b6 val errorCode: Int ? Optional error code to be displayed in the diagnostic. Property \u00b6 errorCode - Optional error code to be displayed in the diagnostic.","title":"Error code"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/error-code/#errorcode","text":"val errorCode: Int ? Optional error code to be displayed in the diagnostic.","title":"errorCode"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/error-code/#property","text":"errorCode - Optional error code to be displayed in the diagnostic.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/kind/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmVersionRequirement / kind kind \u00b6 val kind: KmVersionRequirementVersionKind Kind of the version that this declaration requires. Property \u00b6 kind - Kind of the version that this declaration requires.","title":"Kind"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/kind/#kind","text":"val kind: KmVersionRequirementVersionKind Kind of the version that this declaration requires.","title":"kind"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/kind/#property","text":"kind - Kind of the version that this declaration requires.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/level/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmVersionRequirement / level level \u00b6 val level: KmVersionRequirementLevel Level of the diagnostic that must be reported on the usages of the declaration in case the version requirement is not satisfied. Property \u00b6 level - Level of the diagnostic that must be reported on the usages of the declaration in case the version requirement is not satisfied.","title":"Level"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/level/#level","text":"val level: KmVersionRequirementLevel Level of the diagnostic that must be reported on the usages of the declaration in case the version requirement is not satisfied.","title":"level"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/level/#property","text":"level - Level of the diagnostic that must be reported on the usages of the declaration in case the version requirement is not satisfied.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/message/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmVersionRequirement / message message \u00b6 val message: String ? Optional message to be displayed in the diagnostic. Property \u00b6 message - Optional message to be displayed in the diagnostic.","title":"Message"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/message/#message","text":"val message: String ? Optional message to be displayed in the diagnostic.","title":"message"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/message/#property","text":"message - Optional message to be displayed in the diagnostic.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/to-mutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmVersionRequirement / toMutable toMutable \u00b6 fun toMutable(): KmVersionRequirement","title":"To mutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/to-mutable/#tomutable","text":"fun toMutable(): KmVersionRequirement","title":"toMutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/version/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmVersionRequirement / version version \u00b6 val version: KmVersion Version required by this requirement. Property \u00b6 version - Version required by this requirement.","title":"Version"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/version/#version","text":"val version: KmVersion Version required by this requirement.","title":"version"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-version-requirement/version/#property","text":"version - Version required by this requirement.","title":"Property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-with-flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmWithFlags ImmutableKmWithFlags \u00b6 interface ImmutableKmWithFlags Represents an immutable kotlinx-metadata type with a common Flags property. Properties \u00b6 Name Summary flags abstract val flags: Flags Extension Properties \u00b6 Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean Inheritors \u00b6 Name Summary ImmutableKmClass Immutable representation of KmClass . data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags ImmutableKmConstructor Immutable representation of KmConstructor . data class ImmutableKmConstructor : ImmutableKmWithFlags ImmutableKmEffectExpression Immutable representation of KmEffectExpression . data class ImmutableKmEffectExpression : ImmutableKmWithFlags ImmutableKmFunction Immutable representation of KmFunction . data class ImmutableKmFunction : ImmutableKmWithFlags ImmutableKmProperty Immutable representation of KmProperty . data class ImmutableKmProperty : ImmutableKmWithFlags ImmutableKmType Immutable representation of KmType . data class ImmutableKmType : ImmutableKmWithFlags ImmutableKmTypeAlias Immutable representation of KmTypeAlias . data class ImmutableKmTypeAlias : ImmutableKmWithFlags ImmutableKmTypeParameter Immutable representation of KmTypeParameter . data class ImmutableKmTypeParameter : ImmutableKmWithFlags ImmutableKmValueParameter Immutable representation of KmValueParameter . data class ImmutableKmValueParameter : ImmutableKmWithFlags","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-with-flags/#immutablekmwithflags","text":"interface ImmutableKmWithFlags Represents an immutable kotlinx-metadata type with a common Flags property.","title":"ImmutableKmWithFlags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-with-flags/#properties","text":"Name Summary flags abstract val flags: Flags","title":"Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-with-flags/#extension-properties","text":"Name Summary hasAnnotations val ImmutableKmWithFlags .hasAnnotations: Boolean isAbstract val ImmutableKmWithFlags .isAbstract: Boolean isFinal val ImmutableKmWithFlags .isFinal: Boolean isInternal val ImmutableKmWithFlags .isInternal: Boolean isLocal val ImmutableKmWithFlags .isLocal: Boolean isOpen val ImmutableKmWithFlags .isOpen: Boolean isPrivate val ImmutableKmWithFlags .isPrivate: Boolean isPrivate_to_this val ImmutableKmWithFlags .isPrivate_to_this: Boolean isProtected val ImmutableKmWithFlags .isProtected: Boolean isPublic val ImmutableKmWithFlags .isPublic: Boolean isSealed val ImmutableKmWithFlags .isSealed: Boolean","title":"Extension Properties"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-with-flags/#inheritors","text":"Name Summary ImmutableKmClass Immutable representation of KmClass . data class ImmutableKmClass : ImmutableKmDeclarationContainer , ImmutableKmWithFlags ImmutableKmConstructor Immutable representation of KmConstructor . data class ImmutableKmConstructor : ImmutableKmWithFlags ImmutableKmEffectExpression Immutable representation of KmEffectExpression . data class ImmutableKmEffectExpression : ImmutableKmWithFlags ImmutableKmFunction Immutable representation of KmFunction . data class ImmutableKmFunction : ImmutableKmWithFlags ImmutableKmProperty Immutable representation of KmProperty . data class ImmutableKmProperty : ImmutableKmWithFlags ImmutableKmType Immutable representation of KmType . data class ImmutableKmType : ImmutableKmWithFlags ImmutableKmTypeAlias Immutable representation of KmTypeAlias . data class ImmutableKmTypeAlias : ImmutableKmWithFlags ImmutableKmTypeParameter Immutable representation of KmTypeParameter . data class ImmutableKmTypeParameter : ImmutableKmWithFlags ImmutableKmValueParameter Immutable representation of KmValueParameter . data class ImmutableKmValueParameter : ImmutableKmWithFlags","title":"Inheritors"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-with-flags/flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / ImmutableKmWithFlags / flags flags \u00b6 abstract val flags: Flags","title":"Flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-immutable-km-with-flags/flags/#flags","text":"abstract val flags: Flags","title":"flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-kotlin-poet-metadata-preview/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / KotlinPoetMetadataPreview KotlinPoetMetadataPreview \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY]) annotation class KotlinPoetMetadataPreview Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is. Constructors \u00b6 Name Summary <init> Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is. KotlinPoetMetadataPreview()","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-kotlin-poet-metadata-preview/#kotlinpoetmetadatapreview","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY]) annotation class KotlinPoetMetadataPreview Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is.","title":"KotlinPoetMetadataPreview"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-kotlin-poet-metadata-preview/#constructors","text":"Name Summary <init> Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is. KotlinPoetMetadataPreview()","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-kotlin-poet-metadata-preview/-init-/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / KotlinPoetMetadataPreview / <init> <init> \u00b6 KotlinPoetMetadataPreview() Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is.","title":" init "},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-kotlin-poet-metadata-preview/-init-/#init","text":"KotlinPoetMetadataPreview() Indicates that a given API is part of the experimental KotlinPoet metadata support. This exists because kotlinx-metadata is not a stable API, and will remain in place until it is.","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / PropertyAccessorFlag PropertyAccessorFlag \u00b6 enum class PropertyAccessorFlag Enum Values \u00b6 Name Summary IS_EXTERNAL IS_INLINE IS_NOT_DEFAULT","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/#propertyaccessorflag","text":"enum class PropertyAccessorFlag","title":"PropertyAccessorFlag"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/#enum-values","text":"Name Summary IS_EXTERNAL IS_INLINE IS_NOT_DEFAULT","title":"Enum Values"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/-i-s_-e-x-t-e-r-n-a-l/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / PropertyAccessorFlag / IS_EXTERNAL IS_EXTERNAL \u00b6 IS_EXTERNAL","title":" i s  e x t e r n a l"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/-i-s_-e-x-t-e-r-n-a-l/#is_external","text":"IS_EXTERNAL","title":"IS_EXTERNAL"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/-i-s_-i-n-l-i-n-e/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / PropertyAccessorFlag / IS_INLINE IS_INLINE \u00b6 IS_INLINE","title":" i s  i n l i n e"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/-i-s_-i-n-l-i-n-e/#is_inline","text":"IS_INLINE","title":"IS_INLINE"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/-i-s_-n-o-t_-d-e-f-a-u-l-t/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / PropertyAccessorFlag / IS_NOT_DEFAULT IS_NOT_DEFAULT \u00b6 IS_NOT_DEFAULT","title":" i s  n o t  d e f a u l t"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/-property-accessor-flag/-i-s_-n-o-t_-d-e-f-a-u-l-t/#is_not_default","text":"IS_NOT_DEFAULT","title":"IS_NOT_DEFAULT"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/java.lang.-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / java.lang.Class Extensions for java.lang.Class \u00b6 Name Summary toImmutableKmClass fun Class <*>.toImmutableKmClass(): ImmutableKmClass","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/java.lang.-class/#extensions-for-javalangclass","text":"Name Summary toImmutableKmClass fun Class <*>.toImmutableKmClass(): ImmutableKmClass","title":"Extensions for java.lang.Class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/java.lang.-class/to-immutable-km-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / java.lang.Class / toImmutableKmClass toImmutableKmClass \u00b6 fun Class <*>.toImmutableKmClass(): ImmutableKmClass Return a new ImmutableKmClass representation of the Kotlin metadata for this class.","title":"To immutable km class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/java.lang.-class/to-immutable-km-class/#toimmutablekmclass","text":"fun Class <*>.toImmutableKmClass(): ImmutableKmClass Return a new ImmutableKmClass representation of the Kotlin metadata for this class.","title":"toImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/javax.lang.model.element.-type-element/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / javax.lang.model.element.TypeElement Extensions for javax.lang.model.element.TypeElement \u00b6 Name Summary toImmutableKmClass fun TypeElement .toImmutableKmClass(): ImmutableKmClass","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/javax.lang.model.element.-type-element/#extensions-for-javaxlangmodelelementtypeelement","text":"Name Summary toImmutableKmClass fun TypeElement .toImmutableKmClass(): ImmutableKmClass","title":"Extensions for javax.lang.model.element.TypeElement"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/javax.lang.model.element.-type-element/to-immutable-km-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / javax.lang.model.element.TypeElement / toImmutableKmClass toImmutableKmClass \u00b6 fun TypeElement .toImmutableKmClass(): ImmutableKmClass Return a new ImmutableKmClass representation of the Kotlin metadata for this type.","title":"To immutable km class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/javax.lang.model.element.-type-element/to-immutable-km-class/#toimmutablekmclass","text":"fun TypeElement .toImmutableKmClass(): ImmutableKmClass Return a new ImmutableKmClass representation of the Kotlin metadata for this type.","title":"toImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int Extensions for kotlin.Int \u00b6 Name Summary hasAnnotations val Flags.hasAnnotations: Boolean isAbstract val Flags.isAbstract: Boolean isAnnotationClass val Flags.isAnnotationClass: Boolean isClass val Flags.isClass: Boolean isCompanionObjectClass val Flags.isCompanionObjectClass: Boolean isDataClass val Flags.isDataClass: Boolean isDeclarationFunction val Flags.isDeclarationFunction: Boolean isDelegationFunction val Flags.isDelegationFunction: Boolean isEnumClass val Flags.isEnumClass: Boolean isEnumEntryClass val Flags.isEnumEntryClass: Boolean isExpectClass val Flags.isExpectClass: Boolean isExpectFunction val Flags.isExpectFunction: Boolean isExternalClass val Flags.isExternalClass: Boolean isExternalFunction val Flags.isExternalFunction: Boolean isFakeOverrideFunction val Flags.isFakeOverrideFunction: Boolean isFakeOverrideProperty val Flags.isFakeOverrideProperty: Boolean isFinal val Flags.isFinal: Boolean isInfixFunction val Flags.isInfixFunction: Boolean isInlineClass val Flags.isInlineClass: Boolean isInlineFunction val Flags.isInlineFunction: Boolean isInnerClass val Flags.isInnerClass: Boolean isInterface val Flags.isInterface: Boolean isInternal val Flags.isInternal: Boolean isLocal val Flags.isLocal: Boolean isNullableType val Flags.isNullableType: Boolean isObjectClass val Flags.isObjectClass: Boolean isOpen val Flags.isOpen: Boolean isOperatorFunction val Flags.isOperatorFunction: Boolean isPrimaryConstructor val Flags.isPrimaryConstructor: Boolean isPrivate val Flags.isPrivate: Boolean isPrivate_to_this val Flags.isPrivate_to_this: Boolean isPropertyAccessorExternal val Flags.isPropertyAccessorExternal: Boolean isPropertyAccessorInline val Flags.isPropertyAccessorInline: Boolean isPropertyAccessorNotDefault val Flags.isPropertyAccessorNotDefault: Boolean isProtected val Flags.isProtected: Boolean isPublic val Flags.isPublic: Boolean isSealed val Flags.isSealed: Boolean isSuspendFunction val Flags.isSuspendFunction: Boolean isSuspendType val Flags.isSuspendType: Boolean isSynthesizedFunction val Flags.isSynthesizedFunction: Boolean isTailRecFunction val Flags.isTailRecFunction: Boolean propertyAccessorFlags val Flags.propertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/#extensions-for-kotlinint","text":"Name Summary hasAnnotations val Flags.hasAnnotations: Boolean isAbstract val Flags.isAbstract: Boolean isAnnotationClass val Flags.isAnnotationClass: Boolean isClass val Flags.isClass: Boolean isCompanionObjectClass val Flags.isCompanionObjectClass: Boolean isDataClass val Flags.isDataClass: Boolean isDeclarationFunction val Flags.isDeclarationFunction: Boolean isDelegationFunction val Flags.isDelegationFunction: Boolean isEnumClass val Flags.isEnumClass: Boolean isEnumEntryClass val Flags.isEnumEntryClass: Boolean isExpectClass val Flags.isExpectClass: Boolean isExpectFunction val Flags.isExpectFunction: Boolean isExternalClass val Flags.isExternalClass: Boolean isExternalFunction val Flags.isExternalFunction: Boolean isFakeOverrideFunction val Flags.isFakeOverrideFunction: Boolean isFakeOverrideProperty val Flags.isFakeOverrideProperty: Boolean isFinal val Flags.isFinal: Boolean isInfixFunction val Flags.isInfixFunction: Boolean isInlineClass val Flags.isInlineClass: Boolean isInlineFunction val Flags.isInlineFunction: Boolean isInnerClass val Flags.isInnerClass: Boolean isInterface val Flags.isInterface: Boolean isInternal val Flags.isInternal: Boolean isLocal val Flags.isLocal: Boolean isNullableType val Flags.isNullableType: Boolean isObjectClass val Flags.isObjectClass: Boolean isOpen val Flags.isOpen: Boolean isOperatorFunction val Flags.isOperatorFunction: Boolean isPrimaryConstructor val Flags.isPrimaryConstructor: Boolean isPrivate val Flags.isPrivate: Boolean isPrivate_to_this val Flags.isPrivate_to_this: Boolean isPropertyAccessorExternal val Flags.isPropertyAccessorExternal: Boolean isPropertyAccessorInline val Flags.isPropertyAccessorInline: Boolean isPropertyAccessorNotDefault val Flags.isPropertyAccessorNotDefault: Boolean isProtected val Flags.isProtected: Boolean isPublic val Flags.isPublic: Boolean isSealed val Flags.isSealed: Boolean isSuspendFunction val Flags.isSuspendFunction: Boolean isSuspendType val Flags.isSuspendType: Boolean isSynthesizedFunction val Flags.isSynthesizedFunction: Boolean isTailRecFunction val Flags.isTailRecFunction: Boolean propertyAccessorFlags val Flags.propertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Extensions for kotlin.Int"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/has-annotations/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / hasAnnotations hasAnnotations \u00b6 val Flags.hasAnnotations: Boolean","title":"Has annotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/has-annotations/#hasannotations","text":"val Flags.hasAnnotations: Boolean","title":"hasAnnotations"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-abstract/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isAbstract isAbstract \u00b6 val Flags.isAbstract: Boolean","title":"Is abstract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-abstract/#isabstract","text":"val Flags.isAbstract: Boolean","title":"isAbstract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-annotation-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isAnnotationClass isAnnotationClass \u00b6 val Flags.isAnnotationClass: Boolean","title":"Is annotation class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-annotation-class/#isannotationclass","text":"val Flags.isAnnotationClass: Boolean","title":"isAnnotationClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isClass isClass \u00b6 val Flags.isClass: Boolean","title":"Is class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-class/#isclass","text":"val Flags.isClass: Boolean","title":"isClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-companion-object-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isCompanionObjectClass isCompanionObjectClass \u00b6 val Flags.isCompanionObjectClass: Boolean","title":"Is companion object class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-companion-object-class/#iscompanionobjectclass","text":"val Flags.isCompanionObjectClass: Boolean","title":"isCompanionObjectClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-data-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isDataClass isDataClass \u00b6 val Flags.isDataClass: Boolean","title":"Is data class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-data-class/#isdataclass","text":"val Flags.isDataClass: Boolean","title":"isDataClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-declaration-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isDeclarationFunction isDeclarationFunction \u00b6 val Flags.isDeclarationFunction: Boolean","title":"Is declaration function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-declaration-function/#isdeclarationfunction","text":"val Flags.isDeclarationFunction: Boolean","title":"isDeclarationFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-delegation-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isDelegationFunction isDelegationFunction \u00b6 val Flags.isDelegationFunction: Boolean","title":"Is delegation function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-delegation-function/#isdelegationfunction","text":"val Flags.isDelegationFunction: Boolean","title":"isDelegationFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-enum-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isEnumClass isEnumClass \u00b6 val Flags.isEnumClass: Boolean","title":"Is enum class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-enum-class/#isenumclass","text":"val Flags.isEnumClass: Boolean","title":"isEnumClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-enum-entry-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isEnumEntryClass isEnumEntryClass \u00b6 val Flags.isEnumEntryClass: Boolean","title":"Is enum entry class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-enum-entry-class/#isenumentryclass","text":"val Flags.isEnumEntryClass: Boolean","title":"isEnumEntryClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-expect-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isExpectClass isExpectClass \u00b6 val Flags.isExpectClass: Boolean","title":"Is expect class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-expect-class/#isexpectclass","text":"val Flags.isExpectClass: Boolean","title":"isExpectClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-expect-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isExpectFunction isExpectFunction \u00b6 val Flags.isExpectFunction: Boolean","title":"Is expect function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-expect-function/#isexpectfunction","text":"val Flags.isExpectFunction: Boolean","title":"isExpectFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-external-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isExternalClass isExternalClass \u00b6 val Flags.isExternalClass: Boolean","title":"Is external class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-external-class/#isexternalclass","text":"val Flags.isExternalClass: Boolean","title":"isExternalClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-external-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isExternalFunction isExternalFunction \u00b6 val Flags.isExternalFunction: Boolean","title":"Is external function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-external-function/#isexternalfunction","text":"val Flags.isExternalFunction: Boolean","title":"isExternalFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-fake-override-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isFakeOverrideFunction isFakeOverrideFunction \u00b6 val Flags.isFakeOverrideFunction: Boolean","title":"Is fake override function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-fake-override-function/#isfakeoverridefunction","text":"val Flags.isFakeOverrideFunction: Boolean","title":"isFakeOverrideFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-fake-override-property/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isFakeOverrideProperty isFakeOverrideProperty \u00b6 val Flags.isFakeOverrideProperty: Boolean","title":"Is fake override property"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-fake-override-property/#isfakeoverrideproperty","text":"val Flags.isFakeOverrideProperty: Boolean","title":"isFakeOverrideProperty"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-final/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isFinal isFinal \u00b6 val Flags.isFinal: Boolean","title":"Is final"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-final/#isfinal","text":"val Flags.isFinal: Boolean","title":"isFinal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-infix-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isInfixFunction isInfixFunction \u00b6 val Flags.isInfixFunction: Boolean","title":"Is infix function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-infix-function/#isinfixfunction","text":"val Flags.isInfixFunction: Boolean","title":"isInfixFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-inline-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isInlineClass isInlineClass \u00b6 val Flags.isInlineClass: Boolean","title":"Is inline class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-inline-class/#isinlineclass","text":"val Flags.isInlineClass: Boolean","title":"isInlineClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-inline-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isInlineFunction isInlineFunction \u00b6 val Flags.isInlineFunction: Boolean","title":"Is inline function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-inline-function/#isinlinefunction","text":"val Flags.isInlineFunction: Boolean","title":"isInlineFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-inner-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isInnerClass isInnerClass \u00b6 val Flags.isInnerClass: Boolean","title":"Is inner class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-inner-class/#isinnerclass","text":"val Flags.isInnerClass: Boolean","title":"isInnerClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-interface/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isInterface isInterface \u00b6 val Flags.isInterface: Boolean","title":"Is interface"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-interface/#isinterface","text":"val Flags.isInterface: Boolean","title":"isInterface"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-internal/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isInternal isInternal \u00b6 val Flags.isInternal: Boolean","title":"Is internal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-internal/#isinternal","text":"val Flags.isInternal: Boolean","title":"isInternal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-local/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isLocal isLocal \u00b6 val Flags.isLocal: Boolean","title":"Is local"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-local/#islocal","text":"val Flags.isLocal: Boolean","title":"isLocal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-nullable-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isNullableType isNullableType \u00b6 val Flags.isNullableType: Boolean","title":"Is nullable type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-nullable-type/#isnullabletype","text":"val Flags.isNullableType: Boolean","title":"isNullableType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-object-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isObjectClass isObjectClass \u00b6 val Flags.isObjectClass: Boolean","title":"Is object class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-object-class/#isobjectclass","text":"val Flags.isObjectClass: Boolean","title":"isObjectClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-open/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isOpen isOpen \u00b6 val Flags.isOpen: Boolean","title":"Is open"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-open/#isopen","text":"val Flags.isOpen: Boolean","title":"isOpen"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-operator-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isOperatorFunction isOperatorFunction \u00b6 val Flags.isOperatorFunction: Boolean","title":"Is operator function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-operator-function/#isoperatorfunction","text":"val Flags.isOperatorFunction: Boolean","title":"isOperatorFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-primary-constructor/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isPrimaryConstructor isPrimaryConstructor \u00b6 val Flags.isPrimaryConstructor: Boolean","title":"Is primary constructor"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-primary-constructor/#isprimaryconstructor","text":"val Flags.isPrimaryConstructor: Boolean","title":"isPrimaryConstructor"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-private/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isPrivate isPrivate \u00b6 val Flags.isPrivate: Boolean","title":"Is private"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-private/#isprivate","text":"val Flags.isPrivate: Boolean","title":"isPrivate"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-private_to_this/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isPrivate_to_this isPrivate_to_this \u00b6 val Flags.isPrivate_to_this: Boolean","title":"Is private to this"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-private_to_this/#isprivate_to_this","text":"val Flags.isPrivate_to_this: Boolean","title":"isPrivate_to_this"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-property-accessor-external/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isPropertyAccessorExternal isPropertyAccessorExternal \u00b6 val Flags.isPropertyAccessorExternal: Boolean","title":"Is property accessor external"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-property-accessor-external/#ispropertyaccessorexternal","text":"val Flags.isPropertyAccessorExternal: Boolean","title":"isPropertyAccessorExternal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-property-accessor-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isPropertyAccessorInline isPropertyAccessorInline \u00b6 val Flags.isPropertyAccessorInline: Boolean","title":"Is property accessor inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-property-accessor-inline/#ispropertyaccessorinline","text":"val Flags.isPropertyAccessorInline: Boolean","title":"isPropertyAccessorInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-property-accessor-not-default/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isPropertyAccessorNotDefault isPropertyAccessorNotDefault \u00b6 val Flags.isPropertyAccessorNotDefault: Boolean","title":"Is property accessor not default"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-property-accessor-not-default/#ispropertyaccessornotdefault","text":"val Flags.isPropertyAccessorNotDefault: Boolean","title":"isPropertyAccessorNotDefault"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-protected/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isProtected isProtected \u00b6 val Flags.isProtected: Boolean","title":"Is protected"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-protected/#isprotected","text":"val Flags.isProtected: Boolean","title":"isProtected"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-public/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isPublic isPublic \u00b6 val Flags.isPublic: Boolean","title":"Is public"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-public/#ispublic","text":"val Flags.isPublic: Boolean","title":"isPublic"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-sealed/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isSealed isSealed \u00b6 val Flags.isSealed: Boolean","title":"Is sealed"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-sealed/#issealed","text":"val Flags.isSealed: Boolean","title":"isSealed"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-suspend-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isSuspendFunction isSuspendFunction \u00b6 val Flags.isSuspendFunction: Boolean","title":"Is suspend function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-suspend-function/#issuspendfunction","text":"val Flags.isSuspendFunction: Boolean","title":"isSuspendFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-suspend-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isSuspendType isSuspendType \u00b6 val Flags.isSuspendType: Boolean","title":"Is suspend type"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-suspend-type/#issuspendtype","text":"val Flags.isSuspendType: Boolean","title":"isSuspendType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-synthesized-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isSynthesizedFunction isSynthesizedFunction \u00b6 val Flags.isSynthesizedFunction: Boolean","title":"Is synthesized function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-synthesized-function/#issynthesizedfunction","text":"val Flags.isSynthesizedFunction: Boolean","title":"isSynthesizedFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-tail-rec-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / isTailRecFunction isTailRecFunction \u00b6 val Flags.isTailRecFunction: Boolean","title":"Is tail rec function"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/is-tail-rec-function/#istailrecfunction","text":"val Flags.isTailRecFunction: Boolean","title":"isTailRecFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/property-accessor-flags/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Int / propertyAccessorFlags propertyAccessorFlags \u00b6 val Flags.propertyAccessorFlags: Set < PropertyAccessorFlag >","title":"Property accessor flags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-int/property-accessor-flags/#propertyaccessorflags","text":"val Flags.propertyAccessorFlags: Set < PropertyAccessorFlag >","title":"propertyAccessorFlags"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Metadata Extensions for kotlin.Metadata \u00b6 Name Summary readKotlinClassMetadata Returns the KotlinClassMetadata this represents. In general you should only use this function when you don\u2019t know what the underlying KotlinClassMetadata subtype is, otherwise you should use one of the more direct functions like toImmutableKmClass . fun Metadata .readKotlinClassMetadata(): KotlinClassMetadata toImmutableKmClass fun Metadata .toImmutableKmClass(): ImmutableKmClass toKotlinClassMetadata fun <T : KotlinClassMetadata> Metadata .toKotlinClassMetadata(): T","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/#extensions-for-kotlinmetadata","text":"Name Summary readKotlinClassMetadata Returns the KotlinClassMetadata this represents. In general you should only use this function when you don\u2019t know what the underlying KotlinClassMetadata subtype is, otherwise you should use one of the more direct functions like toImmutableKmClass . fun Metadata .readKotlinClassMetadata(): KotlinClassMetadata toImmutableKmClass fun Metadata .toImmutableKmClass(): ImmutableKmClass toKotlinClassMetadata fun <T : KotlinClassMetadata> Metadata .toKotlinClassMetadata(): T","title":"Extensions for kotlin.Metadata"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/read-kotlin-class-metadata/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Metadata / readKotlinClassMetadata readKotlinClassMetadata \u00b6 fun Metadata .readKotlinClassMetadata(): KotlinClassMetadata Returns the KotlinClassMetadata this represents. In general you should only use this function when you don\u2019t know what the underlying KotlinClassMetadata subtype is, otherwise you should use one of the more direct functions like toImmutableKmClass .","title":"Read kotlin class metadata"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/read-kotlin-class-metadata/#readkotlinclassmetadata","text":"fun Metadata .readKotlinClassMetadata(): KotlinClassMetadata Returns the KotlinClassMetadata this represents. In general you should only use this function when you don\u2019t know what the underlying KotlinClassMetadata subtype is, otherwise you should use one of the more direct functions like toImmutableKmClass .","title":"readKotlinClassMetadata"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/to-immutable-km-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Metadata / toImmutableKmClass toImmutableKmClass \u00b6 fun Metadata .toImmutableKmClass(): ImmutableKmClass","title":"To immutable km class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/to-immutable-km-class/#toimmutablekmclass","text":"fun Metadata .toImmutableKmClass(): ImmutableKmClass","title":"toImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/to-kotlin-class-metadata/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.Metadata / toKotlinClassMetadata toKotlinClassMetadata \u00b6 fun <reified T : KotlinClassMetadata> Metadata .toKotlinClassMetadata(): T","title":"To kotlin class metadata"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.-metadata/to-kotlin-class-metadata/#tokotlinclassmetadata","text":"fun <reified T : KotlinClassMetadata> Metadata .toKotlinClassMetadata(): T","title":"toKotlinClassMetadata"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.reflect.-k-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.reflect.KClass Extensions for kotlin.reflect.KClass \u00b6 Name Summary toImmutableKmClass fun KClass <*>.toImmutableKmClass(): ImmutableKmClass","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.reflect.-k-class/#extensions-for-kotlinreflectkclass","text":"Name Summary toImmutableKmClass fun KClass <*>.toImmutableKmClass(): ImmutableKmClass","title":"Extensions for kotlin.reflect.KClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.reflect.-k-class/to-immutable-km-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlin.reflect.KClass / toImmutableKmClass toImmutableKmClass \u00b6 fun KClass <*>.toImmutableKmClass(): ImmutableKmClass Return a new ImmutableKmClass representation of the Kotlin metadata for this class.","title":"To immutable km class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlin.reflect.-k-class/to-immutable-km-class/#toimmutablekmclass","text":"fun KClass <*>.toImmutableKmClass(): ImmutableKmClass Return a new ImmutableKmClass representation of the Kotlin metadata for this class.","title":"toImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass Extensions for kotlinx.metadata.KmClass \u00b6 Name Summary isAnnotation val KmClass.isAnnotation: Boolean isClass val KmClass.isClass: Boolean isCompanionObject val KmClass.isCompanionObject: Boolean isData val KmClass.isData: Boolean isEnum val KmClass.isEnum: Boolean isEnumEntry val KmClass.isEnumEntry: Boolean isExpect val KmClass.isExpect: Boolean isExternal val KmClass.isExternal: Boolean isInline val KmClass.isInline: Boolean isInner val KmClass.isInner: Boolean isInterface val KmClass.isInterface: Boolean isObject val KmClass.isObject: Boolean toImmutable fun KmClass.toImmutable(): ImmutableKmClass","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/#extensions-for-kotlinxmetadatakmclass","text":"Name Summary isAnnotation val KmClass.isAnnotation: Boolean isClass val KmClass.isClass: Boolean isCompanionObject val KmClass.isCompanionObject: Boolean isData val KmClass.isData: Boolean isEnum val KmClass.isEnum: Boolean isEnumEntry val KmClass.isEnumEntry: Boolean isExpect val KmClass.isExpect: Boolean isExternal val KmClass.isExternal: Boolean isInline val KmClass.isInline: Boolean isInner val KmClass.isInner: Boolean isInterface val KmClass.isInterface: Boolean isObject val KmClass.isObject: Boolean toImmutable fun KmClass.toImmutable(): ImmutableKmClass","title":"Extensions for kotlinx.metadata.KmClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-annotation/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isAnnotation isAnnotation \u00b6 val KmClass.isAnnotation: Boolean","title":"Is annotation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-annotation/#isannotation","text":"val KmClass.isAnnotation: Boolean","title":"isAnnotation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isClass isClass \u00b6 val KmClass.isClass: Boolean","title":"Is class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-class/#isclass","text":"val KmClass.isClass: Boolean","title":"isClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-companion-object/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isCompanionObject isCompanionObject \u00b6 val KmClass.isCompanionObject: Boolean","title":"Is companion object"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-companion-object/#iscompanionobject","text":"val KmClass.isCompanionObject: Boolean","title":"isCompanionObject"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-data/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isData isData \u00b6 val KmClass.isData: Boolean","title":"Is data"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-data/#isdata","text":"val KmClass.isData: Boolean","title":"isData"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-enum-entry/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isEnumEntry isEnumEntry \u00b6 val KmClass.isEnumEntry: Boolean","title":"Is enum entry"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-enum-entry/#isenumentry","text":"val KmClass.isEnumEntry: Boolean","title":"isEnumEntry"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-enum/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isEnum isEnum \u00b6 val KmClass.isEnum: Boolean","title":"Is enum"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-enum/#isenum","text":"val KmClass.isEnum: Boolean","title":"isEnum"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-expect/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isExpect isExpect \u00b6 val KmClass.isExpect: Boolean","title":"Is expect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-expect/#isexpect","text":"val KmClass.isExpect: Boolean","title":"isExpect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-external/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isExternal isExternal \u00b6 val KmClass.isExternal: Boolean","title":"Is external"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-external/#isexternal","text":"val KmClass.isExternal: Boolean","title":"isExternal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isInline isInline \u00b6 val KmClass.isInline: Boolean","title":"Is inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-inline/#isinline","text":"val KmClass.isInline: Boolean","title":"isInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-inner/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isInner isInner \u00b6 val KmClass.isInner: Boolean","title":"Is inner"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-inner/#isinner","text":"val KmClass.isInner: Boolean","title":"isInner"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-interface/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isInterface isInterface \u00b6 val KmClass.isInterface: Boolean","title":"Is interface"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-interface/#isinterface","text":"val KmClass.isInterface: Boolean","title":"isInterface"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-object/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / isObject isObject \u00b6 val KmClass.isObject: Boolean","title":"Is object"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/is-object/#isobject","text":"val KmClass.isObject: Boolean","title":"isObject"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmClass / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmClass.toImmutable(): ImmutableKmClass Return an immutable representation of this KmClass .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-class/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmClass.toImmutable(): ImmutableKmClass Return an immutable representation of this KmClass .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmConstructor Extensions for kotlinx.metadata.KmConstructor \u00b6 Name Summary isPrimary val KmConstructor.isPrimary: Boolean isSecondary val KmConstructor.isSecondary: Boolean toImmutable fun KmConstructor.toImmutable(): ImmutableKmConstructor","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/#extensions-for-kotlinxmetadatakmconstructor","text":"Name Summary isPrimary val KmConstructor.isPrimary: Boolean isSecondary val KmConstructor.isSecondary: Boolean toImmutable fun KmConstructor.toImmutable(): ImmutableKmConstructor","title":"Extensions for kotlinx.metadata.KmConstructor"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/is-primary/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmConstructor / isPrimary isPrimary \u00b6 val KmConstructor.isPrimary: Boolean","title":"Is primary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/is-primary/#isprimary","text":"val KmConstructor.isPrimary: Boolean","title":"isPrimary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/is-secondary/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmConstructor / isSecondary isSecondary \u00b6 val KmConstructor.isSecondary: Boolean","title":"Is secondary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/is-secondary/#issecondary","text":"val KmConstructor.isSecondary: Boolean","title":"isSecondary"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmConstructor / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmConstructor.toImmutable(): ImmutableKmConstructor Return an immutable representation of this KmConstructor .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-constructor/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmConstructor.toImmutable(): ImmutableKmConstructor Return an immutable representation of this KmConstructor .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-contract/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmContract Extensions for kotlinx.metadata.KmContract \u00b6 Name Summary toImmutable fun KmContract.toImmutable(): ImmutableKmContract","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-contract/#extensions-for-kotlinxmetadatakmcontract","text":"Name Summary toImmutable fun KmContract.toImmutable(): ImmutableKmContract","title":"Extensions for kotlinx.metadata.KmContract"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-contract/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmContract / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmContract.toImmutable(): ImmutableKmContract Return an immutable representation of this KmContract .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-contract/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmContract.toImmutable(): ImmutableKmContract Return an immutable representation of this KmContract .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmEffect Extensions for kotlinx.metadata.KmEffect \u00b6 Name Summary toImmutable fun KmEffect.toImmutable(): ImmutableKmEffect","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect/#extensions-for-kotlinxmetadatakmeffect","text":"Name Summary toImmutable fun KmEffect.toImmutable(): ImmutableKmEffect","title":"Extensions for kotlinx.metadata.KmEffect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmEffect / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmEffect.toImmutable(): ImmutableKmEffect Return an immutable representation of this KmEffect .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmEffect.toImmutable(): ImmutableKmEffect Return an immutable representation of this KmEffect .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect-expression/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmEffectExpression Extensions for kotlinx.metadata.KmEffectExpression \u00b6 Name Summary toImmutable fun KmEffectExpression.toImmutable(): ImmutableKmEffectExpression","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect-expression/#extensions-for-kotlinxmetadatakmeffectexpression","text":"Name Summary toImmutable fun KmEffectExpression.toImmutable(): ImmutableKmEffectExpression","title":"Extensions for kotlinx.metadata.KmEffectExpression"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect-expression/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmEffectExpression / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmEffectExpression.toImmutable(): ImmutableKmEffectExpression Return an immutable representation of this KmEffectExpression .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-effect-expression/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmEffectExpression.toImmutable(): ImmutableKmEffectExpression Return an immutable representation of this KmEffectExpression .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-flexible-type-upper-bound/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFlexibleTypeUpperBound Extensions for kotlinx.metadata.KmFlexibleTypeUpperBound \u00b6 Name Summary toImmutable fun KmFlexibleTypeUpperBound.toImmutable(): ImmutableKmFlexibleTypeUpperBound","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-flexible-type-upper-bound/#extensions-for-kotlinxmetadatakmflexibletypeupperbound","text":"Name Summary toImmutable fun KmFlexibleTypeUpperBound.toImmutable(): ImmutableKmFlexibleTypeUpperBound","title":"Extensions for kotlinx.metadata.KmFlexibleTypeUpperBound"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-flexible-type-upper-bound/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFlexibleTypeUpperBound / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmFlexibleTypeUpperBound.toImmutable(): ImmutableKmFlexibleTypeUpperBound Return an immutable representation of this KmFlexibleTypeUpperBound .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-flexible-type-upper-bound/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmFlexibleTypeUpperBound.toImmutable(): ImmutableKmFlexibleTypeUpperBound Return an immutable representation of this KmFlexibleTypeUpperBound .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction Extensions for kotlinx.metadata.KmFunction \u00b6 Name Summary isDeclaration val KmFunction.isDeclaration: Boolean isDelegation val KmFunction.isDelegation: Boolean isExpect val KmFunction.isExpect: Boolean isExternal val KmFunction.isExternal: Boolean isFakeOverride val KmFunction.isFakeOverride: Boolean isInfix val KmFunction.isInfix: Boolean isInline val KmFunction.isInline: Boolean isOperator val KmFunction.isOperator: Boolean isSuspend val KmFunction.isSuspend: Boolean isSynthesized val KmFunction.isSynthesized: Boolean isTailRec val KmFunction.isTailRec: Boolean toImmutable fun KmFunction.toImmutable(): ImmutableKmFunction","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/#extensions-for-kotlinxmetadatakmfunction","text":"Name Summary isDeclaration val KmFunction.isDeclaration: Boolean isDelegation val KmFunction.isDelegation: Boolean isExpect val KmFunction.isExpect: Boolean isExternal val KmFunction.isExternal: Boolean isFakeOverride val KmFunction.isFakeOverride: Boolean isInfix val KmFunction.isInfix: Boolean isInline val KmFunction.isInline: Boolean isOperator val KmFunction.isOperator: Boolean isSuspend val KmFunction.isSuspend: Boolean isSynthesized val KmFunction.isSynthesized: Boolean isTailRec val KmFunction.isTailRec: Boolean toImmutable fun KmFunction.toImmutable(): ImmutableKmFunction","title":"Extensions for kotlinx.metadata.KmFunction"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-declaration/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isDeclaration isDeclaration \u00b6 val KmFunction.isDeclaration: Boolean","title":"Is declaration"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-declaration/#isdeclaration","text":"val KmFunction.isDeclaration: Boolean","title":"isDeclaration"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-delegation/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isDelegation isDelegation \u00b6 val KmFunction.isDelegation: Boolean","title":"Is delegation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-delegation/#isdelegation","text":"val KmFunction.isDelegation: Boolean","title":"isDelegation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-expect/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isExpect isExpect \u00b6 val KmFunction.isExpect: Boolean","title":"Is expect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-expect/#isexpect","text":"val KmFunction.isExpect: Boolean","title":"isExpect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-external/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isExternal isExternal \u00b6 val KmFunction.isExternal: Boolean","title":"Is external"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-external/#isexternal","text":"val KmFunction.isExternal: Boolean","title":"isExternal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-fake-override/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isFakeOverride isFakeOverride \u00b6 val KmFunction.isFakeOverride: Boolean","title":"Is fake override"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-fake-override/#isfakeoverride","text":"val KmFunction.isFakeOverride: Boolean","title":"isFakeOverride"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-infix/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isInfix isInfix \u00b6 val KmFunction.isInfix: Boolean","title":"Is infix"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-infix/#isinfix","text":"val KmFunction.isInfix: Boolean","title":"isInfix"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isInline isInline \u00b6 val KmFunction.isInline: Boolean","title":"Is inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-inline/#isinline","text":"val KmFunction.isInline: Boolean","title":"isInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-operator/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isOperator isOperator \u00b6 val KmFunction.isOperator: Boolean","title":"Is operator"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-operator/#isoperator","text":"val KmFunction.isOperator: Boolean","title":"isOperator"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-suspend/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isSuspend isSuspend \u00b6 val KmFunction.isSuspend: Boolean","title":"Is suspend"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-suspend/#issuspend","text":"val KmFunction.isSuspend: Boolean","title":"isSuspend"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-synthesized/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isSynthesized isSynthesized \u00b6 val KmFunction.isSynthesized: Boolean","title":"Is synthesized"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-synthesized/#issynthesized","text":"val KmFunction.isSynthesized: Boolean","title":"isSynthesized"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-tail-rec/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / isTailRec isTailRec \u00b6 val KmFunction.isTailRec: Boolean","title":"Is tail rec"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/is-tail-rec/#istailrec","text":"val KmFunction.isTailRec: Boolean","title":"isTailRec"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmFunction / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmFunction.toImmutable(): ImmutableKmFunction Return an immutable representation of this KmFunction .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-function/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmFunction.toImmutable(): ImmutableKmFunction Return an immutable representation of this KmFunction .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-lambda/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmLambda Extensions for kotlinx.metadata.KmLambda \u00b6 Name Summary toImmutable fun KmLambda.toImmutable(): ImmutableKmLambda","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-lambda/#extensions-for-kotlinxmetadatakmlambda","text":"Name Summary toImmutable fun KmLambda.toImmutable(): ImmutableKmLambda","title":"Extensions for kotlinx.metadata.KmLambda"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-lambda/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmLambda / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmLambda.toImmutable(): ImmutableKmLambda Return an immutable representation of this KmLambda .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-lambda/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmLambda.toImmutable(): ImmutableKmLambda Return an immutable representation of this KmLambda .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-package/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmPackage Extensions for kotlinx.metadata.KmPackage \u00b6 Name Summary toImmutable fun KmPackage.toImmutable(): ImmutableKmPackage","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-package/#extensions-for-kotlinxmetadatakmpackage","text":"Name Summary toImmutable fun KmPackage.toImmutable(): ImmutableKmPackage","title":"Extensions for kotlinx.metadata.KmPackage"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-package/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmPackage / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmPackage.toImmutable(): ImmutableKmPackage Return an immutable representation of this KmPackage .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-package/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmPackage.toImmutable(): ImmutableKmPackage Return an immutable representation of this KmPackage .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty Extensions for kotlinx.metadata.KmProperty \u00b6 Name Summary hasConstant val KmProperty.hasConstant: Boolean hasGetter val KmProperty.hasGetter: Boolean hasSetter val KmProperty.hasSetter: Boolean isConst val KmProperty.isConst: Boolean isDeclaration val KmProperty.isDeclaration: Boolean isDelegated val KmProperty.isDelegated: Boolean isDelegation val KmProperty.isDelegation: Boolean isExpect val KmProperty.isExpect: Boolean isExternal val KmProperty.isExternal: Boolean isFakeOverride val KmProperty.isFakeOverride: Boolean isLateinit val KmProperty.isLateinit: Boolean isSynthesized val KmProperty.isSynthesized: Boolean isVal val KmProperty.isVal: Boolean isVar val KmProperty.isVar: Boolean toImmutable fun KmProperty.toImmutable(): ImmutableKmProperty","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/#extensions-for-kotlinxmetadatakmproperty","text":"Name Summary hasConstant val KmProperty.hasConstant: Boolean hasGetter val KmProperty.hasGetter: Boolean hasSetter val KmProperty.hasSetter: Boolean isConst val KmProperty.isConst: Boolean isDeclaration val KmProperty.isDeclaration: Boolean isDelegated val KmProperty.isDelegated: Boolean isDelegation val KmProperty.isDelegation: Boolean isExpect val KmProperty.isExpect: Boolean isExternal val KmProperty.isExternal: Boolean isFakeOverride val KmProperty.isFakeOverride: Boolean isLateinit val KmProperty.isLateinit: Boolean isSynthesized val KmProperty.isSynthesized: Boolean isVal val KmProperty.isVal: Boolean isVar val KmProperty.isVar: Boolean toImmutable fun KmProperty.toImmutable(): ImmutableKmProperty","title":"Extensions for kotlinx.metadata.KmProperty"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/has-constant/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / hasConstant hasConstant \u00b6 val KmProperty.hasConstant: Boolean","title":"Has constant"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/has-constant/#hasconstant","text":"val KmProperty.hasConstant: Boolean","title":"hasConstant"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/has-getter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / hasGetter hasGetter \u00b6 val KmProperty.hasGetter: Boolean","title":"Has getter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/has-getter/#hasgetter","text":"val KmProperty.hasGetter: Boolean","title":"hasGetter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/has-setter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / hasSetter hasSetter \u00b6 val KmProperty.hasSetter: Boolean","title":"Has setter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/has-setter/#hassetter","text":"val KmProperty.hasSetter: Boolean","title":"hasSetter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-const/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isConst isConst \u00b6 val KmProperty.isConst: Boolean","title":"Is const"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-const/#isconst","text":"val KmProperty.isConst: Boolean","title":"isConst"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-declaration/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isDeclaration isDeclaration \u00b6 val KmProperty.isDeclaration: Boolean","title":"Is declaration"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-declaration/#isdeclaration","text":"val KmProperty.isDeclaration: Boolean","title":"isDeclaration"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-delegated/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isDelegated isDelegated \u00b6 val KmProperty.isDelegated: Boolean","title":"Is delegated"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-delegated/#isdelegated","text":"val KmProperty.isDelegated: Boolean","title":"isDelegated"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-delegation/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isDelegation isDelegation \u00b6 val KmProperty.isDelegation: Boolean","title":"Is delegation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-delegation/#isdelegation","text":"val KmProperty.isDelegation: Boolean","title":"isDelegation"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-expect/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isExpect isExpect \u00b6 val KmProperty.isExpect: Boolean","title":"Is expect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-expect/#isexpect","text":"val KmProperty.isExpect: Boolean","title":"isExpect"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-external/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isExternal isExternal \u00b6 val KmProperty.isExternal: Boolean","title":"Is external"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-external/#isexternal","text":"val KmProperty.isExternal: Boolean","title":"isExternal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-fake-override/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isFakeOverride isFakeOverride \u00b6 val KmProperty.isFakeOverride: Boolean","title":"Is fake override"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-fake-override/#isfakeoverride","text":"val KmProperty.isFakeOverride: Boolean","title":"isFakeOverride"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-lateinit/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isLateinit isLateinit \u00b6 val KmProperty.isLateinit: Boolean","title":"Is lateinit"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-lateinit/#islateinit","text":"val KmProperty.isLateinit: Boolean","title":"isLateinit"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-synthesized/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isSynthesized isSynthesized \u00b6 val KmProperty.isSynthesized: Boolean","title":"Is synthesized"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-synthesized/#issynthesized","text":"val KmProperty.isSynthesized: Boolean","title":"isSynthesized"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-val/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isVal isVal \u00b6 val KmProperty.isVal: Boolean","title":"Is val"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-val/#isval","text":"val KmProperty.isVal: Boolean","title":"isVal"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-var/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / isVar isVar \u00b6 val KmProperty.isVar: Boolean","title":"Is var"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/is-var/#isvar","text":"val KmProperty.isVar: Boolean","title":"isVar"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmProperty / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmProperty.toImmutable(): ImmutableKmProperty Return an immutable representation of this KmProperty .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-property/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmProperty.toImmutable(): ImmutableKmProperty Return an immutable representation of this KmProperty .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmType Extensions for kotlinx.metadata.KmType \u00b6 Name Summary isNullable val KmType.isNullable: Boolean isSuspend val KmType.isSuspend: Boolean toImmutable fun KmType.toImmutable(): ImmutableKmType","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/#extensions-for-kotlinxmetadatakmtype","text":"Name Summary isNullable val KmType.isNullable: Boolean isSuspend val KmType.isSuspend: Boolean toImmutable fun KmType.toImmutable(): ImmutableKmType","title":"Extensions for kotlinx.metadata.KmType"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/is-nullable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmType / isNullable isNullable \u00b6 val KmType.isNullable: Boolean","title":"Is nullable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/is-nullable/#isnullable","text":"val KmType.isNullable: Boolean","title":"isNullable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/is-suspend/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmType / isSuspend isSuspend \u00b6 val KmType.isSuspend: Boolean","title":"Is suspend"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/is-suspend/#issuspend","text":"val KmType.isSuspend: Boolean","title":"isSuspend"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmType / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmType.toImmutable(): ImmutableKmType Return an immutable representation of this KmType .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmType.toImmutable(): ImmutableKmType Return an immutable representation of this KmType .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-alias/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmTypeAlias Extensions for kotlinx.metadata.KmTypeAlias \u00b6 Name Summary toImmutable fun KmTypeAlias.toImmutable(): ImmutableKmTypeAlias","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-alias/#extensions-for-kotlinxmetadatakmtypealias","text":"Name Summary toImmutable fun KmTypeAlias.toImmutable(): ImmutableKmTypeAlias","title":"Extensions for kotlinx.metadata.KmTypeAlias"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-alias/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmTypeAlias / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmTypeAlias.toImmutable(): ImmutableKmTypeAlias Return an immutable representation of this KmTypeAlias .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-alias/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmTypeAlias.toImmutable(): ImmutableKmTypeAlias Return an immutable representation of this KmTypeAlias .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-parameter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmTypeParameter Extensions for kotlinx.metadata.KmTypeParameter \u00b6 Name Summary isReified val KmTypeParameter.isReified: Boolean toImmutable fun KmTypeParameter.toImmutable(): ImmutableKmTypeParameter","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-parameter/#extensions-for-kotlinxmetadatakmtypeparameter","text":"Name Summary isReified val KmTypeParameter.isReified: Boolean toImmutable fun KmTypeParameter.toImmutable(): ImmutableKmTypeParameter","title":"Extensions for kotlinx.metadata.KmTypeParameter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-parameter/is-reified/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmTypeParameter / isReified isReified \u00b6 val KmTypeParameter.isReified: Boolean","title":"Is reified"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-parameter/is-reified/#isreified","text":"val KmTypeParameter.isReified: Boolean","title":"isReified"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-parameter/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmTypeParameter / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmTypeParameter.toImmutable(): ImmutableKmTypeParameter Return an immutable representation of this KmTypeParameter .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-parameter/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmTypeParameter.toImmutable(): ImmutableKmTypeParameter Return an immutable representation of this KmTypeParameter .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-projection/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmTypeProjection Extensions for kotlinx.metadata.KmTypeProjection \u00b6 Name Summary toImmutable fun KmTypeProjection.toImmutable(): ImmutableKmTypeProjection","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-projection/#extensions-for-kotlinxmetadatakmtypeprojection","text":"Name Summary toImmutable fun KmTypeProjection.toImmutable(): ImmutableKmTypeProjection","title":"Extensions for kotlinx.metadata.KmTypeProjection"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-projection/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmTypeProjection / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmTypeProjection.toImmutable(): ImmutableKmTypeProjection Return an immutable representation of this KmTypeProjection .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-type-projection/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmTypeProjection.toImmutable(): ImmutableKmTypeProjection Return an immutable representation of this KmTypeProjection .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmValueParameter Extensions for kotlinx.metadata.KmValueParameter \u00b6 Name Summary declaresDefaultValue val KmValueParameter.declaresDefaultValue: Boolean isCrossInline val KmValueParameter.isCrossInline: Boolean isNoInline val KmValueParameter.isNoInline: Boolean toImmutable fun KmValueParameter.toImmutable(): ImmutableKmValueParameter","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/#extensions-for-kotlinxmetadatakmvalueparameter","text":"Name Summary declaresDefaultValue val KmValueParameter.declaresDefaultValue: Boolean isCrossInline val KmValueParameter.isCrossInline: Boolean isNoInline val KmValueParameter.isNoInline: Boolean toImmutable fun KmValueParameter.toImmutable(): ImmutableKmValueParameter","title":"Extensions for kotlinx.metadata.KmValueParameter"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/declares-default-value/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmValueParameter / declaresDefaultValue declaresDefaultValue \u00b6 val KmValueParameter.declaresDefaultValue: Boolean","title":"Declares default value"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/declares-default-value/#declaresdefaultvalue","text":"val KmValueParameter.declaresDefaultValue: Boolean","title":"declaresDefaultValue"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/is-cross-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmValueParameter / isCrossInline isCrossInline \u00b6 val KmValueParameter.isCrossInline: Boolean","title":"Is cross inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/is-cross-inline/#iscrossinline","text":"val KmValueParameter.isCrossInline: Boolean","title":"isCrossInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/is-no-inline/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmValueParameter / isNoInline isNoInline \u00b6 val KmValueParameter.isNoInline: Boolean","title":"Is no inline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/is-no-inline/#isnoinline","text":"val KmValueParameter.isNoInline: Boolean","title":"isNoInline"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmValueParameter / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmValueParameter.toImmutable(): ImmutableKmValueParameter Return an immutable representation of this KmValueParameter .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-value-parameter/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmValueParameter.toImmutable(): ImmutableKmValueParameter Return an immutable representation of this KmValueParameter .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-version-requirement/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmVersionRequirement Extensions for kotlinx.metadata.KmVersionRequirement \u00b6 Name Summary toImmutable fun KmVersionRequirement.toImmutable(): ImmutableKmVersionRequirement","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-version-requirement/#extensions-for-kotlinxmetadatakmversionrequirement","text":"Name Summary toImmutable fun KmVersionRequirement.toImmutable(): ImmutableKmVersionRequirement","title":"Extensions for kotlinx.metadata.KmVersionRequirement"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-version-requirement/to-immutable/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.KmVersionRequirement / toImmutable toImmutable \u00b6 @JvmName(\"immutableOf\") fun KmVersionRequirement.toImmutable(): ImmutableKmVersionRequirement Return an immutable representation of this KmVersionRequirement .","title":"To immutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.-km-version-requirement/to-immutable/#toimmutable","text":"@JvmName(\"immutableOf\") fun KmVersionRequirement.toImmutable(): ImmutableKmVersionRequirement Return an immutable representation of this KmVersionRequirement .","title":"toImmutable"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.jvm.KotlinClassMetadata.Class Extensions for kotlinx.metadata.jvm.KotlinClassMetadata.Class \u00b6 Name Summary toImmutableKmClass Visits metadata of this class with a new KmClass instance and returns an ImmutableKmClass instance of its values. fun Class.toImmutableKmClass(): ImmutableKmClass","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-class/#extensions-for-kotlinxmetadatajvmkotlinclassmetadataclass","text":"Name Summary toImmutableKmClass Visits metadata of this class with a new KmClass instance and returns an ImmutableKmClass instance of its values. fun Class.toImmutableKmClass(): ImmutableKmClass","title":"Extensions for kotlinx.metadata.jvm.KotlinClassMetadata.Class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-class/to-immutable-km-class/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.jvm.KotlinClassMetadata.Class / toImmutableKmClass toImmutableKmClass \u00b6 fun Class.toImmutableKmClass(): ImmutableKmClass Visits metadata of this class with a new KmClass instance and returns an ImmutableKmClass instance of its values.","title":"To immutable km class"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-class/to-immutable-km-class/#toimmutablekmclass","text":"fun Class.toImmutableKmClass(): ImmutableKmClass Visits metadata of this class with a new KmClass instance and returns an ImmutableKmClass instance of its values.","title":"toImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-file-facade/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade Extensions for kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade \u00b6 Name Summary toImmutableKmPackage Visits metadata of this class with a new KmPackage instance and returns an ImmutableKmPackage instance of its values. fun FileFacade.toImmutableKmPackage(): ImmutableKmPackage","title":"Index"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-file-facade/#extensions-for-kotlinxmetadatajvmkotlinclassmetadatafilefacade","text":"Name Summary toImmutableKmPackage Visits metadata of this class with a new KmPackage instance and returns an ImmutableKmPackage instance of its values. fun FileFacade.toImmutableKmPackage(): ImmutableKmPackage","title":"Extensions for kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-file-facade/to-immutable-km-package/","text":"kotlinpoet-metadata / com.squareup.kotlinpoet.metadata / kotlinx.metadata.jvm.KotlinClassMetadata.FileFacade / toImmutableKmPackage toImmutableKmPackage \u00b6 fun FileFacade.toImmutableKmPackage(): ImmutableKmPackage Visits metadata of this class with a new KmPackage instance and returns an ImmutableKmPackage instance of its values.","title":"To immutable km package"},{"location":"1.x/kotlinpoet-metadata/com.squareup.kotlinpoet.metadata/kotlinx.metadata.jvm.-kotlin-class-metadata.-file-facade/to-immutable-km-package/#toimmutablekmpackage","text":"fun FileFacade.toImmutableKmPackage(): ImmutableKmPackage Visits metadata of this class with a new KmPackage instance and returns an ImmutableKmPackage instance of its values.","title":"toImmutableKmPackage"},{"location":"1.x/kotlinpoet-metadata-specs/","text":"kotlinpoet-metadata-specs Packages \u00b6 Name Summary com.squareup.kotlinpoet.metadata.specs com.squareup.kotlinpoet.metadata.specs.internal Index \u00b6 All Types","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/#packages","text":"Name Summary com.squareup.kotlinpoet.metadata.specs com.squareup.kotlinpoet.metadata.specs.internal","title":"Packages"},{"location":"1.x/kotlinpoet-metadata-specs/#index","text":"All Types","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package com.squareup.kotlinpoet.metadata.specs) java.lang.Class \u00b6 | com.squareup.kotlinpoet.metadata.specs.ClassData \u00b6 Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. | com.squareup.kotlinpoet.metadata.specs.ClassInspector \u00b6 A basic interface for looking up JVM information about a given Class. | com.squareup.kotlinpoet.metadata.specs.internal.ClassInspectorUtil \u00b6 | com.squareup.kotlinpoet.metadata.specs.ConstructorData \u00b6 Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . | com.squareup.kotlinpoet.metadata.specs.ContainerData \u00b6 Represents relevant information on a declaration container used for ClassInspector . Can only ever be applied on a Kotlin type (i.e. is annotated with Metadata ). | com.squareup.kotlinpoet.metadata.specs.EnumEntryData \u00b6 Represents relevant information on a Kotlin enum entry. | com.squareup.kotlinpoet.metadata.specs.FieldData \u00b6 Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . | com.squareup.kotlinpoet.metadata.specs.FileData \u00b6 Represents relevant information on a file facade used for ClassInspector . | (extensions in package com.squareup.kotlinpoet.metadata.specs) com.squareup.kotlinpoet.metadata.ImmutableKmClass \u00b6 | (extensions in package com.squareup.kotlinpoet.metadata.specs) com.squareup.kotlinpoet.metadata.ImmutableKmPackage \u00b6 | com.squareup.kotlinpoet.metadata.specs.JvmFieldModifier \u00b6 Modifiers that are annotations in Kotlin but modifier keywords in bytecode. | com.squareup.kotlinpoet.metadata.specs.JvmMethodModifier \u00b6 Modifiers that are annotations in Kotlin but modifier keywords in bytecode. | com.squareup.kotlinpoet.metadata.specs.JvmModifier \u00b6 Represents a JVM modifier that is represented as an annotation in Kotlin but as a modifier in bytecode. Examples include annotations such as @JvmStatic or @JvmSynthetic . | (extensions in package com.squareup.kotlinpoet.metadata.specs) kotlin.reflect.KClass \u00b6 | com.squareup.kotlinpoet.metadata.specs.MethodData \u00b6 Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . | com.squareup.kotlinpoet.metadata.specs.PropertyData \u00b6 Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . | (extensions in package com.squareup.kotlinpoet.metadata.specs) javax.lang.model.element.TypeElement \u00b6 | com.squareup.kotlinpoet.metadata.specs.TypeNameAliasTag \u00b6 This tag indicates that this TypeName represents a typealias type.","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#all-types","text":"Name Summary (extensions in package com.squareup.kotlinpoet.metadata.specs)","title":"All Types"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#javalangclass","text":"|","title":"java.lang.Class"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsclassdata","text":"Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. |","title":"com.squareup.kotlinpoet.metadata.specs.ClassData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsclassinspector","text":"A basic interface for looking up JVM information about a given Class. |","title":"com.squareup.kotlinpoet.metadata.specs.ClassInspector"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsinternalclassinspectorutil","text":"|","title":"com.squareup.kotlinpoet.metadata.specs.internal.ClassInspectorUtil"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsconstructordata","text":"Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . |","title":"com.squareup.kotlinpoet.metadata.specs.ConstructorData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecscontainerdata","text":"Represents relevant information on a declaration container used for ClassInspector . Can only ever be applied on a Kotlin type (i.e. is annotated with Metadata ). |","title":"com.squareup.kotlinpoet.metadata.specs.ContainerData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsenumentrydata","text":"Represents relevant information on a Kotlin enum entry. |","title":"com.squareup.kotlinpoet.metadata.specs.EnumEntryData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsfielddata","text":"Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . |","title":"com.squareup.kotlinpoet.metadata.specs.FieldData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsfiledata","text":"Represents relevant information on a file facade used for ClassInspector . | (extensions in package com.squareup.kotlinpoet.metadata.specs)","title":"com.squareup.kotlinpoet.metadata.specs.FileData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataimmutablekmclass","text":"| (extensions in package com.squareup.kotlinpoet.metadata.specs)","title":"com.squareup.kotlinpoet.metadata.ImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataimmutablekmpackage","text":"|","title":"com.squareup.kotlinpoet.metadata.ImmutableKmPackage"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsjvmfieldmodifier","text":"Modifiers that are annotations in Kotlin but modifier keywords in bytecode. |","title":"com.squareup.kotlinpoet.metadata.specs.JvmFieldModifier"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsjvmmethodmodifier","text":"Modifiers that are annotations in Kotlin but modifier keywords in bytecode. |","title":"com.squareup.kotlinpoet.metadata.specs.JvmMethodModifier"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsjvmmodifier","text":"Represents a JVM modifier that is represented as an annotation in Kotlin but as a modifier in bytecode. Examples include annotations such as @JvmStatic or @JvmSynthetic . | (extensions in package com.squareup.kotlinpoet.metadata.specs)","title":"com.squareup.kotlinpoet.metadata.specs.JvmModifier"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#kotlinreflectkclass","text":"|","title":"kotlin.reflect.KClass"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecsmethoddata","text":"Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . |","title":"com.squareup.kotlinpoet.metadata.specs.MethodData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecspropertydata","text":"Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . | (extensions in package com.squareup.kotlinpoet.metadata.specs)","title":"com.squareup.kotlinpoet.metadata.specs.PropertyData"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#javaxlangmodelelementtypeelement","text":"|","title":"javax.lang.model.element.TypeElement"},{"location":"1.x/kotlinpoet-metadata-specs/alltypes/#comsquareupkotlinpoetmetadataspecstypenamealiastag","text":"This tag indicates that this TypeName represents a typealias type.","title":"com.squareup.kotlinpoet.metadata.specs.TypeNameAliasTag"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs Package com.squareup.kotlinpoet.metadata.specs \u00b6 Types \u00b6 Name Summary ClassData Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. data class ClassData : ContainerData ClassInspector A basic interface for looking up JVM information about a given Class. interface ClassInspector ConstructorData Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . data class ConstructorData ContainerData Represents relevant information on a declaration container used for ClassInspector . Can only ever be applied on a Kotlin type (i.e. is annotated with Metadata ). interface ContainerData EnumEntryData Represents relevant information on a Kotlin enum entry. data class EnumEntryData FieldData Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . data class FieldData FileData Represents relevant information on a file facade used for ClassInspector . data class FileData : ContainerData JvmFieldModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmFieldModifier : JvmModifier JvmMethodModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmMethodModifier : JvmModifier JvmModifier Represents a JVM modifier that is represented as an annotation in Kotlin but as a modifier in bytecode. Examples include annotations such as @JvmStatic or @JvmSynthetic . interface JvmModifier MethodData Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . data class MethodData PropertyData Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . data class PropertyData TypeNameAliasTag This tag indicates that this TypeName represents a typealias type. class TypeNameAliasTag Extensions for External Classes \u00b6 Name Summary com.squareup.kotlinpoet.metadata.ImmutableKmClass com.squareup.kotlinpoet.metadata.ImmutableKmPackage java.lang.Class javax.lang.model.element.TypeElement kotlin.reflect.KClass Functions \u00b6 Name Summary classFor Looks up other classes, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. fun ClassInspector .classFor(className: ClassName): ImmutableKmClass containerData Creates a new ContainerData instance for a given className . fun ClassInspector .containerData(className: ClassName, parentClassName: ClassName?): ContainerData","title":"kotlinpoet-metadata-specs"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/#package-comsquareupkotlinpoetmetadataspecs","text":"","title":"Package com.squareup.kotlinpoet.metadata.specs"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/#types","text":"Name Summary ClassData Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. data class ClassData : ContainerData ClassInspector A basic interface for looking up JVM information about a given Class. interface ClassInspector ConstructorData Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . data class ConstructorData ContainerData Represents relevant information on a declaration container used for ClassInspector . Can only ever be applied on a Kotlin type (i.e. is annotated with Metadata ). interface ContainerData EnumEntryData Represents relevant information on a Kotlin enum entry. data class EnumEntryData FieldData Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . data class FieldData FileData Represents relevant information on a file facade used for ClassInspector . data class FileData : ContainerData JvmFieldModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmFieldModifier : JvmModifier JvmMethodModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmMethodModifier : JvmModifier JvmModifier Represents a JVM modifier that is represented as an annotation in Kotlin but as a modifier in bytecode. Examples include annotations such as @JvmStatic or @JvmSynthetic . interface JvmModifier MethodData Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . data class MethodData PropertyData Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . data class PropertyData TypeNameAliasTag This tag indicates that this TypeName represents a typealias type. class TypeNameAliasTag","title":"Types"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/#extensions-for-external-classes","text":"Name Summary com.squareup.kotlinpoet.metadata.ImmutableKmClass com.squareup.kotlinpoet.metadata.ImmutableKmPackage java.lang.Class javax.lang.model.element.TypeElement kotlin.reflect.KClass","title":"Extensions for External Classes"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/#functions","text":"Name Summary classFor Looks up other classes, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. fun ClassInspector .classFor(className: ClassName): ImmutableKmClass containerData Creates a new ContainerData instance for a given className . fun ClassInspector .containerData(className: ClassName, parentClassName: ClassName?): ContainerData","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/class-for/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / classFor classFor \u00b6 fun ClassInspector .classFor(className: ClassName): ImmutableKmClass Looks up other classes, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. Parameters \u00b6 className - The ClassName representation of the class. Return the read ImmutableKmClass from its metadata. If no class was found, this should throw an exception.","title":"Class for"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/class-for/#classfor","text":"fun ClassInspector .classFor(className: ClassName): ImmutableKmClass Looks up other classes, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this.","title":"classFor"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/class-for/#parameters","text":"className - The ClassName representation of the class. Return the read ImmutableKmClass from its metadata. If no class was found, this should throw an exception.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/container-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / containerData containerData \u00b6 fun ClassInspector .containerData(className: ClassName, parentClassName: ClassName?): ContainerData Creates a new ContainerData instance for a given className . Parameters \u00b6 className - the ClassName of the target class to to read from. parentClassName - the parent ClassName name if className is nested, inner, or is a companion object.","title":"Container data"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/container-data/#containerdata","text":"fun ClassInspector .containerData(className: ClassName, parentClassName: ClassName?): ContainerData Creates a new ContainerData instance for a given className .","title":"containerData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/container-data/#parameters","text":"className - the ClassName of the target class to to read from. parentClassName - the parent ClassName name if className is nested, inner, or is a companion object.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData ClassData \u00b6 data class ClassData : ContainerData Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. Constructors \u00b6 Name Summary <init> Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. ClassData(declarationContainer: ImmutableKmClass, className: ClassName, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, constructors: Map <ImmutableKmConstructor, ConstructorData >, methods: Map <ImmutableKmFunction, MethodData >) Properties \u00b6 Name Summary annotations declared annotations on this class. val annotations: Collection <AnnotationSpec> className the KotlinPoet ClassName of the class. val className: ClassName constructors the mapping of declarationContainer \u2018s constructors to parsed ConstructorData . val constructors: Map <ImmutableKmConstructor, ConstructorData > declarationContainer the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation. val declarationContainer: ImmutableKmClass methods the mapping of declarationContainer \u2018s methods to parsed MethodData . val methods: Map <ImmutableKmFunction, MethodData > properties the mapping of declarationContainer \u2018s properties to parsed PropertyData . val properties: Map <ImmutableKmProperty, PropertyData >","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/#classdata","text":"data class ClassData : ContainerData Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades.","title":"ClassData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/#constructors","text":"Name Summary <init> Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. ClassData(declarationContainer: ImmutableKmClass, className: ClassName, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, constructors: Map <ImmutableKmConstructor, ConstructorData >, methods: Map <ImmutableKmFunction, MethodData >)","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/#properties","text":"Name Summary annotations declared annotations on this class. val annotations: Collection <AnnotationSpec> className the KotlinPoet ClassName of the class. val className: ClassName constructors the mapping of declarationContainer \u2018s constructors to parsed ConstructorData . val constructors: Map <ImmutableKmConstructor, ConstructorData > declarationContainer the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation. val declarationContainer: ImmutableKmClass methods the mapping of declarationContainer \u2018s methods to parsed MethodData . val methods: Map <ImmutableKmFunction, MethodData > properties the mapping of declarationContainer \u2018s properties to parsed PropertyData . val properties: Map <ImmutableKmProperty, PropertyData >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData / <init> <init> \u00b6 ClassData(declarationContainer: ImmutableKmClass, className: ClassName, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, constructors: Map <ImmutableKmConstructor, ConstructorData >, methods: Map <ImmutableKmFunction, MethodData >) Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades.","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/-init-/#init","text":"ClassData(declarationContainer: ImmutableKmClass, className: ClassName, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, constructors: Map <ImmutableKmConstructor, ConstructorData >, methods: Map <ImmutableKmFunction, MethodData >) Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades.","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData / annotations annotations \u00b6 val annotations: Collection <AnnotationSpec> declared annotations on this class. Property \u00b6 annotations - declared annotations on this class.","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/annotations/#annotations","text":"val annotations: Collection <AnnotationSpec> declared annotations on this class.","title":"annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/annotations/#property","text":"annotations - declared annotations on this class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/class-name/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData / className className \u00b6 val className: ClassName the KotlinPoet ClassName of the class. Property \u00b6 className - the KotlinPoet ClassName of the class.","title":"Class name"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/class-name/#classname","text":"val className: ClassName the KotlinPoet ClassName of the class.","title":"className"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/class-name/#property","text":"className - the KotlinPoet ClassName of the class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/constructors/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData / constructors constructors \u00b6 val constructors: Map <ImmutableKmConstructor, ConstructorData > the mapping of declarationContainer \u2018s constructors to parsed ConstructorData . Property \u00b6 constructors - the mapping of declarationContainer \u2018s constructors to parsed ConstructorData .","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/constructors/#constructors","text":"val constructors: Map <ImmutableKmConstructor, ConstructorData > the mapping of declarationContainer \u2018s constructors to parsed ConstructorData .","title":"constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/constructors/#property","text":"constructors - the mapping of declarationContainer \u2018s constructors to parsed ConstructorData .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/declaration-container/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData / declarationContainer declarationContainer \u00b6 val declarationContainer: ImmutableKmClass the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation. Property \u00b6 declarationContainer - the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation.","title":"Declaration container"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/declaration-container/#declarationcontainer","text":"val declarationContainer: ImmutableKmClass the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation.","title":"declarationContainer"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/declaration-container/#property","text":"declarationContainer - the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/methods/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData / methods methods \u00b6 val methods: Map <ImmutableKmFunction, MethodData > the mapping of declarationContainer \u2018s methods to parsed MethodData . Property \u00b6 methods - the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"Methods"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/methods/#methods","text":"val methods: Map <ImmutableKmFunction, MethodData > the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"methods"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/methods/#property","text":"methods - the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/properties/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassData / properties properties \u00b6 val properties: Map <ImmutableKmProperty, PropertyData > the mapping of declarationContainer \u2018s properties to parsed PropertyData . Property \u00b6 properties - the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/properties/#properties","text":"val properties: Map <ImmutableKmProperty, PropertyData > the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-data/properties/#property","text":"properties - the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassInspector ClassInspector \u00b6 interface ClassInspector A basic interface for looking up JVM information about a given Class. Properties \u00b6 Name Summary supportsNonRuntimeRetainedAnnotations Indicates if this ClassInspector supports AnnotationRetention.RUNTIME -retained annotations. This is used to indicate if manual inference of certain non-RUNTIME-retained annotations should be done, such as JvmName . abstract val supportsNonRuntimeRetainedAnnotations: Boolean Functions \u00b6 Name Summary containerData Creates a new ContainerData instance for a given declarationContainer . abstract fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData declarationContainerFor Looks up other declaration containers, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. abstract fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer enumEntry Looks up the enum entry on a given enum given its member name. abstract fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData isInterface Looks up a class and returns whether or not it is an interface. Note that this class can be Java or Kotlin, so Metadata should not be relied on for this. abstract fun isInterface(className: ClassName): Boolean methodExists Looks up if a given methodSignature within className exists. abstract fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean Extension Functions \u00b6 Name Summary classFor Looks up other classes, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. fun ClassInspector .classFor(className: ClassName): ImmutableKmClass containerData Creates a new ContainerData instance for a given className . fun ClassInspector .containerData(className: ClassName, parentClassName: ClassName?): ContainerData","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/#classinspector","text":"interface ClassInspector A basic interface for looking up JVM information about a given Class.","title":"ClassInspector"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/#properties","text":"Name Summary supportsNonRuntimeRetainedAnnotations Indicates if this ClassInspector supports AnnotationRetention.RUNTIME -retained annotations. This is used to indicate if manual inference of certain non-RUNTIME-retained annotations should be done, such as JvmName . abstract val supportsNonRuntimeRetainedAnnotations: Boolean","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/#functions","text":"Name Summary containerData Creates a new ContainerData instance for a given declarationContainer . abstract fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData declarationContainerFor Looks up other declaration containers, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. abstract fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer enumEntry Looks up the enum entry on a given enum given its member name. abstract fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData isInterface Looks up a class and returns whether or not it is an interface. Note that this class can be Java or Kotlin, so Metadata should not be relied on for this. abstract fun isInterface(className: ClassName): Boolean methodExists Looks up if a given methodSignature within className exists. abstract fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/#extension-functions","text":"Name Summary classFor Looks up other classes, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. fun ClassInspector .classFor(className: ClassName): ImmutableKmClass containerData Creates a new ContainerData instance for a given className . fun ClassInspector .containerData(className: ClassName, parentClassName: ClassName?): ContainerData","title":"Extension Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/container-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassInspector / containerData containerData \u00b6 abstract fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData Creates a new ContainerData instance for a given declarationContainer . Parameters \u00b6 declarationContainer - the source ImmutableKmDeclarationContainer to read from. className - the ClassName of the target class to to read from. parentClassName - the parent ClassName name if declarationContainer is nested, inner, or is a companion object.","title":"Container data"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/container-data/#containerdata","text":"abstract fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData Creates a new ContainerData instance for a given declarationContainer .","title":"containerData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/container-data/#parameters","text":"declarationContainer - the source ImmutableKmDeclarationContainer to read from. className - the ClassName of the target class to to read from. parentClassName - the parent ClassName name if declarationContainer is nested, inner, or is a companion object.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/declaration-container-for/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassInspector / declarationContainerFor declarationContainerFor \u00b6 abstract fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer Looks up other declaration containers, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this. Parameters \u00b6 className - The ClassName representation of the class. Return the read ImmutableKmDeclarationContainer from its metadata. If no class or facade file was found, this should throw an exception.","title":"Declaration container for"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/declaration-container-for/#declarationcontainerfor","text":"abstract fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer Looks up other declaration containers, such as for nested members. Note that this class would always be Kotlin, so Metadata can be relied on for this.","title":"declarationContainerFor"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/declaration-container-for/#parameters","text":"className - The ClassName representation of the class. Return the read ImmutableKmDeclarationContainer from its metadata. If no class or facade file was found, this should throw an exception.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/enum-entry/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassInspector / enumEntry enumEntry \u00b6 abstract fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData Looks up the enum entry on a given enum given its member name. Parameters \u00b6 enumClassName - The ClassName representation of the enum class. memberName - The simple member name. Return the EnumEntryData","title":"Enum entry"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/enum-entry/#enumentry","text":"abstract fun enumEntry(enumClassName: ClassName, memberName: String ): EnumEntryData Looks up the enum entry on a given enum given its member name.","title":"enumEntry"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/enum-entry/#parameters","text":"enumClassName - The ClassName representation of the enum class. memberName - The simple member name. Return the EnumEntryData","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/is-interface/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassInspector / isInterface isInterface \u00b6 abstract fun isInterface(className: ClassName): Boolean Looks up a class and returns whether or not it is an interface. Note that this class can be Java or Kotlin, so Metadata should not be relied on for this. Parameters \u00b6 className - The ClassName representation of the class. Return whether or not it is an interface.","title":"Is interface"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/is-interface/#isinterface","text":"abstract fun isInterface(className: ClassName): Boolean Looks up a class and returns whether or not it is an interface. Note that this class can be Java or Kotlin, so Metadata should not be relied on for this.","title":"isInterface"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/is-interface/#parameters","text":"className - The ClassName representation of the class. Return whether or not it is an interface.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/method-exists/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassInspector / methodExists methodExists \u00b6 abstract fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean Looks up if a given methodSignature within className exists. Parameters \u00b6 className - The ClassName representation of the class. methodSignature - The method signature to check. Return whether or not the method exists.","title":"Method exists"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/method-exists/#methodexists","text":"abstract fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean Looks up if a given methodSignature within className exists.","title":"methodExists"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/method-exists/#parameters","text":"className - The ClassName representation of the class. methodSignature - The method signature to check. Return whether or not the method exists.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/supports-non-runtime-retained-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ClassInspector / supportsNonRuntimeRetainedAnnotations supportsNonRuntimeRetainedAnnotations \u00b6 abstract val supportsNonRuntimeRetainedAnnotations: Boolean Indicates if this ClassInspector supports AnnotationRetention.RUNTIME -retained annotations. This is used to indicate if manual inference of certain non-RUNTIME-retained annotations should be done, such as JvmName .","title":"Supports non runtime retained annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-class-inspector/supports-non-runtime-retained-annotations/#supportsnonruntimeretainedannotations","text":"abstract val supportsNonRuntimeRetainedAnnotations: Boolean Indicates if this ClassInspector supports AnnotationRetention.RUNTIME -retained annotations. This is used to indicate if manual inference of certain non-RUNTIME-retained annotations should be done, such as JvmName .","title":"supportsNonRuntimeRetainedAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData ConstructorData \u00b6 data class ConstructorData Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . Parameters \u00b6 annotations - declared annotations on this constructor. Constructors \u00b6 Name Summary <init> Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . ConstructorData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, exceptions: List <TypeName>) Properties \u00b6 Name Summary allAnnotations A collection of all annotations on this constructor, including any derived from jvmModifiers , isSynthetic , and exceptions . val allAnnotations: Collection <AnnotationSpec> exceptions list of exceptions thrown by this constructor. val exceptions: List <TypeName> isSynthetic indicates if this constructor is synthetic or not. val isSynthetic: Boolean jvmModifiers set of JvmMethodModifiers on this constructor. val jvmModifiers: Set < JvmMethodModifier > parameterAnnotations a mapping of parameter indices to annotations on them. val parameterAnnotations: Map < Int , Collection <AnnotationSpec>> Companion Object Properties \u00b6 Name Summary EMPTY val EMPTY: ConstructorData","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/#constructordata","text":"data class ConstructorData Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData .","title":"ConstructorData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/#parameters","text":"annotations - declared annotations on this constructor.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/#constructors","text":"Name Summary <init> Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . ConstructorData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, exceptions: List <TypeName>)","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/#properties","text":"Name Summary allAnnotations A collection of all annotations on this constructor, including any derived from jvmModifiers , isSynthetic , and exceptions . val allAnnotations: Collection <AnnotationSpec> exceptions list of exceptions thrown by this constructor. val exceptions: List <TypeName> isSynthetic indicates if this constructor is synthetic or not. val isSynthetic: Boolean jvmModifiers set of JvmMethodModifiers on this constructor. val jvmModifiers: Set < JvmMethodModifier > parameterAnnotations a mapping of parameter indices to annotations on them. val parameterAnnotations: Map < Int , Collection <AnnotationSpec>>","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/#companion-object-properties","text":"Name Summary EMPTY val EMPTY: ConstructorData","title":"Companion Object Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/-e-m-p-t-y/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData / EMPTY EMPTY \u00b6 val EMPTY: ConstructorData","title":" e m p t y"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/-e-m-p-t-y/#empty","text":"val EMPTY: ConstructorData","title":"EMPTY"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData / <init> <init> \u00b6 ConstructorData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, exceptions: List <TypeName>) Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData . Parameters \u00b6 annotations - declared annotations on this constructor.","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/-init-/#init","text":"ConstructorData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, exceptions: List <TypeName>) Represents relevant information on a constructor used for ClassInspector . Should only be associated with constructors of a ClassData .","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/-init-/#parameters","text":"annotations - declared annotations on this constructor.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/all-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData / allAnnotations allAnnotations \u00b6 val allAnnotations: Collection <AnnotationSpec> A collection of all annotations on this constructor, including any derived from jvmModifiers , isSynthetic , and exceptions .","title":"All annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/all-annotations/#allannotations","text":"val allAnnotations: Collection <AnnotationSpec> A collection of all annotations on this constructor, including any derived from jvmModifiers , isSynthetic , and exceptions .","title":"allAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/exceptions/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData / exceptions exceptions \u00b6 val exceptions: List <TypeName> list of exceptions thrown by this constructor. Property \u00b6 exceptions - list of exceptions thrown by this constructor.","title":"Exceptions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/exceptions/#exceptions","text":"val exceptions: List <TypeName> list of exceptions thrown by this constructor.","title":"exceptions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/exceptions/#property","text":"exceptions - list of exceptions thrown by this constructor.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/is-synthetic/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData / isSynthetic isSynthetic \u00b6 val isSynthetic: Boolean indicates if this constructor is synthetic or not. Property \u00b6 isSynthetic - indicates if this constructor is synthetic or not.","title":"Is synthetic"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/is-synthetic/#issynthetic","text":"val isSynthetic: Boolean indicates if this constructor is synthetic or not.","title":"isSynthetic"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/is-synthetic/#property","text":"isSynthetic - indicates if this constructor is synthetic or not.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/jvm-modifiers/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData / jvmModifiers jvmModifiers \u00b6 val jvmModifiers: Set < JvmMethodModifier > set of JvmMethodModifiers on this constructor. Property \u00b6 jvmModifiers - set of JvmMethodModifiers on this constructor.","title":"Jvm modifiers"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/jvm-modifiers/#jvmmodifiers","text":"val jvmModifiers: Set < JvmMethodModifier > set of JvmMethodModifiers on this constructor.","title":"jvmModifiers"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/jvm-modifiers/#property","text":"jvmModifiers - set of JvmMethodModifiers on this constructor.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/parameter-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ConstructorData / parameterAnnotations parameterAnnotations \u00b6 val parameterAnnotations: Map < Int , Collection <AnnotationSpec>> a mapping of parameter indices to annotations on them. Property \u00b6 parameterAnnotations - a mapping of parameter indices to annotations on them.","title":"Parameter annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/parameter-annotations/#parameterannotations","text":"val parameterAnnotations: Map < Int , Collection <AnnotationSpec>> a mapping of parameter indices to annotations on them.","title":"parameterAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-constructor-data/parameter-annotations/#property","text":"parameterAnnotations - a mapping of parameter indices to annotations on them.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ContainerData ContainerData \u00b6 interface ContainerData Represents relevant information on a declaration container used for ClassInspector . Can only ever be applied on a Kotlin type (i.e. is annotated with Metadata ). Properties \u00b6 Name Summary annotations declared annotations on this class. abstract val annotations: Collection <AnnotationSpec> declarationContainer the ImmutableKmDeclarationContainer as parsed from the class\u2019s @Metadata annotation. abstract val declarationContainer: ImmutableKmDeclarationContainer methods the mapping of declarationContainer \u2018s methods to parsed MethodData . abstract val methods: Map <ImmutableKmFunction, MethodData > properties the mapping of declarationContainer \u2018s properties to parsed PropertyData . abstract val properties: Map <ImmutableKmProperty, PropertyData > Inheritors \u00b6 Name Summary ClassData Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. data class ClassData : ContainerData FileData Represents relevant information on a file facade used for ClassInspector . data class FileData : ContainerData","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/#containerdata","text":"interface ContainerData Represents relevant information on a declaration container used for ClassInspector . Can only ever be applied on a Kotlin type (i.e. is annotated with Metadata ).","title":"ContainerData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/#properties","text":"Name Summary annotations declared annotations on this class. abstract val annotations: Collection <AnnotationSpec> declarationContainer the ImmutableKmDeclarationContainer as parsed from the class\u2019s @Metadata annotation. abstract val declarationContainer: ImmutableKmDeclarationContainer methods the mapping of declarationContainer \u2018s methods to parsed MethodData . abstract val methods: Map <ImmutableKmFunction, MethodData > properties the mapping of declarationContainer \u2018s properties to parsed PropertyData . abstract val properties: Map <ImmutableKmProperty, PropertyData >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/#inheritors","text":"Name Summary ClassData Represents relevant information on a Kotlin class used for ClassInspector . Can only ever be applied on a class and not file facades. data class ClassData : ContainerData FileData Represents relevant information on a file facade used for ClassInspector . data class FileData : ContainerData","title":"Inheritors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ContainerData / annotations annotations \u00b6 abstract val annotations: Collection <AnnotationSpec> declared annotations on this class. Property \u00b6 annotations - declared annotations on this class.","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/annotations/#annotations","text":"abstract val annotations: Collection <AnnotationSpec> declared annotations on this class.","title":"annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/annotations/#property","text":"annotations - declared annotations on this class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/declaration-container/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ContainerData / declarationContainer declarationContainer \u00b6 abstract val declarationContainer: ImmutableKmDeclarationContainer the ImmutableKmDeclarationContainer as parsed from the class\u2019s @Metadata annotation. Property \u00b6 declarationContainer - the ImmutableKmDeclarationContainer as parsed from the class\u2019s @Metadata annotation.","title":"Declaration container"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/declaration-container/#declarationcontainer","text":"abstract val declarationContainer: ImmutableKmDeclarationContainer the ImmutableKmDeclarationContainer as parsed from the class\u2019s @Metadata annotation.","title":"declarationContainer"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/declaration-container/#property","text":"declarationContainer - the ImmutableKmDeclarationContainer as parsed from the class\u2019s @Metadata annotation.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/methods/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ContainerData / methods methods \u00b6 abstract val methods: Map <ImmutableKmFunction, MethodData > the mapping of declarationContainer \u2018s methods to parsed MethodData . Property \u00b6 methods - the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"Methods"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/methods/#methods","text":"abstract val methods: Map <ImmutableKmFunction, MethodData > the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"methods"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/methods/#property","text":"methods - the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/properties/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / ContainerData / properties properties \u00b6 abstract val properties: Map <ImmutableKmProperty, PropertyData > the mapping of declarationContainer \u2018s properties to parsed PropertyData . Property \u00b6 properties - the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/properties/#properties","text":"abstract val properties: Map <ImmutableKmProperty, PropertyData > the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-container-data/properties/#property","text":"properties - the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / EnumEntryData EnumEntryData \u00b6 data class EnumEntryData Represents relevant information on a Kotlin enum entry. Constructors \u00b6 Name Summary <init> Represents relevant information on a Kotlin enum entry. EnumEntryData(declarationContainer: ImmutableKmClass?, annotations: Collection <AnnotationSpec>) Properties \u00b6 Name Summary annotations the annotations for the entry val annotations: Collection <AnnotationSpec> declarationContainer the ImmutableKmClass as parsed from the entry\u2019s @Metadata annotation. val declarationContainer: ImmutableKmClass?","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/#enumentrydata","text":"data class EnumEntryData Represents relevant information on a Kotlin enum entry.","title":"EnumEntryData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/#constructors","text":"Name Summary <init> Represents relevant information on a Kotlin enum entry. EnumEntryData(declarationContainer: ImmutableKmClass?, annotations: Collection <AnnotationSpec>)","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/#properties","text":"Name Summary annotations the annotations for the entry val annotations: Collection <AnnotationSpec> declarationContainer the ImmutableKmClass as parsed from the entry\u2019s @Metadata annotation. val declarationContainer: ImmutableKmClass?","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / EnumEntryData / <init> <init> \u00b6 EnumEntryData(declarationContainer: ImmutableKmClass?, annotations: Collection <AnnotationSpec>) Represents relevant information on a Kotlin enum entry.","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/-init-/#init","text":"EnumEntryData(declarationContainer: ImmutableKmClass?, annotations: Collection <AnnotationSpec>) Represents relevant information on a Kotlin enum entry.","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / EnumEntryData / annotations annotations \u00b6 val annotations: Collection <AnnotationSpec> the annotations for the entry Property \u00b6 annotations - the annotations for the entry","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/annotations/#annotations","text":"val annotations: Collection <AnnotationSpec> the annotations for the entry","title":"annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/annotations/#property","text":"annotations - the annotations for the entry","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/declaration-container/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / EnumEntryData / declarationContainer declarationContainer \u00b6 val declarationContainer: ImmutableKmClass? the ImmutableKmClass as parsed from the entry\u2019s @Metadata annotation. Property \u00b6 declarationContainer - the ImmutableKmClass as parsed from the entry\u2019s @Metadata annotation.","title":"Declaration container"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/declaration-container/#declarationcontainer","text":"val declarationContainer: ImmutableKmClass? the ImmutableKmClass as parsed from the entry\u2019s @Metadata annotation.","title":"declarationContainer"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-enum-entry-data/declaration-container/#property","text":"declarationContainer - the ImmutableKmClass as parsed from the entry\u2019s @Metadata annotation.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FieldData FieldData \u00b6 data class FieldData Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . Parameters \u00b6 annotations - declared annotations on this field. Constructors \u00b6 Name Summary <init> Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . FieldData(annotations: List <AnnotationSpec>, isSynthetic: Boolean , jvmModifiers: Set < JvmFieldModifier >, constant: CodeBlock?) Properties \u00b6 Name Summary allAnnotations A collection of all annotations on this method, including any derived from jvmModifiers and isSynthetic . val allAnnotations: Collection <AnnotationSpec> constant the constant value of this field, if available. Note that this is does not strictly imply that the associated property is const . val constant: CodeBlock? isSynthetic indicates if this field is synthetic or not. val isSynthetic: Boolean jvmModifiers set of JvmMethodModifiers on this field. val jvmModifiers: Set < JvmFieldModifier > Companion Object Properties \u00b6 Name Summary SYNTHETIC val SYNTHETIC: FieldData","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/#fielddata","text":"data class FieldData Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData .","title":"FieldData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/#parameters","text":"annotations - declared annotations on this field.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/#constructors","text":"Name Summary <init> Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . FieldData(annotations: List <AnnotationSpec>, isSynthetic: Boolean , jvmModifiers: Set < JvmFieldModifier >, constant: CodeBlock?)","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/#properties","text":"Name Summary allAnnotations A collection of all annotations on this method, including any derived from jvmModifiers and isSynthetic . val allAnnotations: Collection <AnnotationSpec> constant the constant value of this field, if available. Note that this is does not strictly imply that the associated property is const . val constant: CodeBlock? isSynthetic indicates if this field is synthetic or not. val isSynthetic: Boolean jvmModifiers set of JvmMethodModifiers on this field. val jvmModifiers: Set < JvmFieldModifier >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/#companion-object-properties","text":"Name Summary SYNTHETIC val SYNTHETIC: FieldData","title":"Companion Object Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FieldData / <init> <init> \u00b6 FieldData(annotations: List <AnnotationSpec>, isSynthetic: Boolean , jvmModifiers: Set < JvmFieldModifier >, constant: CodeBlock?) Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData . Parameters \u00b6 annotations - declared annotations on this field.","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/-init-/#init","text":"FieldData(annotations: List <AnnotationSpec>, isSynthetic: Boolean , jvmModifiers: Set < JvmFieldModifier >, constant: CodeBlock?) Represents relevant information on a field used for ClassInspector . Should only be associated with a PropertyData .","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/-init-/#parameters","text":"annotations - declared annotations on this field.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/-s-y-n-t-h-e-t-i-c/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FieldData / SYNTHETIC SYNTHETIC \u00b6 val SYNTHETIC: FieldData","title":" s y n t h e t i c"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/-s-y-n-t-h-e-t-i-c/#synthetic","text":"val SYNTHETIC: FieldData","title":"SYNTHETIC"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/all-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FieldData / allAnnotations allAnnotations \u00b6 val allAnnotations: Collection <AnnotationSpec> A collection of all annotations on this method, including any derived from jvmModifiers and isSynthetic .","title":"All annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/all-annotations/#allannotations","text":"val allAnnotations: Collection <AnnotationSpec> A collection of all annotations on this method, including any derived from jvmModifiers and isSynthetic .","title":"allAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/constant/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FieldData / constant constant \u00b6 val constant: CodeBlock? the constant value of this field, if available. Note that this is does not strictly imply that the associated property is const . Property \u00b6 constant - the constant value of this field, if available. Note that this is does not strictly imply that the associated property is const .","title":"Constant"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/constant/#constant","text":"val constant: CodeBlock? the constant value of this field, if available. Note that this is does not strictly imply that the associated property is const .","title":"constant"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/constant/#property","text":"constant - the constant value of this field, if available. Note that this is does not strictly imply that the associated property is const .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/is-synthetic/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FieldData / isSynthetic isSynthetic \u00b6 val isSynthetic: Boolean indicates if this field is synthetic or not. Property \u00b6 isSynthetic - indicates if this field is synthetic or not.","title":"Is synthetic"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/is-synthetic/#issynthetic","text":"val isSynthetic: Boolean indicates if this field is synthetic or not.","title":"isSynthetic"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/is-synthetic/#property","text":"isSynthetic - indicates if this field is synthetic or not.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/jvm-modifiers/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FieldData / jvmModifiers jvmModifiers \u00b6 val jvmModifiers: Set < JvmFieldModifier > set of JvmMethodModifiers on this field. Property \u00b6 jvmModifiers - set of JvmMethodModifiers on this field.","title":"Jvm modifiers"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/jvm-modifiers/#jvmmodifiers","text":"val jvmModifiers: Set < JvmFieldModifier > set of JvmMethodModifiers on this field.","title":"jvmModifiers"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-field-data/jvm-modifiers/#property","text":"jvmModifiers - set of JvmMethodModifiers on this field.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData FileData \u00b6 data class FileData : ContainerData Represents relevant information on a file facade used for ClassInspector . Constructors \u00b6 Name Summary <init> Represents relevant information on a file facade used for ClassInspector . FileData(declarationContainer: ImmutableKmPackage, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, methods: Map <ImmutableKmFunction, MethodData >, className: ClassName, jvmName: String ? = if (!className.simpleName.endsWith(\"Kt\")) className.simpleName else null) Properties \u00b6 Name Summary annotations declared annotations on this class. val annotations: Collection <AnnotationSpec> className the KotlinPoet ClassName of the underlying facade class in JVM. val className: ClassName declarationContainer the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation. val declarationContainer: ImmutableKmPackage fileName The file name of the container, defaults to className \u2018s simple name + \u201cKt\u201d. If a jvmName is specified, it will always defer to that. val fileName: String jvmName the @JvmName of the class or null if it does not have a custom name. Default will try to infer from the className . val jvmName: String ? methods the mapping of declarationContainer \u2018s methods to parsed MethodData . val methods: Map <ImmutableKmFunction, MethodData > properties the mapping of declarationContainer \u2018s properties to parsed PropertyData . val properties: Map <ImmutableKmProperty, PropertyData >","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/#filedata","text":"data class FileData : ContainerData Represents relevant information on a file facade used for ClassInspector .","title":"FileData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/#constructors","text":"Name Summary <init> Represents relevant information on a file facade used for ClassInspector . FileData(declarationContainer: ImmutableKmPackage, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, methods: Map <ImmutableKmFunction, MethodData >, className: ClassName, jvmName: String ? = if (!className.simpleName.endsWith(\"Kt\")) className.simpleName else null)","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/#properties","text":"Name Summary annotations declared annotations on this class. val annotations: Collection <AnnotationSpec> className the KotlinPoet ClassName of the underlying facade class in JVM. val className: ClassName declarationContainer the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation. val declarationContainer: ImmutableKmPackage fileName The file name of the container, defaults to className \u2018s simple name + \u201cKt\u201d. If a jvmName is specified, it will always defer to that. val fileName: String jvmName the @JvmName of the class or null if it does not have a custom name. Default will try to infer from the className . val jvmName: String ? methods the mapping of declarationContainer \u2018s methods to parsed MethodData . val methods: Map <ImmutableKmFunction, MethodData > properties the mapping of declarationContainer \u2018s properties to parsed PropertyData . val properties: Map <ImmutableKmProperty, PropertyData >","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / <init> <init> \u00b6 FileData(declarationContainer: ImmutableKmPackage, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, methods: Map <ImmutableKmFunction, MethodData >, className: ClassName, jvmName: String ? = if (!className.simpleName.endsWith(\"Kt\")) className.simpleName else null) Represents relevant information on a file facade used for ClassInspector .","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/-init-/#init","text":"FileData(declarationContainer: ImmutableKmPackage, annotations: Collection <AnnotationSpec>, properties: Map <ImmutableKmProperty, PropertyData >, methods: Map <ImmutableKmFunction, MethodData >, className: ClassName, jvmName: String ? = if (!className.simpleName.endsWith(\"Kt\")) className.simpleName else null) Represents relevant information on a file facade used for ClassInspector .","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / annotations annotations \u00b6 val annotations: Collection <AnnotationSpec> declared annotations on this class. Property \u00b6 annotations - declared annotations on this class.","title":"Annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/annotations/#annotations","text":"val annotations: Collection <AnnotationSpec> declared annotations on this class.","title":"annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/annotations/#property","text":"annotations - declared annotations on this class.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/class-name/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / className className \u00b6 val className: ClassName the KotlinPoet ClassName of the underlying facade class in JVM. Property \u00b6 className - the KotlinPoet ClassName of the underlying facade class in JVM.","title":"Class name"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/class-name/#classname","text":"val className: ClassName the KotlinPoet ClassName of the underlying facade class in JVM.","title":"className"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/class-name/#property","text":"className - the KotlinPoet ClassName of the underlying facade class in JVM.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/declaration-container/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / declarationContainer declarationContainer \u00b6 val declarationContainer: ImmutableKmPackage the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation. Property \u00b6 declarationContainer - the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation.","title":"Declaration container"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/declaration-container/#declarationcontainer","text":"val declarationContainer: ImmutableKmPackage the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation.","title":"declarationContainer"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/declaration-container/#property","text":"declarationContainer - the ImmutableKmClass as parsed from the class\u2019s @Metadata annotation.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/file-name/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / fileName fileName \u00b6 val fileName: String The file name of the container, defaults to className \u2018s simple name + \u201cKt\u201d. If a jvmName is specified, it will always defer to that.","title":"File name"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/file-name/#filename","text":"val fileName: String The file name of the container, defaults to className \u2018s simple name + \u201cKt\u201d. If a jvmName is specified, it will always defer to that.","title":"fileName"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/jvm-name/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / jvmName jvmName \u00b6 val jvmName: String ? the @JvmName of the class or null if it does not have a custom name. Default will try to infer from the className . Property \u00b6 jvmName - the @JvmName of the class or null if it does not have a custom name. Default will try to infer from the className .","title":"Jvm name"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/jvm-name/#jvmname","text":"val jvmName: String ? the @JvmName of the class or null if it does not have a custom name. Default will try to infer from the className .","title":"jvmName"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/jvm-name/#property","text":"jvmName - the @JvmName of the class or null if it does not have a custom name. Default will try to infer from the className .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/methods/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / methods methods \u00b6 val methods: Map <ImmutableKmFunction, MethodData > the mapping of declarationContainer \u2018s methods to parsed MethodData . Property \u00b6 methods - the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"Methods"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/methods/#methods","text":"val methods: Map <ImmutableKmFunction, MethodData > the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"methods"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/methods/#property","text":"methods - the mapping of declarationContainer \u2018s methods to parsed MethodData .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/properties/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / FileData / properties properties \u00b6 val properties: Map <ImmutableKmProperty, PropertyData > the mapping of declarationContainer \u2018s properties to parsed PropertyData . Property \u00b6 properties - the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/properties/#properties","text":"val properties: Map <ImmutableKmProperty, PropertyData > the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-file-data/properties/#property","text":"properties - the mapping of declarationContainer \u2018s properties to parsed PropertyData .","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmFieldModifier JvmFieldModifier \u00b6 enum class JvmFieldModifier : JvmModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. Enum Values \u00b6 Name Summary STATIC TRANSIENT VOLATILE","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/#jvmfieldmodifier","text":"enum class JvmFieldModifier : JvmModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode.","title":"JvmFieldModifier"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/#enum-values","text":"Name Summary STATIC TRANSIENT VOLATILE","title":"Enum Values"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-s-t-a-t-i-c/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmFieldModifier / STATIC STATIC \u00b6 STATIC Functions \u00b6 Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-s-t-a-t-i-c/#static","text":"STATIC","title":"STATIC"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-s-t-a-t-i-c/#functions","text":"Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-s-t-a-t-i-c/annotation-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmFieldModifier / STATIC / annotationSpec annotationSpec \u00b6 fun annotationSpec(): AnnotationSpec","title":"Annotation spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-s-t-a-t-i-c/annotation-spec/#annotationspec","text":"fun annotationSpec(): AnnotationSpec","title":"annotationSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-t-r-a-n-s-i-e-n-t/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmFieldModifier / TRANSIENT TRANSIENT \u00b6 TRANSIENT Functions \u00b6 Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-t-r-a-n-s-i-e-n-t/#transient","text":"TRANSIENT","title":"TRANSIENT"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-t-r-a-n-s-i-e-n-t/#functions","text":"Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-t-r-a-n-s-i-e-n-t/annotation-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmFieldModifier / TRANSIENT / annotationSpec annotationSpec \u00b6 fun annotationSpec(): AnnotationSpec","title":"Annotation spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-t-r-a-n-s-i-e-n-t/annotation-spec/#annotationspec","text":"fun annotationSpec(): AnnotationSpec","title":"annotationSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-v-o-l-a-t-i-l-e/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmFieldModifier / VOLATILE VOLATILE \u00b6 VOLATILE Functions \u00b6 Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-v-o-l-a-t-i-l-e/#volatile","text":"VOLATILE","title":"VOLATILE"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-v-o-l-a-t-i-l-e/#functions","text":"Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-v-o-l-a-t-i-l-e/annotation-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmFieldModifier / VOLATILE / annotationSpec annotationSpec \u00b6 fun annotationSpec(): AnnotationSpec","title":"Annotation spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-field-modifier/-v-o-l-a-t-i-l-e/annotation-spec/#annotationspec","text":"fun annotationSpec(): AnnotationSpec","title":"annotationSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmMethodModifier JvmMethodModifier \u00b6 enum class JvmMethodModifier : JvmModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. Enum Values \u00b6 Name Summary STATIC SYNCHRONIZED","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/#jvmmethodmodifier","text":"enum class JvmMethodModifier : JvmModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode.","title":"JvmMethodModifier"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/#enum-values","text":"Name Summary STATIC SYNCHRONIZED","title":"Enum Values"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-t-a-t-i-c/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmMethodModifier / STATIC STATIC \u00b6 STATIC Functions \u00b6 Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-t-a-t-i-c/#static","text":"STATIC","title":"STATIC"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-t-a-t-i-c/#functions","text":"Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-t-a-t-i-c/annotation-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmMethodModifier / STATIC / annotationSpec annotationSpec \u00b6 fun annotationSpec(): AnnotationSpec","title":"Annotation spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-t-a-t-i-c/annotation-spec/#annotationspec","text":"fun annotationSpec(): AnnotationSpec","title":"annotationSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-y-n-c-h-r-o-n-i-z-e-d/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmMethodModifier / SYNCHRONIZED SYNCHRONIZED \u00b6 SYNCHRONIZED Functions \u00b6 Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-y-n-c-h-r-o-n-i-z-e-d/#synchronized","text":"SYNCHRONIZED","title":"SYNCHRONIZED"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-y-n-c-h-r-o-n-i-z-e-d/#functions","text":"Name Summary annotationSpec fun annotationSpec(): AnnotationSpec","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-y-n-c-h-r-o-n-i-z-e-d/annotation-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmMethodModifier / SYNCHRONIZED / annotationSpec annotationSpec \u00b6 fun annotationSpec(): AnnotationSpec","title":"Annotation spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-method-modifier/-s-y-n-c-h-r-o-n-i-z-e-d/annotation-spec/#annotationspec","text":"fun annotationSpec(): AnnotationSpec","title":"annotationSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-modifier/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmModifier JvmModifier \u00b6 interface JvmModifier Represents a JVM modifier that is represented as an annotation in Kotlin but as a modifier in bytecode. Examples include annotations such as @JvmStatic or @JvmSynthetic . This API is considered read-only and should not be implemented outside of KotlinPoet. Functions \u00b6 Name Summary annotationSpec abstract fun annotationSpec(): AnnotationSpec Inheritors \u00b6 Name Summary JvmFieldModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmFieldModifier : JvmModifier JvmMethodModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmMethodModifier : JvmModifier","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-modifier/#jvmmodifier","text":"interface JvmModifier Represents a JVM modifier that is represented as an annotation in Kotlin but as a modifier in bytecode. Examples include annotations such as @JvmStatic or @JvmSynthetic . This API is considered read-only and should not be implemented outside of KotlinPoet.","title":"JvmModifier"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-modifier/#functions","text":"Name Summary annotationSpec abstract fun annotationSpec(): AnnotationSpec","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-modifier/#inheritors","text":"Name Summary JvmFieldModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmFieldModifier : JvmModifier JvmMethodModifier Modifiers that are annotations in Kotlin but modifier keywords in bytecode. enum class JvmMethodModifier : JvmModifier","title":"Inheritors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-modifier/annotation-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / JvmModifier / annotationSpec annotationSpec \u00b6 abstract fun annotationSpec(): AnnotationSpec","title":"Annotation spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-jvm-modifier/annotation-spec/#annotationspec","text":"abstract fun annotationSpec(): AnnotationSpec","title":"annotationSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData MethodData \u00b6 data class MethodData Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . Parameters \u00b6 annotations - declared annotations on this method. Constructors \u00b6 Name Summary <init> Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . MethodData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, isOverride: Boolean , exceptions: List <TypeName>) Properties \u00b6 Name Summary exceptions list of exceptions thrown by this method. val exceptions: List <TypeName> isOverride indicates if this method overrides one in a supertype. val isOverride: Boolean isSynthetic indicates if this method is synthetic or not. val isSynthetic: Boolean jvmModifiers set of JvmMethodModifiers on this method. val jvmModifiers: Set < JvmMethodModifier > parameterAnnotations a mapping of parameter indices to annotations on them. val parameterAnnotations: Map < Int , Collection <AnnotationSpec>> Functions \u00b6 Name Summary allAnnotations A collection of all annotations on this method, including any derived from jvmModifiers , isSynthetic , and exceptions . fun allAnnotations(useSiteTarget: UseSiteTarget? = null, containsReifiedTypeParameter: Boolean = false): Collection <AnnotationSpec> Companion Object Properties \u00b6 Name Summary EMPTY val EMPTY: MethodData SYNTHETIC val SYNTHETIC: MethodData","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/#methoddata","text":"data class MethodData Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData .","title":"MethodData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/#parameters","text":"annotations - declared annotations on this method.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/#constructors","text":"Name Summary <init> Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . MethodData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, isOverride: Boolean , exceptions: List <TypeName>)","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/#properties","text":"Name Summary exceptions list of exceptions thrown by this method. val exceptions: List <TypeName> isOverride indicates if this method overrides one in a supertype. val isOverride: Boolean isSynthetic indicates if this method is synthetic or not. val isSynthetic: Boolean jvmModifiers set of JvmMethodModifiers on this method. val jvmModifiers: Set < JvmMethodModifier > parameterAnnotations a mapping of parameter indices to annotations on them. val parameterAnnotations: Map < Int , Collection <AnnotationSpec>>","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/#functions","text":"Name Summary allAnnotations A collection of all annotations on this method, including any derived from jvmModifiers , isSynthetic , and exceptions . fun allAnnotations(useSiteTarget: UseSiteTarget? = null, containsReifiedTypeParameter: Boolean = false): Collection <AnnotationSpec>","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/#companion-object-properties","text":"Name Summary EMPTY val EMPTY: MethodData SYNTHETIC val SYNTHETIC: MethodData","title":"Companion Object Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/-e-m-p-t-y/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / EMPTY EMPTY \u00b6 val EMPTY: MethodData","title":" e m p t y"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/-e-m-p-t-y/#empty","text":"val EMPTY: MethodData","title":"EMPTY"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / <init> <init> \u00b6 MethodData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, isOverride: Boolean , exceptions: List <TypeName>) Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData . Parameters \u00b6 annotations - declared annotations on this method.","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/-init-/#init","text":"MethodData(annotations: List <AnnotationSpec>, parameterAnnotations: Map < Int , Collection <AnnotationSpec>>, isSynthetic: Boolean , jvmModifiers: Set < JvmMethodModifier >, isOverride: Boolean , exceptions: List <TypeName>) Represents relevant information on a method used for ClassInspector . Should only be associated with methods of a ClassData or PropertyData .","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/-init-/#parameters","text":"annotations - declared annotations on this method.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/-s-y-n-t-h-e-t-i-c/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / SYNTHETIC SYNTHETIC \u00b6 val SYNTHETIC: MethodData","title":" s y n t h e t i c"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/-s-y-n-t-h-e-t-i-c/#synthetic","text":"val SYNTHETIC: MethodData","title":"SYNTHETIC"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/all-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / allAnnotations allAnnotations \u00b6 fun allAnnotations(useSiteTarget: UseSiteTarget? = null, containsReifiedTypeParameter: Boolean = false): Collection <AnnotationSpec> A collection of all annotations on this method, including any derived from jvmModifiers , isSynthetic , and exceptions . Parameters \u00b6 useSiteTarget - an optional UseSiteTarget that all annotations on this method should use. containsReifiedTypeParameter - an optional boolean indicating if any type parameters on this function are reified , which are implicitly synthetic.","title":"All annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/all-annotations/#allannotations","text":"fun allAnnotations(useSiteTarget: UseSiteTarget? = null, containsReifiedTypeParameter: Boolean = false): Collection <AnnotationSpec> A collection of all annotations on this method, including any derived from jvmModifiers , isSynthetic , and exceptions .","title":"allAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/all-annotations/#parameters","text":"useSiteTarget - an optional UseSiteTarget that all annotations on this method should use. containsReifiedTypeParameter - an optional boolean indicating if any type parameters on this function are reified , which are implicitly synthetic.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/exceptions/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / exceptions exceptions \u00b6 val exceptions: List <TypeName> list of exceptions thrown by this method. Property \u00b6 exceptions - list of exceptions thrown by this method.","title":"Exceptions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/exceptions/#exceptions","text":"val exceptions: List <TypeName> list of exceptions thrown by this method.","title":"exceptions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/exceptions/#property","text":"exceptions - list of exceptions thrown by this method.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/is-override/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / isOverride isOverride \u00b6 val isOverride: Boolean indicates if this method overrides one in a supertype. Property \u00b6 isOverride - indicates if this method overrides one in a supertype.","title":"Is override"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/is-override/#isoverride","text":"val isOverride: Boolean indicates if this method overrides one in a supertype.","title":"isOverride"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/is-override/#property","text":"isOverride - indicates if this method overrides one in a supertype.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/is-synthetic/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / isSynthetic isSynthetic \u00b6 val isSynthetic: Boolean indicates if this method is synthetic or not. Property \u00b6 isSynthetic - indicates if this method is synthetic or not.","title":"Is synthetic"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/is-synthetic/#issynthetic","text":"val isSynthetic: Boolean indicates if this method is synthetic or not.","title":"isSynthetic"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/is-synthetic/#property","text":"isSynthetic - indicates if this method is synthetic or not.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/jvm-modifiers/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / jvmModifiers jvmModifiers \u00b6 val jvmModifiers: Set < JvmMethodModifier > set of JvmMethodModifiers on this method. Property \u00b6 jvmModifiers - set of JvmMethodModifiers on this method.","title":"Jvm modifiers"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/jvm-modifiers/#jvmmodifiers","text":"val jvmModifiers: Set < JvmMethodModifier > set of JvmMethodModifiers on this method.","title":"jvmModifiers"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/jvm-modifiers/#property","text":"jvmModifiers - set of JvmMethodModifiers on this method.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/parameter-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / MethodData / parameterAnnotations parameterAnnotations \u00b6 val parameterAnnotations: Map < Int , Collection <AnnotationSpec>> a mapping of parameter indices to annotations on them. Property \u00b6 parameterAnnotations - a mapping of parameter indices to annotations on them.","title":"Parameter annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/parameter-annotations/#parameterannotations","text":"val parameterAnnotations: Map < Int , Collection <AnnotationSpec>> a mapping of parameter indices to annotations on them.","title":"parameterAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-method-data/parameter-annotations/#property","text":"parameterAnnotations - a mapping of parameter indices to annotations on them.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData PropertyData \u00b6 data class PropertyData Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . Parameters \u00b6 annotations - declared annotations on this property. Constructors \u00b6 Name Summary <init> Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . PropertyData(annotations: List <AnnotationSpec>, fieldData: FieldData ?, getterData: MethodData ?, setterData: MethodData ?, isJvmField: Boolean ) Properties \u00b6 Name Summary allAnnotations A collection of all annotations on this property including declared ones and any derived from fieldData , getterData , setterData , and isJvmField . val allAnnotations: Collection <AnnotationSpec> fieldData associated FieldData with this property, if any. val fieldData: FieldData ? getterData associated getter (as MethodData ) with this property, if any. val getterData: MethodData ? isJvmField indicates if this property should be treated as a jvm field. val isJvmField: Boolean isOverride Indicates if this property overrides another from a supertype. val isOverride: Boolean setterData associated setter (as MethodData ) with this property, if any. val setterData: MethodData ?","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/#propertydata","text":"data class PropertyData Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData .","title":"PropertyData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/#parameters","text":"annotations - declared annotations on this property.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/#constructors","text":"Name Summary <init> Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . PropertyData(annotations: List <AnnotationSpec>, fieldData: FieldData ?, getterData: MethodData ?, setterData: MethodData ?, isJvmField: Boolean )","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/#properties","text":"Name Summary allAnnotations A collection of all annotations on this property including declared ones and any derived from fieldData , getterData , setterData , and isJvmField . val allAnnotations: Collection <AnnotationSpec> fieldData associated FieldData with this property, if any. val fieldData: FieldData ? getterData associated getter (as MethodData ) with this property, if any. val getterData: MethodData ? isJvmField indicates if this property should be treated as a jvm field. val isJvmField: Boolean isOverride Indicates if this property overrides another from a supertype. val isOverride: Boolean setterData associated setter (as MethodData ) with this property, if any. val setterData: MethodData ?","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData / <init> <init> \u00b6 PropertyData(annotations: List <AnnotationSpec>, fieldData: FieldData ?, getterData: MethodData ?, setterData: MethodData ?, isJvmField: Boolean ) Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData . Parameters \u00b6 annotations - declared annotations on this property.","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/-init-/#init","text":"PropertyData(annotations: List <AnnotationSpec>, fieldData: FieldData ?, getterData: MethodData ?, setterData: MethodData ?, isJvmField: Boolean ) Represents relevant information on a property used for ClassInspector . Should only be associated with properties of a ClassData .","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/-init-/#parameters","text":"annotations - declared annotations on this property.","title":"Parameters"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/all-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData / allAnnotations allAnnotations \u00b6 val allAnnotations: Collection <AnnotationSpec> A collection of all annotations on this property including declared ones and any derived from fieldData , getterData , setterData , and isJvmField .","title":"All annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/all-annotations/#allannotations","text":"val allAnnotations: Collection <AnnotationSpec> A collection of all annotations on this property including declared ones and any derived from fieldData , getterData , setterData , and isJvmField .","title":"allAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/field-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData / fieldData fieldData \u00b6 val fieldData: FieldData ? associated FieldData with this property, if any. Property \u00b6 fieldData - associated FieldData with this property, if any.","title":"Field data"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/field-data/#fielddata","text":"val fieldData: FieldData ? associated FieldData with this property, if any.","title":"fieldData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/field-data/#property","text":"fieldData - associated FieldData with this property, if any.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/getter-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData / getterData getterData \u00b6 val getterData: MethodData ? associated getter (as MethodData ) with this property, if any. Property \u00b6 getterData - associated getter (as MethodData ) with this property, if any.","title":"Getter data"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/getter-data/#getterdata","text":"val getterData: MethodData ? associated getter (as MethodData ) with this property, if any.","title":"getterData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/getter-data/#property","text":"getterData - associated getter (as MethodData ) with this property, if any.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/is-jvm-field/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData / isJvmField isJvmField \u00b6 val isJvmField: Boolean indicates if this property should be treated as a jvm field. Property \u00b6 isJvmField - indicates if this property should be treated as a jvm field.","title":"Is jvm field"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/is-jvm-field/#isjvmfield","text":"val isJvmField: Boolean indicates if this property should be treated as a jvm field.","title":"isJvmField"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/is-jvm-field/#property","text":"isJvmField - indicates if this property should be treated as a jvm field.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/is-override/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData / isOverride isOverride \u00b6 val isOverride: Boolean Indicates if this property overrides another from a supertype.","title":"Is override"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/is-override/#isoverride","text":"val isOverride: Boolean Indicates if this property overrides another from a supertype.","title":"isOverride"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/setter-data/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / PropertyData / setterData setterData \u00b6 val setterData: MethodData ? associated setter (as MethodData ) with this property, if any. Property \u00b6 setterData - associated setter (as MethodData ) with this property, if any.","title":"Setter data"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/setter-data/#setterdata","text":"val setterData: MethodData ? associated setter (as MethodData ) with this property, if any.","title":"setterData"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-property-data/setter-data/#property","text":"setterData - associated setter (as MethodData ) with this property, if any.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / TypeNameAliasTag TypeNameAliasTag \u00b6 class TypeNameAliasTag This tag indicates that this TypeName represents a typealias type. Constructors \u00b6 Name Summary <init> This tag indicates that this TypeName represents a typealias type. TypeNameAliasTag(type: TypeName) Properties \u00b6 Name Summary type the underlying type for this alias. val type: TypeName","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/#typenamealiastag","text":"class TypeNameAliasTag This tag indicates that this TypeName represents a typealias type.","title":"TypeNameAliasTag"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/#constructors","text":"Name Summary <init> This tag indicates that this TypeName represents a typealias type. TypeNameAliasTag(type: TypeName)","title":"Constructors"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/#properties","text":"Name Summary type the underlying type for this alias. val type: TypeName","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/-init-/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / TypeNameAliasTag / <init> <init> \u00b6 TypeNameAliasTag(type: TypeName) This tag indicates that this TypeName represents a typealias type.","title":" init "},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/-init-/#init","text":"TypeNameAliasTag(type: TypeName) This tag indicates that this TypeName represents a typealias type.","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/type/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / TypeNameAliasTag / type type \u00b6 val type: TypeName the underlying type for this alias. Property \u00b6 type - the underlying type for this alias.","title":"Type"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/type/#type","text":"val type: TypeName the underlying type for this alias.","title":"type"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/-type-name-alias-tag/type/#property","text":"type - the underlying type for this alias.","title":"Property"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-class/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / com.squareup.kotlinpoet.metadata.ImmutableKmClass Extensions for com.squareup.kotlinpoet.metadata.ImmutableKmClass \u00b6 Name Summary toFileSpec fun ImmutableKmClass.toFileSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): FileSpec toTypeSpec fun ImmutableKmClass.toTypeSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): TypeSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-class/#extensions-for-comsquareupkotlinpoetmetadataimmutablekmclass","text":"Name Summary toFileSpec fun ImmutableKmClass.toFileSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): FileSpec toTypeSpec fun ImmutableKmClass.toTypeSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): TypeSpec","title":"Extensions for com.squareup.kotlinpoet.metadata.ImmutableKmClass"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-class/to-file-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / com.squareup.kotlinpoet.metadata.ImmutableKmClass / toFileSpec toFileSpec \u00b6 fun ImmutableKmClass.toFileSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): FileSpec Return a FileSpec ABI representation of this ImmutableKmClass .","title":"To file spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-class/to-file-spec/#tofilespec","text":"fun ImmutableKmClass.toFileSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): FileSpec Return a FileSpec ABI representation of this ImmutableKmClass .","title":"toFileSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-class/to-type-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / com.squareup.kotlinpoet.metadata.ImmutableKmClass / toTypeSpec toTypeSpec \u00b6 fun ImmutableKmClass.toTypeSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): TypeSpec Return a TypeSpec ABI representation of this ImmutableKmClass .","title":"To type spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-class/to-type-spec/#totypespec","text":"fun ImmutableKmClass.toTypeSpec(classInspector: ClassInspector ?, className: ClassName = createClassName(name)): TypeSpec Return a TypeSpec ABI representation of this ImmutableKmClass .","title":"toTypeSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-package/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / com.squareup.kotlinpoet.metadata.ImmutableKmPackage Extensions for com.squareup.kotlinpoet.metadata.ImmutableKmPackage \u00b6 Name Summary toFileSpec fun ImmutableKmPackage.toFileSpec(classInspector: ClassInspector ?, className: ClassName): FileSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-package/#extensions-for-comsquareupkotlinpoetmetadataimmutablekmpackage","text":"Name Summary toFileSpec fun ImmutableKmPackage.toFileSpec(classInspector: ClassInspector ?, className: ClassName): FileSpec","title":"Extensions for com.squareup.kotlinpoet.metadata.ImmutableKmPackage"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-package/to-file-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / com.squareup.kotlinpoet.metadata.ImmutableKmPackage / toFileSpec toFileSpec \u00b6 fun ImmutableKmPackage.toFileSpec(classInspector: ClassInspector ?, className: ClassName): FileSpec Return a FileSpec ABI representation of this ImmutableKmPackage .","title":"To file spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/com.squareup.kotlinpoet.metadata.-immutable-km-package/to-file-spec/#tofilespec","text":"fun ImmutableKmPackage.toFileSpec(classInspector: ClassInspector ?, className: ClassName): FileSpec Return a FileSpec ABI representation of this ImmutableKmPackage .","title":"toFileSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/java.lang.-class/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / java.lang.Class Extensions for java.lang.Class \u00b6 Name Summary toFileSpec fun Class <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec toTypeSpec fun Class <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/java.lang.-class/#extensions-for-javalangclass","text":"Name Summary toFileSpec fun Class <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec toTypeSpec fun Class <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec","title":"Extensions for java.lang.Class"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/java.lang.-class/to-file-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / java.lang.Class / toFileSpec toFileSpec \u00b6 fun Class <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec Return a FileSpec ABI representation of this KClass .","title":"To file spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/java.lang.-class/to-file-spec/#tofilespec","text":"fun Class <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec Return a FileSpec ABI representation of this KClass .","title":"toFileSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/java.lang.-class/to-type-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / java.lang.Class / toTypeSpec toTypeSpec \u00b6 fun Class <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec Return a TypeSpec ABI representation of this KClass .","title":"To type spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/java.lang.-class/to-type-spec/#totypespec","text":"fun Class <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec Return a TypeSpec ABI representation of this KClass .","title":"toTypeSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/javax.lang.model.element.-type-element/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / javax.lang.model.element.TypeElement Extensions for javax.lang.model.element.TypeElement \u00b6 Name Summary toFileSpec fun TypeElement .toFileSpec(classInspector: ClassInspector ? = null): FileSpec toTypeSpec fun TypeElement .toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/javax.lang.model.element.-type-element/#extensions-for-javaxlangmodelelementtypeelement","text":"Name Summary toFileSpec fun TypeElement .toFileSpec(classInspector: ClassInspector ? = null): FileSpec toTypeSpec fun TypeElement .toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec","title":"Extensions for javax.lang.model.element.TypeElement"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/javax.lang.model.element.-type-element/to-file-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / javax.lang.model.element.TypeElement / toFileSpec toFileSpec \u00b6 fun TypeElement .toFileSpec(classInspector: ClassInspector ? = null): FileSpec Return a FileSpec ABI representation of this TypeElement .","title":"To file spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/javax.lang.model.element.-type-element/to-file-spec/#tofilespec","text":"fun TypeElement .toFileSpec(classInspector: ClassInspector ? = null): FileSpec Return a FileSpec ABI representation of this TypeElement .","title":"toFileSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/javax.lang.model.element.-type-element/to-type-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / javax.lang.model.element.TypeElement / toTypeSpec toTypeSpec \u00b6 fun TypeElement .toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec Return a TypeSpec ABI representation of this TypeElement .","title":"To type spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/javax.lang.model.element.-type-element/to-type-spec/#totypespec","text":"fun TypeElement .toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec Return a TypeSpec ABI representation of this TypeElement .","title":"toTypeSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/kotlin.reflect.-k-class/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / kotlin.reflect.KClass Extensions for kotlin.reflect.KClass \u00b6 Name Summary toFileSpec fun KClass <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec toTypeSpec fun KClass <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/kotlin.reflect.-k-class/#extensions-for-kotlinreflectkclass","text":"Name Summary toFileSpec fun KClass <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec toTypeSpec fun KClass <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec","title":"Extensions for kotlin.reflect.KClass"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/kotlin.reflect.-k-class/to-file-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / kotlin.reflect.KClass / toFileSpec toFileSpec \u00b6 fun KClass <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec Return a FileSpec ABI representation of this KClass .","title":"To file spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/kotlin.reflect.-k-class/to-file-spec/#tofilespec","text":"fun KClass <*>.toFileSpec(classInspector: ClassInspector ? = null): FileSpec Return a FileSpec ABI representation of this KClass .","title":"toFileSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/kotlin.reflect.-k-class/to-type-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs / kotlin.reflect.KClass / toTypeSpec toTypeSpec \u00b6 fun KClass <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec Return a TypeSpec ABI representation of this KClass .","title":"To type spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs/kotlin.reflect.-k-class/to-type-spec/#totypespec","text":"fun KClass <*>.toTypeSpec(classInspector: ClassInspector ? = null): TypeSpec Return a TypeSpec ABI representation of this KClass .","title":"toTypeSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal Package com.squareup.kotlinpoet.metadata.specs.internal \u00b6 Types \u00b6 Name Summary ClassInspectorUtil object ClassInspectorUtil","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/#package-comsquareupkotlinpoetmetadataspecsinternal","text":"","title":"Package com.squareup.kotlinpoet.metadata.specs.internal"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/#types","text":"Name Summary ClassInspectorUtil object ClassInspectorUtil","title":"Types"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil ClassInspectorUtil \u00b6 object ClassInspectorUtil Properties \u00b6 Name Summary JVM_NAME val JVM_NAME: ClassName KOTLIN_INTRINSIC_INTERFACES val KOTLIN_INTRINSIC_INTERFACES: Set <ClassName> Functions \u00b6 Name Summary codeLiteralOf fun codeLiteralOf(literal: Any ): CodeBlock computeIsJvmField Infers if property is a jvm field and should be annotated as such given the input parameters. fun computeIsJvmField(property: ImmutableKmProperty, classInspector: ClassInspector , isCompanionObject: Boolean , hasGetter: Boolean , hasSetter: Boolean , hasField: Boolean ): Boolean createAnnotations fun createAnnotations(siteTarget: UseSiteTarget? = null, body: MutableCollection <AnnotationSpec>.() -> Unit ): Collection <AnnotationSpec> createClassName Best guesses a ClassName as represented in Metadata\u2019s kotlinx.metadata.ClassName , where package names in this name are separated by \u2018/\u2019 and class names are separated by \u2018.\u2019. fun createClassName(kotlinMetadataName: String ): ClassName createThrowsSpec fun createThrowsSpec(exceptions: Collection <TypeName>, useSiteTarget: UseSiteTarget? = null): AnnotationSpec filterOutNullabilityAnnotations fun filterOutNullabilityAnnotations(annotations: List <AnnotationSpec>): List <AnnotationSpec> toTreeSet fun Iterable <AnnotationSpec>.toTreeSet(): TreeSet <AnnotationSpec>","title":"Index"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/#classinspectorutil","text":"object ClassInspectorUtil","title":"ClassInspectorUtil"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/#properties","text":"Name Summary JVM_NAME val JVM_NAME: ClassName KOTLIN_INTRINSIC_INTERFACES val KOTLIN_INTRINSIC_INTERFACES: Set <ClassName>","title":"Properties"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/#functions","text":"Name Summary codeLiteralOf fun codeLiteralOf(literal: Any ): CodeBlock computeIsJvmField Infers if property is a jvm field and should be annotated as such given the input parameters. fun computeIsJvmField(property: ImmutableKmProperty, classInspector: ClassInspector , isCompanionObject: Boolean , hasGetter: Boolean , hasSetter: Boolean , hasField: Boolean ): Boolean createAnnotations fun createAnnotations(siteTarget: UseSiteTarget? = null, body: MutableCollection <AnnotationSpec>.() -> Unit ): Collection <AnnotationSpec> createClassName Best guesses a ClassName as represented in Metadata\u2019s kotlinx.metadata.ClassName , where package names in this name are separated by \u2018/\u2019 and class names are separated by \u2018.\u2019. fun createClassName(kotlinMetadataName: String ): ClassName createThrowsSpec fun createThrowsSpec(exceptions: Collection <TypeName>, useSiteTarget: UseSiteTarget? = null): AnnotationSpec filterOutNullabilityAnnotations fun filterOutNullabilityAnnotations(annotations: List <AnnotationSpec>): List <AnnotationSpec> toTreeSet fun Iterable <AnnotationSpec>.toTreeSet(): TreeSet <AnnotationSpec>","title":"Functions"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/-j-v-m_-n-a-m-e/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / JVM_NAME JVM_NAME \u00b6 val JVM_NAME: ClassName","title":" j v m  n a m e"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/-j-v-m_-n-a-m-e/#jvm_name","text":"val JVM_NAME: ClassName","title":"JVM_NAME"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/-k-o-t-l-i-n_-i-n-t-r-i-n-s-i-c_-i-n-t-e-r-f-a-c-e-s/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / KOTLIN_INTRINSIC_INTERFACES KOTLIN_INTRINSIC_INTERFACES \u00b6 val KOTLIN_INTRINSIC_INTERFACES: Set <ClassName>","title":" k o t l i n  i n t r i n s i c  i n t e r f a c e s"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/-k-o-t-l-i-n_-i-n-t-r-i-n-s-i-c_-i-n-t-e-r-f-a-c-e-s/#kotlin_intrinsic_interfaces","text":"val KOTLIN_INTRINSIC_INTERFACES: Set <ClassName>","title":"KOTLIN_INTRINSIC_INTERFACES"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/code-literal-of/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / codeLiteralOf codeLiteralOf \u00b6 fun codeLiteralOf(literal: Any ): CodeBlock Return a CodeBlock representation of a literal value.","title":"Code literal of"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/code-literal-of/#codeliteralof","text":"fun codeLiteralOf(literal: Any ): CodeBlock Return a CodeBlock representation of a literal value.","title":"codeLiteralOf"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/compute-is-jvm-field/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / computeIsJvmField computeIsJvmField \u00b6 fun computeIsJvmField(property: ImmutableKmProperty, classInspector: ClassInspector , isCompanionObject: Boolean , hasGetter: Boolean , hasSetter: Boolean , hasField: Boolean ): Boolean Infers if property is a jvm field and should be annotated as such given the input parameters.","title":"Compute is jvm field"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/compute-is-jvm-field/#computeisjvmfield","text":"fun computeIsJvmField(property: ImmutableKmProperty, classInspector: ClassInspector , isCompanionObject: Boolean , hasGetter: Boolean , hasSetter: Boolean , hasField: Boolean ): Boolean Infers if property is a jvm field and should be annotated as such given the input parameters.","title":"computeIsJvmField"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/create-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / createAnnotations createAnnotations \u00b6 fun createAnnotations(siteTarget: UseSiteTarget? = null, body: MutableCollection <AnnotationSpec>.() -> Unit ): Collection <AnnotationSpec> Return a new collection of AnnotationSpecs with sorting and de-duping input annotations from body .","title":"Create annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/create-annotations/#createannotations","text":"fun createAnnotations(siteTarget: UseSiteTarget? = null, body: MutableCollection <AnnotationSpec>.() -> Unit ): Collection <AnnotationSpec> Return a new collection of AnnotationSpecs with sorting and de-duping input annotations from body .","title":"createAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/create-class-name/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / createClassName createClassName \u00b6 fun createClassName(kotlinMetadataName: String ): ClassName Best guesses a ClassName as represented in Metadata\u2019s kotlinx.metadata.ClassName , where package names in this name are separated by \u2018/\u2019 and class names are separated by \u2018.\u2019. For example: \"org/foo/bar/Baz.Nested\" . Local classes are prefixed with \u201c.\u201d, but for KotlinPoetMetadataSpecs\u2019 use case we don\u2019t deal with those.","title":"Create class name"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/create-class-name/#createclassname","text":"fun createClassName(kotlinMetadataName: String ): ClassName Best guesses a ClassName as represented in Metadata\u2019s kotlinx.metadata.ClassName , where package names in this name are separated by \u2018/\u2019 and class names are separated by \u2018.\u2019. For example: \"org/foo/bar/Baz.Nested\" . Local classes are prefixed with \u201c.\u201d, but for KotlinPoetMetadataSpecs\u2019 use case we don\u2019t deal with those.","title":"createClassName"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/create-throws-spec/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / createThrowsSpec createThrowsSpec \u00b6 fun createThrowsSpec(exceptions: Collection <TypeName>, useSiteTarget: UseSiteTarget? = null): AnnotationSpec Return a @Throws AnnotationSpec representation of a given collection of exceptions .","title":"Create throws spec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/create-throws-spec/#createthrowsspec","text":"fun createThrowsSpec(exceptions: Collection <TypeName>, useSiteTarget: UseSiteTarget? = null): AnnotationSpec Return a @Throws AnnotationSpec representation of a given collection of exceptions .","title":"createThrowsSpec"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/filter-out-nullability-annotations/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / filterOutNullabilityAnnotations filterOutNullabilityAnnotations \u00b6 fun filterOutNullabilityAnnotations(annotations: List <AnnotationSpec>): List <AnnotationSpec>","title":"Filter out nullability annotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/filter-out-nullability-annotations/#filteroutnullabilityannotations","text":"fun filterOutNullabilityAnnotations(annotations: List <AnnotationSpec>): List <AnnotationSpec>","title":"filterOutNullabilityAnnotations"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/to-tree-set/","text":"kotlinpoet-metadata-specs / com.squareup.kotlinpoet.metadata.specs.internal / ClassInspectorUtil / toTreeSet toTreeSet \u00b6 fun Iterable <AnnotationSpec>.toTreeSet(): TreeSet <AnnotationSpec>","title":"To tree set"},{"location":"1.x/kotlinpoet-metadata-specs/com.squareup.kotlinpoet.metadata.specs.internal/-class-inspector-util/to-tree-set/#totreeset","text":"fun Iterable <AnnotationSpec>.toTreeSet(): TreeSet <AnnotationSpec>","title":"toTreeSet"}]}