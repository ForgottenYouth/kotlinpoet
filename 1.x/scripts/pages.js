var pages = [{'name': 'class ReflectiveClassInspector : ClassInspector', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/index.html', 'searchKey':'ReflectiveClassInspector'},
{'name': 'object Companion', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector.Companion', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/-companion/index.html', 'searchKey':'Companion'},
{'name': 'fun create(): ClassInspector', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector.Companion.create', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/-companion/create.html', 'searchKey':'create'},
{'name': 'open override fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector.containerData', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/container-data.html', 'searchKey':'containerData'},
{'name': 'open override fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector.declarationContainerFor', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/declaration-container-for.html', 'searchKey':'declarationContainerFor'},
{'name': 'open override fun enumEntry(enumClassName: ClassName, memberName: String): EnumEntryData', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector.enumEntry', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/enum-entry.html', 'searchKey':'enumEntry'},
{'name': 'open override fun isInterface(className: ClassName): Boolean', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector.isInterface', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/is-interface.html', 'searchKey':'isInterface'},
{'name': 'open override fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean', 'description':'com.squareup.kotlinpoet.classinspector.reflective.ReflectiveClassInspector.methodExists', 'location':'kotlinpoet-classinspector-reflective/com.squareup.kotlinpoet.classinspector.reflective/-reflective-class-inspector/method-exists.html', 'searchKey':'methodExists'}]
